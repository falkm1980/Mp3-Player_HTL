
DisplayTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000d62  00000df6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800122  00800122  00000e18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001069  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092f  00000000  00000000  00002009  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac9  00000000  00000000  00002938  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00003404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000534  00000000  00000000  0000372c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000642  00000000  00000000  00003c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000042a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 84 01 	jmp	0x308	; 0x308 <__ctors_end>
   4:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
   8:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
   c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  10:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  14:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  18:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  1c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  20:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  24:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  28:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  2c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  30:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  34:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  38:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  3c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  40:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  44:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  48:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  4c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  50:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  54:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  58:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  5c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  60:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>
  64:	0c 94 a1 01 	jmp	0x342	; 0x342 <__bad_interrupt>

00000068 <__trampolines_end>:
	...
  70:	00 2f       	mov	r16, r16
  72:	00 00       	nop
  74:	00 00       	nop
  76:	07 00       	.word	0x0007	; ????
  78:	07 00       	.word	0x0007	; ????
  7a:	00 14       	cp	r0, r0
  7c:	7f 14       	cp	r7, r15
  7e:	7f 14       	cp	r7, r15
  80:	00 24       	eor	r0, r0
  82:	2a 7f       	andi	r18, 0xFA	; 250
  84:	2a 12       	cpse	r2, r26
  86:	00 62       	ori	r16, 0x20	; 32
  88:	64 08       	sbc	r6, r4
  8a:	13 23       	and	r17, r19
  8c:	00 36       	cpi	r16, 0x60	; 96
  8e:	49 55       	subi	r20, 0x59	; 89
  90:	22 50       	subi	r18, 0x02	; 2
  92:	00 00       	nop
  94:	05 03       	mulsu	r16, r21
  96:	00 00       	nop
  98:	00 00       	nop
  9a:	1c 22       	and	r1, r28
  9c:	41 00       	.word	0x0041	; ????
  9e:	00 00       	nop
  a0:	41 22       	and	r4, r17
  a2:	1c 00       	.word	0x001c	; ????
  a4:	00 14       	cp	r0, r0
  a6:	08 3e       	cpi	r16, 0xE8	; 232
  a8:	08 14       	cp	r0, r8
  aa:	00 08       	sbc	r0, r0
  ac:	08 3e       	cpi	r16, 0xE8	; 232
  ae:	08 08       	sbc	r0, r8
  b0:	00 00       	nop
  b2:	00 a0       	ldd	r0, Z+32	; 0x20
  b4:	60 00       	.word	0x0060	; ????
  b6:	00 08       	sbc	r0, r0
  b8:	08 08       	sbc	r0, r8
  ba:	08 08       	sbc	r0, r8
  bc:	00 00       	nop
  be:	60 60       	ori	r22, 0x00	; 0
  c0:	00 00       	nop
  c2:	00 20       	and	r0, r0
  c4:	10 08       	sbc	r1, r0
  c6:	04 02       	muls	r16, r20
  c8:	00 3e       	cpi	r16, 0xE0	; 224
  ca:	51 49       	sbci	r21, 0x91	; 145
  cc:	45 3e       	cpi	r20, 0xE5	; 229
  ce:	00 00       	nop
  d0:	42 7f       	andi	r20, 0xF2	; 242
  d2:	40 00       	.word	0x0040	; ????
  d4:	00 42       	sbci	r16, 0x20	; 32
  d6:	61 51       	subi	r22, 0x11	; 17
  d8:	49 46       	sbci	r20, 0x69	; 105
  da:	00 21       	and	r16, r0
  dc:	41 45       	sbci	r20, 0x51	; 81
  de:	4b 31       	cpi	r20, 0x1B	; 27
  e0:	00 18       	sub	r0, r0
  e2:	14 12       	cpse	r1, r20
  e4:	7f 10       	cpse	r7, r15
  e6:	00 27       	eor	r16, r16
  e8:	45 45       	sbci	r20, 0x55	; 85
  ea:	45 39       	cpi	r20, 0x95	; 149
  ec:	00 3c       	cpi	r16, 0xC0	; 192
  ee:	4a 49       	sbci	r20, 0x9A	; 154
  f0:	49 30       	cpi	r20, 0x09	; 9
  f2:	00 01       	movw	r0, r0
  f4:	71 09       	sbc	r23, r1
  f6:	05 03       	mulsu	r16, r21
  f8:	00 36       	cpi	r16, 0x60	; 96
  fa:	49 49       	sbci	r20, 0x99	; 153
  fc:	49 36       	cpi	r20, 0x69	; 105
  fe:	00 06       	cpc	r0, r16
 100:	49 49       	sbci	r20, 0x99	; 153
 102:	29 1e       	adc	r2, r25
 104:	00 00       	nop
 106:	36 36       	cpi	r19, 0x66	; 102
 108:	00 00       	nop
 10a:	00 00       	nop
 10c:	56 36       	cpi	r21, 0x66	; 102
 10e:	00 00       	nop
 110:	00 08       	sbc	r0, r0
 112:	14 22       	and	r1, r20
 114:	41 00       	.word	0x0041	; ????
 116:	00 14       	cp	r0, r0
 118:	14 14       	cp	r1, r4
 11a:	14 14       	cp	r1, r4
 11c:	00 00       	nop
 11e:	41 22       	and	r4, r17
 120:	14 08       	sbc	r1, r4
 122:	00 02       	muls	r16, r16
 124:	01 51       	subi	r16, 0x11	; 17
 126:	09 06       	cpc	r0, r25
 128:	00 32       	cpi	r16, 0x20	; 32
 12a:	49 59       	subi	r20, 0x99	; 153
 12c:	51 3e       	cpi	r21, 0xE1	; 225
 12e:	00 7c       	andi	r16, 0xC0	; 192
 130:	12 11       	cpse	r17, r2
 132:	12 7c       	andi	r17, 0xC2	; 194
 134:	00 7f       	andi	r16, 0xF0	; 240
 136:	49 49       	sbci	r20, 0x99	; 153
 138:	49 36       	cpi	r20, 0x69	; 105
 13a:	00 3e       	cpi	r16, 0xE0	; 224
 13c:	41 41       	sbci	r20, 0x11	; 17
 13e:	41 22       	and	r4, r17
 140:	00 7f       	andi	r16, 0xF0	; 240
 142:	41 41       	sbci	r20, 0x11	; 17
 144:	22 1c       	adc	r2, r2
 146:	00 7f       	andi	r16, 0xF0	; 240
 148:	49 49       	sbci	r20, 0x99	; 153
 14a:	49 41       	sbci	r20, 0x19	; 25
 14c:	00 7f       	andi	r16, 0xF0	; 240
 14e:	09 09       	sbc	r16, r9
 150:	09 01       	movw	r0, r18
 152:	00 3e       	cpi	r16, 0xE0	; 224
 154:	41 49       	sbci	r20, 0x91	; 145
 156:	49 7a       	andi	r20, 0xA9	; 169
 158:	00 7f       	andi	r16, 0xF0	; 240
 15a:	08 08       	sbc	r0, r8
 15c:	08 7f       	andi	r16, 0xF8	; 248
 15e:	00 00       	nop
 160:	41 7f       	andi	r20, 0xF1	; 241
 162:	41 00       	.word	0x0041	; ????
 164:	00 20       	and	r0, r0
 166:	40 41       	sbci	r20, 0x10	; 16
 168:	3f 01       	movw	r6, r30
 16a:	00 7f       	andi	r16, 0xF0	; 240
 16c:	08 14       	cp	r0, r8
 16e:	22 41       	sbci	r18, 0x12	; 18
 170:	00 7f       	andi	r16, 0xF0	; 240
 172:	40 40       	sbci	r20, 0x00	; 0
 174:	40 40       	sbci	r20, 0x00	; 0
 176:	00 7f       	andi	r16, 0xF0	; 240
 178:	02 0c       	add	r0, r2
 17a:	02 7f       	andi	r16, 0xF2	; 242
 17c:	00 7f       	andi	r16, 0xF0	; 240
 17e:	04 08       	sbc	r0, r4
 180:	10 7f       	andi	r17, 0xF0	; 240
 182:	00 3e       	cpi	r16, 0xE0	; 224
 184:	41 41       	sbci	r20, 0x11	; 17
 186:	41 3e       	cpi	r20, 0xE1	; 225
 188:	00 7f       	andi	r16, 0xF0	; 240
 18a:	09 09       	sbc	r16, r9
 18c:	09 06       	cpc	r0, r25
 18e:	00 3e       	cpi	r16, 0xE0	; 224
 190:	41 51       	subi	r20, 0x11	; 17
 192:	21 5e       	subi	r18, 0xE1	; 225
 194:	00 7f       	andi	r16, 0xF0	; 240
 196:	09 19       	sub	r16, r9
 198:	29 46       	sbci	r18, 0x69	; 105
 19a:	00 46       	sbci	r16, 0x60	; 96
 19c:	49 49       	sbci	r20, 0x99	; 153
 19e:	49 31       	cpi	r20, 0x19	; 25
 1a0:	00 01       	movw	r0, r0
 1a2:	01 7f       	andi	r16, 0xF1	; 241
 1a4:	01 01       	movw	r0, r2
 1a6:	00 3f       	cpi	r16, 0xF0	; 240
 1a8:	40 40       	sbci	r20, 0x00	; 0
 1aa:	40 3f       	cpi	r20, 0xF0	; 240
 1ac:	00 1f       	adc	r16, r16
 1ae:	20 40       	sbci	r18, 0x00	; 0
 1b0:	20 1f       	adc	r18, r16
 1b2:	00 3f       	cpi	r16, 0xF0	; 240
 1b4:	40 38       	cpi	r20, 0x80	; 128
 1b6:	40 3f       	cpi	r20, 0xF0	; 240
 1b8:	00 63       	ori	r16, 0x30	; 48
 1ba:	14 08       	sbc	r1, r4
 1bc:	14 63       	ori	r17, 0x34	; 52
 1be:	00 07       	cpc	r16, r16
 1c0:	08 70       	andi	r16, 0x08	; 8
 1c2:	08 07       	cpc	r16, r24
 1c4:	00 61       	ori	r16, 0x10	; 16
 1c6:	51 49       	sbci	r21, 0x91	; 145
 1c8:	45 43       	sbci	r20, 0x35	; 53
 1ca:	00 00       	nop
 1cc:	7f 41       	sbci	r23, 0x1F	; 31
 1ce:	41 00       	.word	0x0041	; ????
 1d0:	00 55       	subi	r16, 0x50	; 80
 1d2:	2a 55       	subi	r18, 0x5A	; 90
 1d4:	2a 55       	subi	r18, 0x5A	; 90
 1d6:	00 00       	nop
 1d8:	41 41       	sbci	r20, 0x11	; 17
 1da:	7f 00       	.word	0x007f	; ????
 1dc:	00 04       	cpc	r0, r0
 1de:	02 01       	movw	r0, r4
 1e0:	02 04       	cpc	r0, r2
 1e2:	00 40       	sbci	r16, 0x00	; 0
 1e4:	40 40       	sbci	r20, 0x00	; 0
 1e6:	40 40       	sbci	r20, 0x00	; 0
 1e8:	00 00       	nop
 1ea:	01 02       	muls	r16, r17
 1ec:	04 00       	.word	0x0004	; ????
 1ee:	00 20       	and	r0, r0
 1f0:	54 54       	subi	r21, 0x44	; 68
 1f2:	54 78       	andi	r21, 0x84	; 132
 1f4:	00 7f       	andi	r16, 0xF0	; 240
 1f6:	48 44       	sbci	r20, 0x48	; 72
 1f8:	44 38       	cpi	r20, 0x84	; 132
 1fa:	00 38       	cpi	r16, 0x80	; 128
 1fc:	44 44       	sbci	r20, 0x44	; 68
 1fe:	44 20       	and	r4, r4
 200:	00 38       	cpi	r16, 0x80	; 128
 202:	44 44       	sbci	r20, 0x44	; 68
 204:	48 7f       	andi	r20, 0xF8	; 248
 206:	00 38       	cpi	r16, 0x80	; 128
 208:	54 54       	subi	r21, 0x44	; 68
 20a:	54 18       	sub	r5, r4
 20c:	00 08       	sbc	r0, r0
 20e:	7e 09       	sbc	r23, r14
 210:	01 02       	muls	r16, r17
 212:	00 18       	sub	r0, r0
 214:	a4 a4       	ldd	r10, Z+44	; 0x2c
 216:	a4 7c       	andi	r26, 0xC4	; 196
 218:	00 7f       	andi	r16, 0xF0	; 240
 21a:	08 04       	cpc	r0, r8
 21c:	04 78       	andi	r16, 0x84	; 132
 21e:	00 00       	nop
 220:	44 7d       	andi	r20, 0xD4	; 212
 222:	40 00       	.word	0x0040	; ????
 224:	00 40       	sbci	r16, 0x00	; 0
 226:	80 84       	ldd	r8, Z+8	; 0x08
 228:	7d 00       	.word	0x007d	; ????
 22a:	00 7f       	andi	r16, 0xF0	; 240
 22c:	10 28       	or	r1, r0
 22e:	44 00       	.word	0x0044	; ????
 230:	00 00       	nop
 232:	41 7f       	andi	r20, 0xF1	; 241
 234:	40 00       	.word	0x0040	; ????
 236:	00 7c       	andi	r16, 0xC0	; 192
 238:	04 18       	sub	r0, r4
 23a:	04 78       	andi	r16, 0x84	; 132
 23c:	00 7c       	andi	r16, 0xC0	; 192
 23e:	08 04       	cpc	r0, r8
 240:	04 78       	andi	r16, 0x84	; 132
 242:	00 38       	cpi	r16, 0x80	; 128
 244:	44 44       	sbci	r20, 0x44	; 68
 246:	44 38       	cpi	r20, 0x84	; 132
 248:	00 fc       	sbrc	r0, 0
 24a:	24 24       	eor	r2, r4
 24c:	24 18       	sub	r2, r4
 24e:	00 18       	sub	r0, r0
 250:	24 24       	eor	r2, r4
 252:	18 fc       	.word	0xfc18	; ????
 254:	00 7c       	andi	r16, 0xC0	; 192
 256:	08 04       	cpc	r0, r8
 258:	04 08       	sbc	r0, r4
 25a:	00 48       	sbci	r16, 0x80	; 128
 25c:	54 54       	subi	r21, 0x44	; 68
 25e:	54 20       	and	r5, r4
 260:	00 04       	cpc	r0, r0
 262:	3f 44       	sbci	r19, 0x4F	; 79
 264:	40 20       	and	r4, r0
 266:	00 3c       	cpi	r16, 0xC0	; 192
 268:	40 40       	sbci	r20, 0x00	; 0
 26a:	20 7c       	andi	r18, 0xC0	; 192
 26c:	00 1c       	adc	r0, r0
 26e:	20 40       	sbci	r18, 0x00	; 0
 270:	20 1c       	adc	r2, r0
 272:	00 3c       	cpi	r16, 0xC0	; 192
 274:	40 30       	cpi	r20, 0x00	; 0
 276:	40 3c       	cpi	r20, 0xC0	; 192
 278:	00 44       	sbci	r16, 0x40	; 64
 27a:	28 10       	cpse	r2, r8
 27c:	28 44       	sbci	r18, 0x48	; 72
 27e:	00 1c       	adc	r0, r0
 280:	a0 a0       	ldd	r10, Z+32	; 0x20
 282:	a0 7c       	andi	r26, 0xC0	; 192
 284:	00 44       	sbci	r16, 0x40	; 64
 286:	64 54       	subi	r22, 0x44	; 68
 288:	4c 44       	sbci	r20, 0x4C	; 76
 28a:	00 00       	nop
 28c:	08 77       	andi	r16, 0x78	; 120
 28e:	41 00       	.word	0x0041	; ????
 290:	00 00       	nop
 292:	00 63       	ori	r16, 0x30	; 48
 294:	00 00       	nop
 296:	00 00       	nop
 298:	41 77       	andi	r20, 0x71	; 113
 29a:	08 00       	.word	0x0008	; ????
 29c:	00 08       	sbc	r0, r0
 29e:	04 08       	sbc	r0, r4
 2a0:	08 04       	cpc	r0, r8
 2a2:	00 3a       	cpi	r16, 0xA0	; 160
 2a4:	40 40       	sbci	r20, 0x00	; 0
 2a6:	20 7a       	andi	r18, 0xA0	; 160
 2a8:	00 3d       	cpi	r16, 0xD0	; 208
 2aa:	40 40       	sbci	r20, 0x00	; 0
 2ac:	40 3d       	cpi	r20, 0xD0	; 208
 2ae:	00 21       	and	r16, r0
 2b0:	54 54       	subi	r21, 0x44	; 68
 2b2:	54 79       	andi	r21, 0x94	; 148
 2b4:	00 7d       	andi	r16, 0xD0	; 208
 2b6:	12 11       	cpse	r17, r2
 2b8:	12 7d       	andi	r17, 0xD2	; 210
 2ba:	00 39       	cpi	r16, 0x90	; 144
 2bc:	44 44       	sbci	r20, 0x44	; 68
 2be:	44 39       	cpi	r20, 0x94	; 148
 2c0:	00 3d       	cpi	r16, 0xD0	; 208
 2c2:	42 42       	sbci	r20, 0x22	; 34
 2c4:	42 3d       	cpi	r20, 0xD2	; 210
 2c6:	00 02       	muls	r16, r16
 2c8:	05 02       	muls	r16, r21
 2ca:	00 00       	nop
 2cc:	00 7e       	andi	r16, 0xE0	; 224
 2ce:	01 49       	sbci	r16, 0x91	; 145
 2d0:	55 73       	andi	r21, 0x35	; 53
 2d2:	00 7c       	andi	r16, 0xC0	; 192
 2d4:	10 10       	cpse	r1, r0
 2d6:	08 1c       	adc	r0, r8

000002d8 <special_char>:
 2d8:	bc 5f 9c 60 a4 61 84 62 b6 63 96 64 b0 65 9f 66     ._.`.a.b.c.d.e.f
 2e8:	b5 67 ff ff                                         .g..

000002ec <init_sequence>:
 2ec:	ae 20 00 b0 c8 00 10 40 81 3f a1 a6 a8 3f a4 d3     . .....@.?...?..
 2fc:	00 d5 f0 d9 22 da 12 db 20 8d 14 00                 ...."... ...

00000308 <__ctors_end>:
 308:	11 24       	eor	r1, r1
 30a:	1f be       	out	0x3f, r1	; 63
 30c:	cf ef       	ldi	r28, 0xFF	; 255
 30e:	d8 e0       	ldi	r29, 0x08	; 8
 310:	de bf       	out	0x3e, r29	; 62
 312:	cd bf       	out	0x3d, r28	; 61

00000314 <__do_copy_data>:
 314:	11 e0       	ldi	r17, 0x01	; 1
 316:	a0 e0       	ldi	r26, 0x00	; 0
 318:	b1 e0       	ldi	r27, 0x01	; 1
 31a:	e2 e6       	ldi	r30, 0x62	; 98
 31c:	fd e0       	ldi	r31, 0x0D	; 13
 31e:	02 c0       	rjmp	.+4      	; 0x324 <__do_copy_data+0x10>
 320:	05 90       	lpm	r0, Z+
 322:	0d 92       	st	X+, r0
 324:	a2 32       	cpi	r26, 0x22	; 34
 326:	b1 07       	cpc	r27, r17
 328:	d9 f7       	brne	.-10     	; 0x320 <__do_copy_data+0xc>

0000032a <__do_clear_bss>:
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	a2 e2       	ldi	r26, 0x22	; 34
 32e:	b1 e0       	ldi	r27, 0x01	; 1
 330:	01 c0       	rjmp	.+2      	; 0x334 <.do_clear_bss_start>

00000332 <.do_clear_bss_loop>:
 332:	1d 92       	st	X+, r1

00000334 <.do_clear_bss_start>:
 334:	a5 32       	cpi	r26, 0x25	; 37
 336:	b2 07       	cpc	r27, r18
 338:	e1 f7       	brne	.-8      	; 0x332 <.do_clear_bss_loop>
 33a:	0e 94 85 06 	call	0xd0a	; 0xd0a <main>
 33e:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <_exit>

00000342 <__bad_interrupt>:
 342:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000346 <i2c_init>:
 
 Input Parameter: none
 
 Return Value: none
 **********************************************/
void i2c_init(void){
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
            break;
        case 64:
            TWSR = 0x3;
            break;
        default:
            TWSR = 0x00;
 34e:	89 eb       	ldi	r24, 0xB9	; 185
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	fc 01       	movw	r30, r24
 354:	10 82       	st	Z, r1
            break;
 356:	00 00       	nop
    }
    TWBR = (uint8_t)SET_TWBR;
 358:	88 eb       	ldi	r24, 0xB8	; 184
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	28 e4       	ldi	r18, 0x48	; 72
 35e:	fc 01       	movw	r30, r24
 360:	20 83       	st	Z, r18
    // enable
    TWCR = (1 << TWEN);
 362:	8c eb       	ldi	r24, 0xBC	; 188
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	24 e0       	ldi	r18, 0x04	; 4
 368:	fc 01       	movw	r30, r24
 36a:	20 83       	st	Z, r18
}
 36c:	00 00       	nop
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <i2c_start>:
 Input Parameter:
 - uint8_t i2c_addr: Adress of reciever
 
 Return Value: none
 **********************************************/
void i2c_start(uint8_t i2c_addr){
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	00 d0       	rcall	.+0      	; 0x37a <i2c_start+0x6>
 37a:	1f 92       	push	r1
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
 380:	8b 83       	std	Y+3, r24	; 0x03
    // i2c start
    TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
 382:	8c eb       	ldi	r24, 0xBC	; 188
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	24 ea       	ldi	r18, 0xA4	; 164
 388:	fc 01       	movw	r30, r24
 38a:	20 83       	st	Z, r18
	uint16_t timeout = F_CPU/F_I2C*2.0;
 38c:	80 e4       	ldi	r24, 0x40	; 64
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	9a 83       	std	Y+2, r25	; 0x02
 392:	89 83       	std	Y+1, r24	; 0x01
    while((TWCR & (1 << TWINT)) == 0 &&
 394:	0f c0       	rjmp	.+30     	; 0x3b4 <i2c_start+0x40>
		timeout !=0){
		timeout--;
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	9a 81       	ldd	r25, Y+2	; 0x02
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	9a 83       	std	Y+2, r25	; 0x02
 39e:	89 83       	std	Y+1, r24	; 0x01
		if(timeout == 0){
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	9a 81       	ldd	r25, Y+2	; 0x02
 3a4:	89 2b       	or	r24, r25
 3a6:	31 f4       	brne	.+12     	; 0x3b4 <i2c_start+0x40>
			I2C_ErrorCode |= (1 << I2C_START);
 3a8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <I2C_ErrorCode>
 3ac:	81 60       	ori	r24, 0x01	; 1
 3ae:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <I2C_ErrorCode>
			return;
 3b2:	32 c0       	rjmp	.+100    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 **********************************************/
void i2c_start(uint8_t i2c_addr){
    // i2c start
    TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
	uint16_t timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
 3b4:	8c eb       	ldi	r24, 0xBC	; 188
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	fc 01       	movw	r30, r24
 3ba:	80 81       	ld	r24, Z
 3bc:	88 23       	and	r24, r24
 3be:	24 f0       	brlt	.+8      	; 0x3c8 <i2c_start+0x54>
 3c0:	89 81       	ldd	r24, Y+1	; 0x01
 3c2:	9a 81       	ldd	r25, Y+2	; 0x02
 3c4:	89 2b       	or	r24, r25
 3c6:	39 f7       	brne	.-50     	; 0x396 <i2c_start+0x22>
			I2C_ErrorCode |= (1 << I2C_START);
			return;
		}
	};
    // send adress
    TWDR = i2c_addr;
 3c8:	8b eb       	ldi	r24, 0xBB	; 187
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	2b 81       	ldd	r18, Y+3	; 0x03
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
    TWCR = (1 << TWINT)|( 1 << TWEN);
 3d2:	8c eb       	ldi	r24, 0xBC	; 188
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	24 e8       	ldi	r18, 0x84	; 132
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18
    timeout = F_CPU/F_I2C*2.0;
 3dc:	80 e4       	ldi	r24, 0x40	; 64
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	9a 83       	std	Y+2, r25	; 0x02
 3e2:	89 83       	std	Y+1, r24	; 0x01
    while((TWCR & (1 << TWINT)) == 0 &&
 3e4:	0f c0       	rjmp	.+30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		  timeout !=0){
		timeout--;
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	9a 83       	std	Y+2, r25	; 0x02
 3ee:	89 83       	std	Y+1, r24	; 0x01
		if(timeout == 0){
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	9a 81       	ldd	r25, Y+2	; 0x02
 3f4:	89 2b       	or	r24, r25
 3f6:	31 f4       	brne	.+12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			I2C_ErrorCode |= (1 << I2C_SENDADRESS);
 3f8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <I2C_ErrorCode>
 3fc:	82 60       	ori	r24, 0x02	; 2
 3fe:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <I2C_ErrorCode>
			return;
 402:	0a c0       	rjmp	.+20     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	};
    // send adress
    TWDR = i2c_addr;
    TWCR = (1 << TWINT)|( 1 << TWEN);
    timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
 404:	8c eb       	ldi	r24, 0xBC	; 188
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	fc 01       	movw	r30, r24
 40a:	80 81       	ld	r24, Z
 40c:	88 23       	and	r24, r24
 40e:	24 f0       	brlt	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	9a 81       	ldd	r25, Y+2	; 0x02
 414:	89 2b       	or	r24, r25
 416:	39 f7       	brne	.-50     	; 0x3e6 <i2c_start+0x72>
		if(timeout == 0){
			I2C_ErrorCode |= (1 << I2C_SENDADRESS);
			return;
		}
	};
}
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <i2c_stop>:
 
 Input Parameter: none
 
 Return Value: none
 **********************************************/
void i2c_stop(void){
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	cd b7       	in	r28, 0x3d	; 61
 42a:	de b7       	in	r29, 0x3e	; 62
    // i2c stop
    TWCR = (1 << TWINT)|(1 << TWSTO)|(1 << TWEN);
 42c:	8c eb       	ldi	r24, 0xBC	; 188
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	24 e9       	ldi	r18, 0x94	; 148
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
}
 436:	00 00       	nop
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <i2c_byte>:
 Input Parameter:
 - uint8_t byte: Byte to send to reciever
 
 Return Value: none
 **********************************************/
void i2c_byte(uint8_t byte){
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	00 d0       	rcall	.+0      	; 0x444 <i2c_byte+0x6>
 444:	1f 92       	push	r1
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	8b 83       	std	Y+3, r24	; 0x03
    TWDR = byte;
 44c:	8b eb       	ldi	r24, 0xBB	; 187
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	2b 81       	ldd	r18, Y+3	; 0x03
 452:	fc 01       	movw	r30, r24
 454:	20 83       	st	Z, r18
    TWCR = (1 << TWINT)|( 1 << TWEN);
 456:	8c eb       	ldi	r24, 0xBC	; 188
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	24 e8       	ldi	r18, 0x84	; 132
 45c:	fc 01       	movw	r30, r24
 45e:	20 83       	st	Z, r18
    uint16_t timeout = F_CPU/F_I2C*2.0;
 460:	80 e4       	ldi	r24, 0x40	; 64
 462:	91 e0       	ldi	r25, 0x01	; 1
 464:	9a 83       	std	Y+2, r25	; 0x02
 466:	89 83       	std	Y+1, r24	; 0x01
    while((TWCR & (1 << TWINT)) == 0 &&
 468:	0f c0       	rjmp	.+30     	; 0x488 <i2c_byte+0x4a>
		  timeout !=0){
		timeout--;
 46a:	89 81       	ldd	r24, Y+1	; 0x01
 46c:	9a 81       	ldd	r25, Y+2	; 0x02
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	9a 83       	std	Y+2, r25	; 0x02
 472:	89 83       	std	Y+1, r24	; 0x01
		if(timeout == 0){
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	9a 81       	ldd	r25, Y+2	; 0x02
 478:	89 2b       	or	r24, r25
 47a:	31 f4       	brne	.+12     	; 0x488 <i2c_byte+0x4a>
			I2C_ErrorCode |= (1 << I2C_BYTE);
 47c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <I2C_ErrorCode>
 480:	84 60       	ori	r24, 0x04	; 4
 482:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <I2C_ErrorCode>
			return;
 486:	0a c0       	rjmp	.+20     	; 0x49c <i2c_byte+0x5e>
 **********************************************/
void i2c_byte(uint8_t byte){
    TWDR = byte;
    TWCR = (1 << TWINT)|( 1 << TWEN);
    uint16_t timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
 488:	8c eb       	ldi	r24, 0xBC	; 188
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	fc 01       	movw	r30, r24
 48e:	80 81       	ld	r24, Z
 490:	88 23       	and	r24, r24
 492:	24 f0       	brlt	.+8      	; 0x49c <i2c_byte+0x5e>
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	9a 81       	ldd	r25, Y+2	; 0x02
 498:	89 2b       	or	r24, r25
 49a:	39 f7       	brne	.-50     	; 0x46a <i2c_byte+0x2c>
		if(timeout == 0){
			I2C_ErrorCode |= (1 << I2C_BYTE);
			return;
		}
	};
}
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <lcd_command>:
        commandSequence[0] = 0xAF;
    } else {
        commandSequence[0] = 0xAE;
    }
    lcd_command(commandSequence, 1);
}
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	00 d0       	rcall	.+0      	; 0x4ae <lcd_command+0x6>
 4ae:	00 d0       	rcall	.+0      	; 0x4b0 <lcd_command+0x8>
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
 4b4:	9b 83       	std	Y+3, r25	; 0x03
 4b6:	8a 83       	std	Y+2, r24	; 0x02
 4b8:	6c 83       	std	Y+4, r22	; 0x04
 4ba:	8a e7       	ldi	r24, 0x7A	; 122
 4bc:	0e 94 ba 01 	call	0x374	; 0x374 <i2c_start>
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	0e 94 1f 02 	call	0x43e	; 0x43e <i2c_byte>
 4c6:	19 82       	std	Y+1, r1	; 0x01
 4c8:	0e c0       	rjmp	.+28     	; 0x4e6 <lcd_command+0x3e>
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	88 2f       	mov	r24, r24
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	2a 81       	ldd	r18, Y+2	; 0x02
 4d2:	3b 81       	ldd	r19, Y+3	; 0x03
 4d4:	82 0f       	add	r24, r18
 4d6:	93 1f       	adc	r25, r19
 4d8:	fc 01       	movw	r30, r24
 4da:	80 81       	ld	r24, Z
 4dc:	0e 94 1f 02 	call	0x43e	; 0x43e <i2c_byte>
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	8f 5f       	subi	r24, 0xFF	; 255
 4e4:	89 83       	std	Y+1, r24	; 0x01
 4e6:	99 81       	ldd	r25, Y+1	; 0x01
 4e8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ea:	98 17       	cp	r25, r24
 4ec:	70 f3       	brcs	.-36     	; 0x4ca <lcd_command+0x22>
 4ee:	0e 94 12 02 	call	0x424	; 0x424 <i2c_stop>
 4f2:	00 00       	nop
 4f4:	0f 90       	pop	r0
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <lcd_data>:
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	00 d0       	rcall	.+0      	; 0x508 <lcd_data+0x6>
 508:	00 d0       	rcall	.+0      	; 0x50a <lcd_data+0x8>
 50a:	00 d0       	rcall	.+0      	; 0x50c <lcd_data+0xa>
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	9c 83       	std	Y+4, r25	; 0x04
 512:	8b 83       	std	Y+3, r24	; 0x03
 514:	7e 83       	std	Y+6, r23	; 0x06
 516:	6d 83       	std	Y+5, r22	; 0x05
 518:	8a e7       	ldi	r24, 0x7A	; 122
 51a:	0e 94 ba 01 	call	0x374	; 0x374 <i2c_start>
 51e:	80 e4       	ldi	r24, 0x40	; 64
 520:	0e 94 1f 02 	call	0x43e	; 0x43e <i2c_byte>
 524:	1a 82       	std	Y+2, r1	; 0x02
 526:	19 82       	std	Y+1, r1	; 0x01
 528:	0f c0       	rjmp	.+30     	; 0x548 <lcd_data+0x46>
 52a:	2b 81       	ldd	r18, Y+3	; 0x03
 52c:	3c 81       	ldd	r19, Y+4	; 0x04
 52e:	89 81       	ldd	r24, Y+1	; 0x01
 530:	9a 81       	ldd	r25, Y+2	; 0x02
 532:	82 0f       	add	r24, r18
 534:	93 1f       	adc	r25, r19
 536:	fc 01       	movw	r30, r24
 538:	80 81       	ld	r24, Z
 53a:	0e 94 1f 02 	call	0x43e	; 0x43e <i2c_byte>
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	9a 81       	ldd	r25, Y+2	; 0x02
 542:	01 96       	adiw	r24, 0x01	; 1
 544:	9a 83       	std	Y+2, r25	; 0x02
 546:	89 83       	std	Y+1, r24	; 0x01
 548:	29 81       	ldd	r18, Y+1	; 0x01
 54a:	3a 81       	ldd	r19, Y+2	; 0x02
 54c:	8d 81       	ldd	r24, Y+5	; 0x05
 54e:	9e 81       	ldd	r25, Y+6	; 0x06
 550:	28 17       	cp	r18, r24
 552:	39 07       	cpc	r19, r25
 554:	50 f3       	brcs	.-44     	; 0x52a <lcd_data+0x28>
 556:	0e 94 12 02 	call	0x424	; 0x424 <i2c_stop>
 55a:	00 00       	nop
 55c:	26 96       	adiw	r28, 0x06	; 6
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	f8 94       	cli
 562:	de bf       	out	0x3e, r29	; 62
 564:	0f be       	out	0x3f, r0	; 63
 566:	cd bf       	out	0x3d, r28	; 61
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <lcd_init>:
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	a1 97       	sbiw	r28, 0x21	; 33
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	de bf       	out	0x3e, r29	; 62
 57e:	0f be       	out	0x3f, r0	; 63
 580:	cd bf       	out	0x3d, r28	; 61
 582:	89 a3       	std	Y+33, r24	; 0x21
 584:	0e 94 a3 01 	call	0x346	; 0x346 <i2c_init>
 588:	19 82       	std	Y+1, r1	; 0x01
 58a:	1a c0       	rjmp	.+52     	; 0x5c0 <lcd_init+0x52>
 58c:	89 81       	ldd	r24, Y+1	; 0x01
 58e:	88 2f       	mov	r24, r24
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	29 81       	ldd	r18, Y+1	; 0x01
 594:	22 2f       	mov	r18, r18
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	24 51       	subi	r18, 0x14	; 20
 59a:	3d 4f       	sbci	r19, 0xFD	; 253
 59c:	3b 83       	std	Y+3, r19	; 0x03
 59e:	2a 83       	std	Y+2, r18	; 0x02
 5a0:	2a 81       	ldd	r18, Y+2	; 0x02
 5a2:	3b 81       	ldd	r19, Y+3	; 0x03
 5a4:	f9 01       	movw	r30, r18
 5a6:	24 91       	lpm	r18, Z
 5a8:	2c 83       	std	Y+4, r18	; 0x04
 5aa:	4c 81       	ldd	r20, Y+4	; 0x04
 5ac:	9e 01       	movw	r18, r28
 5ae:	2b 5f       	subi	r18, 0xFB	; 251
 5b0:	3f 4f       	sbci	r19, 0xFF	; 255
 5b2:	82 0f       	add	r24, r18
 5b4:	93 1f       	adc	r25, r19
 5b6:	fc 01       	movw	r30, r24
 5b8:	40 83       	st	Z, r20
 5ba:	89 81       	ldd	r24, Y+1	; 0x01
 5bc:	8f 5f       	subi	r24, 0xFF	; 255
 5be:	89 83       	std	Y+1, r24	; 0x01
 5c0:	89 81       	ldd	r24, Y+1	; 0x01
 5c2:	8b 31       	cpi	r24, 0x1B	; 27
 5c4:	18 f3       	brcs	.-58     	; 0x58c <lcd_init+0x1e>
 5c6:	89 a1       	ldd	r24, Y+33	; 0x21
 5c8:	88 a3       	std	Y+32, r24	; 0x20
 5ca:	ce 01       	movw	r24, r28
 5cc:	05 96       	adiw	r24, 0x05	; 5
 5ce:	6c e1       	ldi	r22, 0x1C	; 28
 5d0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_command>
 5d4:	0e 94 3f 03 	call	0x67e	; 0x67e <lcd_clrscr>
 5d8:	00 00       	nop
 5da:	a1 96       	adiw	r28, 0x21	; 33
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	f8 94       	cli
 5e0:	de bf       	out	0x3e, r29	; 62
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	cd bf       	out	0x3d, r28	; 61
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <lcd_gotoxy>:
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62
 5f4:	27 97       	sbiw	r28, 0x07	; 7
 5f6:	0f b6       	in	r0, 0x3f	; 63
 5f8:	f8 94       	cli
 5fa:	de bf       	out	0x3e, r29	; 62
 5fc:	0f be       	out	0x3f, r0	; 63
 5fe:	cd bf       	out	0x3d, r28	; 61
 600:	8e 83       	std	Y+6, r24	; 0x06
 602:	6f 83       	std	Y+7, r22	; 0x07
 604:	8e 81       	ldd	r24, Y+6	; 0x06
 606:	86 31       	cpi	r24, 0x16	; 22
 608:	80 f5       	brcc	.+96     	; 0x66a <lcd_gotoxy+0x7e>
 60a:	8f 81       	ldd	r24, Y+7	; 0x07
 60c:	88 30       	cpi	r24, 0x08	; 8
 60e:	68 f5       	brcc	.+90     	; 0x66a <lcd_gotoxy+0x7e>
 610:	9e 81       	ldd	r25, Y+6	; 0x06
 612:	89 2f       	mov	r24, r25
 614:	88 0f       	add	r24, r24
 616:	89 0f       	add	r24, r25
 618:	88 0f       	add	r24, r24
 61a:	8e 83       	std	Y+6, r24	; 0x06
 61c:	8e 81       	ldd	r24, Y+6	; 0x06
 61e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
 622:	8f 81       	ldd	r24, Y+7	; 0x07
 624:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <__data_end+0x1>
 628:	8f 81       	ldd	r24, Y+7	; 0x07
 62a:	80 55       	subi	r24, 0x50	; 80
 62c:	89 83       	std	Y+1, r24	; 0x01
 62e:	81 e2       	ldi	r24, 0x21	; 33
 630:	8a 83       	std	Y+2, r24	; 0x02
 632:	8e 81       	ldd	r24, Y+6	; 0x06
 634:	8e 5f       	subi	r24, 0xFE	; 254
 636:	8f 70       	andi	r24, 0x0F	; 15
 638:	8b 83       	std	Y+3, r24	; 0x03
 63a:	8e 81       	ldd	r24, Y+6	; 0x06
 63c:	88 2f       	mov	r24, r24
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 96       	adiw	r24, 0x02	; 2
 642:	80 7f       	andi	r24, 0xF0	; 240
 644:	99 27       	eor	r25, r25
 646:	95 95       	asr	r25
 648:	87 95       	ror	r24
 64a:	95 95       	asr	r25
 64c:	87 95       	ror	r24
 64e:	95 95       	asr	r25
 650:	87 95       	ror	r24
 652:	95 95       	asr	r25
 654:	87 95       	ror	r24
 656:	80 5f       	subi	r24, 0xF0	; 240
 658:	8c 83       	std	Y+4, r24	; 0x04
 65a:	8f e7       	ldi	r24, 0x7F	; 127
 65c:	8d 83       	std	Y+5, r24	; 0x05
 65e:	65 e0       	ldi	r22, 0x05	; 5
 660:	ce 01       	movw	r24, r28
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_command>
 668:	01 c0       	rjmp	.+2      	; 0x66c <lcd_gotoxy+0x80>
 66a:	00 00       	nop
 66c:	27 96       	adiw	r28, 0x07	; 7
 66e:	0f b6       	in	r0, 0x3f	; 63
 670:	f8 94       	cli
 672:	de bf       	out	0x3e, r29	; 62
 674:	0f be       	out	0x3f, r0	; 63
 676:	cd bf       	out	0x3d, r28	; 61
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

0000067e <lcd_clrscr>:
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	cd b7       	in	r28, 0x3d	; 61
 684:	de b7       	in	r29, 0x3e	; 62
 686:	c1 58       	subi	r28, 0x81	; 129
 688:	d1 09       	sbc	r29, r1
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	f8 94       	cli
 68e:	de bf       	out	0x3e, r29	; 62
 690:	0f be       	out	0x3f, r0	; 63
 692:	cd bf       	out	0x3d, r28	; 61
 694:	ce 01       	movw	r24, r28
 696:	02 96       	adiw	r24, 0x02	; 2
 698:	40 e8       	ldi	r20, 0x80	; 128
 69a:	50 e0       	ldi	r21, 0x00	; 0
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	0e 94 a8 06 	call	0xd50	; 0xd50 <memset>
 6a4:	19 82       	std	Y+1, r1	; 0x01
 6a6:	0d c0       	rjmp	.+26     	; 0x6c2 <lcd_clrscr+0x44>
 6a8:	69 81       	ldd	r22, Y+1	; 0x01
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	0e 94 f6 02 	call	0x5ec	; 0x5ec <lcd_gotoxy>
 6b0:	ce 01       	movw	r24, r28
 6b2:	02 96       	adiw	r24, 0x02	; 2
 6b4:	60 e8       	ldi	r22, 0x80	; 128
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	0e 94 81 02 	call	0x502	; 0x502 <lcd_data>
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
 6be:	8f 5f       	subi	r24, 0xFF	; 255
 6c0:	89 83       	std	Y+1, r24	; 0x01
 6c2:	89 81       	ldd	r24, Y+1	; 0x01
 6c4:	88 30       	cpi	r24, 0x08	; 8
 6c6:	80 f3       	brcs	.-32     	; 0x6a8 <lcd_clrscr+0x2a>
 6c8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <lcd_home>
 6cc:	00 00       	nop
 6ce:	cf 57       	subi	r28, 0x7F	; 127
 6d0:	df 4f       	sbci	r29, 0xFF	; 255
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	f8 94       	cli
 6d6:	de bf       	out	0x3e, r29	; 62
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	cd bf       	out	0x3d, r28	; 61
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret

000006e2 <lcd_home>:
 6e2:	cf 93       	push	r28
 6e4:	df 93       	push	r29
 6e6:	cd b7       	in	r28, 0x3d	; 61
 6e8:	de b7       	in	r29, 0x3e	; 62
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	0e 94 f6 02 	call	0x5ec	; 0x5ec <lcd_gotoxy>
 6f2:	00 00       	nop
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	08 95       	ret

000006fa <lcd_set_contrast>:
void lcd_set_contrast(uint8_t contrast){
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	00 d0       	rcall	.+0      	; 0x700 <lcd_set_contrast+0x6>
 700:	1f 92       	push	r1
 702:	cd b7       	in	r28, 0x3d	; 61
 704:	de b7       	in	r29, 0x3e	; 62
 706:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t commandSequence[2] = {0x81, contrast};
 708:	81 e8       	ldi	r24, 0x81	; 129
 70a:	89 83       	std	Y+1, r24	; 0x01
 70c:	8b 81       	ldd	r24, Y+3	; 0x03
 70e:	8a 83       	std	Y+2, r24	; 0x02
    lcd_command(commandSequence, sizeof(commandSequence));
 710:	62 e0       	ldi	r22, 0x02	; 2
 712:	ce 01       	movw	r24, r28
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_command>
}
 71a:	00 00       	nop
 71c:	0f 90       	pop	r0
 71e:	0f 90       	pop	r0
 720:	0f 90       	pop	r0
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <lcd_putc>:
void lcd_putc(char c){
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	cd b7       	in	r28, 0x3d	; 61
 72e:	de b7       	in	r29, 0x3e	; 62
 730:	ee 97       	sbiw	r28, 0x3e	; 62
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	f8 94       	cli
 736:	de bf       	out	0x3e, r29	; 62
 738:	0f be       	out	0x3f, r0	; 63
 73a:	cd bf       	out	0x3d, r28	; 61
 73c:	8e af       	std	Y+62, r24	; 0x3e
    switch (c) {
 73e:	8e ad       	ldd	r24, Y+62	; 0x3e
 740:	88 2f       	mov	r24, r24
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	89 30       	cpi	r24, 0x09	; 9
 746:	91 05       	cpc	r25, r1
 748:	51 f1       	breq	.+84     	; 0x79e <lcd_putc+0x76>
 74a:	8a 30       	cpi	r24, 0x0A	; 10
 74c:	91 05       	cpc	r25, r1
 74e:	1c f4       	brge	.+6      	; 0x756 <lcd_putc+0x2e>
 750:	08 97       	sbiw	r24, 0x08	; 8
 752:	49 f0       	breq	.+18     	; 0x766 <lcd_putc+0x3e>
 754:	6e c0       	rjmp	.+220    	; 0x832 <lcd_putc+0x10a>
 756:	8a 30       	cpi	r24, 0x0A	; 10
 758:	91 05       	cpc	r25, r1
 75a:	09 f4       	brne	.+2      	; 0x75e <lcd_putc+0x36>
 75c:	53 c0       	rjmp	.+166    	; 0x804 <lcd_putc+0xdc>
 75e:	0d 97       	sbiw	r24, 0x0d	; 13
 760:	09 f4       	brne	.+2      	; 0x764 <lcd_putc+0x3c>
 762:	60 c0       	rjmp	.+192    	; 0x824 <lcd_putc+0xfc>
 764:	66 c0       	rjmp	.+204    	; 0x832 <lcd_putc+0x10a>
        case '\b':
            // backspace
            lcd_gotoxy(cursorPosition.x-charMode, cursorPosition.y);
 766:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <__data_end+0x1>
 76a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <__data_end>
 76e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 772:	39 2f       	mov	r19, r25
 774:	38 1b       	sub	r19, r24
 776:	83 2f       	mov	r24, r19
 778:	62 2f       	mov	r22, r18
 77a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <lcd_gotoxy>
            lcd_putc(' ');
 77e:	80 e2       	ldi	r24, 0x20	; 32
 780:	0e 94 94 03 	call	0x728	; 0x728 <lcd_putc>
            lcd_gotoxy(cursorPosition.x-charMode, cursorPosition.y);
 784:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <__data_end+0x1>
 788:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <__data_end>
 78c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 790:	e9 2f       	mov	r30, r25
 792:	e8 1b       	sub	r30, r24
 794:	8e 2f       	mov	r24, r30
 796:	62 2f       	mov	r22, r18
 798:	0e 94 f6 02 	call	0x5ec	; 0x5ec <lcd_gotoxy>
            break;
 79c:	7f c2       	rjmp	.+1278   	; 0xc9c <__stack+0x39d>
        case '\t':
            // tab
            if( (cursorPosition.x+charMode*4) < (DISPLAY_WIDTH/ sizeof(FONT[0])-charMode*4) ){
 79e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 7a2:	28 2f       	mov	r18, r24
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7aa:	88 2f       	mov	r24, r24
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	88 0f       	add	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	88 0f       	add	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	82 0f       	add	r24, r18
 7b8:	93 1f       	adc	r25, r19
 7ba:	9c 01       	movw	r18, r24
 7bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7c0:	88 2f       	mov	r24, r24
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	88 0f       	add	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	ac 01       	movw	r20, r24
 7ce:	85 e1       	ldi	r24, 0x15	; 21
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	84 1b       	sub	r24, r20
 7d4:	95 0b       	sbc	r25, r21
 7d6:	28 17       	cp	r18, r24
 7d8:	39 07       	cpc	r19, r25
 7da:	68 f4       	brcc	.+26     	; 0x7f6 <lcd_putc+0xce>
                lcd_gotoxy(cursorPosition.x+charMode*4, cursorPosition.y);
 7dc:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <__data_end+0x1>
 7e0:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <__data_end>
 7e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7e8:	88 0f       	add	r24, r24
 7ea:	88 0f       	add	r24, r24
 7ec:	89 0f       	add	r24, r25
 7ee:	62 2f       	mov	r22, r18
 7f0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <lcd_gotoxy>
            }else{
                lcd_gotoxy(DISPLAY_WIDTH/ sizeof(FONT[0]), cursorPosition.y);
            }
            break;
 7f4:	53 c2       	rjmp	.+1190   	; 0xc9c <__stack+0x39d>
        case '\t':
            // tab
            if( (cursorPosition.x+charMode*4) < (DISPLAY_WIDTH/ sizeof(FONT[0])-charMode*4) ){
                lcd_gotoxy(cursorPosition.x+charMode*4, cursorPosition.y);
            }else{
                lcd_gotoxy(DISPLAY_WIDTH/ sizeof(FONT[0]), cursorPosition.y);
 7f6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__data_end+0x1>
 7fa:	68 2f       	mov	r22, r24
 7fc:	85 e1       	ldi	r24, 0x15	; 21
 7fe:	0e 94 f6 02 	call	0x5ec	; 0x5ec <lcd_gotoxy>
            }
            break;
 802:	4c c2       	rjmp	.+1176   	; 0xc9c <__stack+0x39d>
        case '\n':
            // linefeed
            if(cursorPosition.y < (DISPLAY_HEIGHT/8-1)){
 804:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__data_end+0x1>
 808:	87 30       	cpi	r24, 0x07	; 7
 80a:	08 f0       	brcs	.+2      	; 0x80e <lcd_putc+0xe6>
 80c:	44 c2       	rjmp	.+1160   	; 0xc96 <__stack+0x397>
                lcd_gotoxy(cursorPosition.x, cursorPosition.y+charMode);
 80e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
 812:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 816:	98 0f       	add	r25, r24
 818:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 81c:	69 2f       	mov	r22, r25
 81e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <lcd_gotoxy>
            }
            break;
 822:	39 c2       	rjmp	.+1138   	; 0xc96 <__stack+0x397>
        case '\r':
            // carrige return
            lcd_gotoxy(0, cursorPosition.y);
 824:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__data_end+0x1>
 828:	68 2f       	mov	r22, r24
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <lcd_gotoxy>
            break;
 830:	35 c2       	rjmp	.+1130   	; 0xc9c <__stack+0x39d>
        default:
            // char doesn't fit in line
            if( (cursorPosition.x >= DISPLAY_WIDTH-sizeof(FONT[0])) || (c < ' ') ) break;
 832:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 836:	8a 37       	cpi	r24, 0x7A	; 122
 838:	08 f0       	brcs	.+2      	; 0x83c <lcd_putc+0x114>
 83a:	30 c2       	rjmp	.+1120   	; 0xc9c <__stack+0x39d>
 83c:	8e ad       	ldd	r24, Y+62	; 0x3e
 83e:	80 32       	cpi	r24, 0x20	; 32
 840:	08 f4       	brcc	.+2      	; 0x844 <lcd_putc+0x11c>
 842:	2c c2       	rjmp	.+1112   	; 0xc9c <__stack+0x39d>
            // mapping char
            c -= ' ';
 844:	8e ad       	ldd	r24, Y+62	; 0x3e
 846:	80 52       	subi	r24, 0x20	; 32
 848:	8e af       	std	Y+62, r24	; 0x3e
            if (c >= pgm_read_byte(&special_char[0][1]) ) {
 84a:	89 ed       	ldi	r24, 0xD9	; 217
 84c:	92 e0       	ldi	r25, 0x02	; 2
 84e:	98 87       	std	Y+8, r25	; 0x08
 850:	8f 83       	std	Y+7, r24	; 0x07
 852:	8f 81       	ldd	r24, Y+7	; 0x07
 854:	98 85       	ldd	r25, Y+8	; 0x08
 856:	fc 01       	movw	r30, r24
 858:	84 91       	lpm	r24, Z
 85a:	89 87       	std	Y+9, r24	; 0x09
 85c:	99 85       	ldd	r25, Y+9	; 0x09
 85e:	8e ad       	ldd	r24, Y+62	; 0x3e
 860:	89 17       	cp	r24, r25
 862:	08 f4       	brcc	.+2      	; 0x866 <lcd_putc+0x13e>
 864:	4c c0       	rjmp	.+152    	; 0x8fe <lcd_putc+0x1d6>
                char temp = c;
 866:	8e ad       	ldd	r24, Y+62	; 0x3e
 868:	8a 87       	std	Y+10, r24	; 0x0a
                c = 0xff;
 86a:	8f ef       	ldi	r24, 0xFF	; 255
 86c:	8e af       	std	Y+62, r24	; 0x3e
                for (uint8_t i=0; pgm_read_byte(&special_char[i][1]) != 0xff; i++) {
 86e:	19 82       	std	Y+1, r1	; 0x01
 870:	2f c0       	rjmp	.+94     	; 0x8d0 <lcd_putc+0x1a8>
                    if ( pgm_read_byte(&special_char[i][0])-' ' == temp ) {
 872:	89 81       	ldd	r24, Y+1	; 0x01
 874:	88 2f       	mov	r24, r24
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	88 52       	subi	r24, 0x28	; 40
 87e:	9d 4f       	sbci	r25, 0xFD	; 253
 880:	9f 87       	std	Y+15, r25	; 0x0f
 882:	8e 87       	std	Y+14, r24	; 0x0e
 884:	8e 85       	ldd	r24, Y+14	; 0x0e
 886:	9f 85       	ldd	r25, Y+15	; 0x0f
 888:	fc 01       	movw	r30, r24
 88a:	84 91       	lpm	r24, Z
 88c:	88 8b       	std	Y+16, r24	; 0x10
 88e:	88 89       	ldd	r24, Y+16	; 0x10
 890:	88 2f       	mov	r24, r24
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	9c 01       	movw	r18, r24
 896:	20 52       	subi	r18, 0x20	; 32
 898:	31 09       	sbc	r19, r1
 89a:	8a 85       	ldd	r24, Y+10	; 0x0a
 89c:	88 2f       	mov	r24, r24
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	28 17       	cp	r18, r24
 8a2:	39 07       	cpc	r19, r25
 8a4:	91 f4       	brne	.+36     	; 0x8ca <lcd_putc+0x1a2>
                        c = pgm_read_byte(&special_char[i][1]);
 8a6:	89 81       	ldd	r24, Y+1	; 0x01
 8a8:	88 2f       	mov	r24, r24
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	88 0f       	add	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	01 96       	adiw	r24, 0x01	; 1
 8b2:	88 52       	subi	r24, 0x28	; 40
 8b4:	9d 4f       	sbci	r25, 0xFD	; 253
 8b6:	9a 8b       	std	Y+18, r25	; 0x12
 8b8:	89 8b       	std	Y+17, r24	; 0x11
 8ba:	89 89       	ldd	r24, Y+17	; 0x11
 8bc:	9a 89       	ldd	r25, Y+18	; 0x12
 8be:	fc 01       	movw	r30, r24
 8c0:	84 91       	lpm	r24, Z
 8c2:	8b 8b       	std	Y+19, r24	; 0x13
 8c4:	8b 89       	ldd	r24, Y+19	; 0x13
 8c6:	8e af       	std	Y+62, r24	; 0x3e
                        break;
 8c8:	16 c0       	rjmp	.+44     	; 0x8f6 <lcd_putc+0x1ce>
            // mapping char
            c -= ' ';
            if (c >= pgm_read_byte(&special_char[0][1]) ) {
                char temp = c;
                c = 0xff;
                for (uint8_t i=0; pgm_read_byte(&special_char[i][1]) != 0xff; i++) {
 8ca:	89 81       	ldd	r24, Y+1	; 0x01
 8cc:	8f 5f       	subi	r24, 0xFF	; 255
 8ce:	89 83       	std	Y+1, r24	; 0x01
 8d0:	89 81       	ldd	r24, Y+1	; 0x01
 8d2:	88 2f       	mov	r24, r24
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	88 0f       	add	r24, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	01 96       	adiw	r24, 0x01	; 1
 8dc:	88 52       	subi	r24, 0x28	; 40
 8de:	9d 4f       	sbci	r25, 0xFD	; 253
 8e0:	9c 87       	std	Y+12, r25	; 0x0c
 8e2:	8b 87       	std	Y+11, r24	; 0x0b
 8e4:	8b 85       	ldd	r24, Y+11	; 0x0b
 8e6:	9c 85       	ldd	r25, Y+12	; 0x0c
 8e8:	fc 01       	movw	r30, r24
 8ea:	84 91       	lpm	r24, Z
 8ec:	8d 87       	std	Y+13, r24	; 0x0d
 8ee:	8d 85       	ldd	r24, Y+13	; 0x0d
 8f0:	8f 3f       	cpi	r24, 0xFF	; 255
 8f2:	09 f0       	breq	.+2      	; 0x8f6 <lcd_putc+0x1ce>
 8f4:	be cf       	rjmp	.-132    	; 0x872 <lcd_putc+0x14a>
                    if ( pgm_read_byte(&special_char[i][0])-' ' == temp ) {
                        c = pgm_read_byte(&special_char[i][1]);
                        break;
                    }
                }
                if ( c == 0xff ) break;
 8f6:	8e ad       	ldd	r24, Y+62	; 0x3e
 8f8:	8f 3f       	cpi	r24, 0xFF	; 255
 8fa:	09 f4       	brne	.+2      	; 0x8fe <lcd_putc+0x1d6>
 8fc:	ce c1       	rjmp	.+924    	; 0xc9a <__stack+0x39b>
                    displayBuffer[cursorPosition.y][cursorPosition.x+i] =pgm_read_byte(&(FONT[(uint8_t)c][i]));
                }
                cursorPosition.x += sizeof(FONT[0]);
            }
#elif defined TEXTMODE
            if (charMode == DOUBLESIZE) {
 8fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 902:	82 30       	cpi	r24, 0x02	; 2
 904:	09 f0       	breq	.+2      	; 0x908 <__stack+0x9>
 906:	87 c1       	rjmp	.+782    	; 0xc16 <__stack+0x317>
                uint16_t doubleChar[sizeof(FONT[0])];
                uint8_t dChar;
                if ((cursorPosition.x+2*sizeof(FONT[0]))>DISPLAY_WIDTH) break;
 908:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 90c:	88 2f       	mov	r24, r24
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0c 96       	adiw	r24, 0x0c	; 12
 912:	81 38       	cpi	r24, 0x81	; 129
 914:	91 05       	cpc	r25, r1
 916:	10 f0       	brcs	.+4      	; 0x91c <__stack+0x1d>
 918:	00 00       	nop
            }
#endif
            break;
    }
    
}
 91a:	c0 c1       	rjmp	.+896    	; 0xc9c <__stack+0x39d>
            if (charMode == DOUBLESIZE) {
                uint16_t doubleChar[sizeof(FONT[0])];
                uint8_t dChar;
                if ((cursorPosition.x+2*sizeof(FONT[0]))>DISPLAY_WIDTH) break;
                
                for (uint8_t i=0; i < sizeof(FONT[0]); i++) {
 91c:	1a 82       	std	Y+2, r1	; 0x02
 91e:	9e c0       	rjmp	.+316    	; 0xa5c <__stack+0x15d>
                    doubleChar[i] = 0;
 920:	8a 81       	ldd	r24, Y+2	; 0x02
 922:	88 2f       	mov	r24, r24
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	88 0f       	add	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	9e 01       	movw	r18, r28
 92c:	2f 5f       	subi	r18, 0xFF	; 255
 92e:	3f 4f       	sbci	r19, 0xFF	; 255
 930:	82 0f       	add	r24, r18
 932:	93 1f       	adc	r25, r19
 934:	4a 96       	adiw	r24, 0x1a	; 26
 936:	fc 01       	movw	r30, r24
 938:	11 82       	std	Z+1, r1	; 0x01
 93a:	10 82       	st	Z, r1
                    dChar = pgm_read_byte(&(FONT[(uint8_t)c][i]));
 93c:	8e ad       	ldd	r24, Y+62	; 0x3e
 93e:	28 2f       	mov	r18, r24
 940:	30 e0       	ldi	r19, 0x00	; 0
 942:	8a 81       	ldd	r24, Y+2	; 0x02
 944:	48 2f       	mov	r20, r24
 946:	50 e0       	ldi	r21, 0x00	; 0
 948:	c9 01       	movw	r24, r18
 94a:	88 0f       	add	r24, r24
 94c:	99 1f       	adc	r25, r25
 94e:	82 0f       	add	r24, r18
 950:	93 1f       	adc	r25, r19
 952:	88 0f       	add	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	84 0f       	add	r24, r20
 958:	95 1f       	adc	r25, r21
 95a:	88 59       	subi	r24, 0x98	; 152
 95c:	9f 4f       	sbci	r25, 0xFF	; 255
 95e:	9d 8b       	std	Y+21, r25	; 0x15
 960:	8c 8b       	std	Y+20, r24	; 0x14
 962:	8c 89       	ldd	r24, Y+20	; 0x14
 964:	9d 89       	ldd	r25, Y+21	; 0x15
 966:	fc 01       	movw	r30, r24
 968:	84 91       	lpm	r24, Z
 96a:	8e 8b       	std	Y+22, r24	; 0x16
 96c:	8e 89       	ldd	r24, Y+22	; 0x16
 96e:	8f 8b       	std	Y+23, r24	; 0x17
                    for (uint8_t j=0; j<8; j++) {
 970:	1b 82       	std	Y+3, r1	; 0x03
 972:	6d c0       	rjmp	.+218    	; 0xa4e <__stack+0x14f>
                        if ((dChar & (1 << j))) {
 974:	8f 89       	ldd	r24, Y+23	; 0x17
 976:	88 2f       	mov	r24, r24
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	2b 81       	ldd	r18, Y+3	; 0x03
 97c:	22 2f       	mov	r18, r18
 97e:	30 e0       	ldi	r19, 0x00	; 0
 980:	02 c0       	rjmp	.+4      	; 0x986 <__stack+0x87>
 982:	95 95       	asr	r25
 984:	87 95       	ror	r24
 986:	2a 95       	dec	r18
 988:	e2 f7       	brpl	.-8      	; 0x982 <__stack+0x83>
 98a:	81 70       	andi	r24, 0x01	; 1
 98c:	99 27       	eor	r25, r25
 98e:	89 2b       	or	r24, r25
 990:	09 f4       	brne	.+2      	; 0x994 <__stack+0x95>
 992:	5a c0       	rjmp	.+180    	; 0xa48 <__stack+0x149>
                            doubleChar[i] |= (1 << (j*2));
 994:	8a 81       	ldd	r24, Y+2	; 0x02
 996:	88 2f       	mov	r24, r24
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	2a 81       	ldd	r18, Y+2	; 0x02
 99c:	22 2f       	mov	r18, r18
 99e:	30 e0       	ldi	r19, 0x00	; 0
 9a0:	22 0f       	add	r18, r18
 9a2:	33 1f       	adc	r19, r19
 9a4:	ae 01       	movw	r20, r28
 9a6:	4f 5f       	subi	r20, 0xFF	; 255
 9a8:	5f 4f       	sbci	r21, 0xFF	; 255
 9aa:	24 0f       	add	r18, r20
 9ac:	35 1f       	adc	r19, r21
 9ae:	26 5e       	subi	r18, 0xE6	; 230
 9b0:	3f 4f       	sbci	r19, 0xFF	; 255
 9b2:	f9 01       	movw	r30, r18
 9b4:	20 81       	ld	r18, Z
 9b6:	31 81       	ldd	r19, Z+1	; 0x01
 9b8:	4b 81       	ldd	r20, Y+3	; 0x03
 9ba:	44 2f       	mov	r20, r20
 9bc:	50 e0       	ldi	r21, 0x00	; 0
 9be:	ba 01       	movw	r22, r20
 9c0:	66 0f       	add	r22, r22
 9c2:	77 1f       	adc	r23, r23
 9c4:	41 e0       	ldi	r20, 0x01	; 1
 9c6:	50 e0       	ldi	r21, 0x00	; 0
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <__stack+0xcf>
 9ca:	44 0f       	add	r20, r20
 9cc:	55 1f       	adc	r21, r21
 9ce:	6a 95       	dec	r22
 9d0:	e2 f7       	brpl	.-8      	; 0x9ca <__stack+0xcb>
 9d2:	24 2b       	or	r18, r20
 9d4:	35 2b       	or	r19, r21
 9d6:	88 0f       	add	r24, r24
 9d8:	99 1f       	adc	r25, r25
 9da:	ae 01       	movw	r20, r28
 9dc:	4f 5f       	subi	r20, 0xFF	; 255
 9de:	5f 4f       	sbci	r21, 0xFF	; 255
 9e0:	84 0f       	add	r24, r20
 9e2:	95 1f       	adc	r25, r21
 9e4:	4a 96       	adiw	r24, 0x1a	; 26
 9e6:	fc 01       	movw	r30, r24
 9e8:	31 83       	std	Z+1, r19	; 0x01
 9ea:	20 83       	st	Z, r18
                            doubleChar[i] |= (1 << ((j*2)+1));
 9ec:	8a 81       	ldd	r24, Y+2	; 0x02
 9ee:	88 2f       	mov	r24, r24
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	2a 81       	ldd	r18, Y+2	; 0x02
 9f4:	22 2f       	mov	r18, r18
 9f6:	30 e0       	ldi	r19, 0x00	; 0
 9f8:	22 0f       	add	r18, r18
 9fa:	33 1f       	adc	r19, r19
 9fc:	ae 01       	movw	r20, r28
 9fe:	4f 5f       	subi	r20, 0xFF	; 255
 a00:	5f 4f       	sbci	r21, 0xFF	; 255
 a02:	24 0f       	add	r18, r20
 a04:	35 1f       	adc	r19, r21
 a06:	26 5e       	subi	r18, 0xE6	; 230
 a08:	3f 4f       	sbci	r19, 0xFF	; 255
 a0a:	f9 01       	movw	r30, r18
 a0c:	20 81       	ld	r18, Z
 a0e:	31 81       	ldd	r19, Z+1	; 0x01
 a10:	4b 81       	ldd	r20, Y+3	; 0x03
 a12:	44 2f       	mov	r20, r20
 a14:	50 e0       	ldi	r21, 0x00	; 0
 a16:	44 0f       	add	r20, r20
 a18:	55 1f       	adc	r21, r21
 a1a:	ba 01       	movw	r22, r20
 a1c:	6f 5f       	subi	r22, 0xFF	; 255
 a1e:	7f 4f       	sbci	r23, 0xFF	; 255
 a20:	41 e0       	ldi	r20, 0x01	; 1
 a22:	50 e0       	ldi	r21, 0x00	; 0
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <__stack+0x12b>
 a26:	44 0f       	add	r20, r20
 a28:	55 1f       	adc	r21, r21
 a2a:	6a 95       	dec	r22
 a2c:	e2 f7       	brpl	.-8      	; 0xa26 <__stack+0x127>
 a2e:	24 2b       	or	r18, r20
 a30:	35 2b       	or	r19, r21
 a32:	88 0f       	add	r24, r24
 a34:	99 1f       	adc	r25, r25
 a36:	ae 01       	movw	r20, r28
 a38:	4f 5f       	subi	r20, 0xFF	; 255
 a3a:	5f 4f       	sbci	r21, 0xFF	; 255
 a3c:	84 0f       	add	r24, r20
 a3e:	95 1f       	adc	r25, r21
 a40:	4a 96       	adiw	r24, 0x1a	; 26
 a42:	fc 01       	movw	r30, r24
 a44:	31 83       	std	Z+1, r19	; 0x01
 a46:	20 83       	st	Z, r18
                if ((cursorPosition.x+2*sizeof(FONT[0]))>DISPLAY_WIDTH) break;
                
                for (uint8_t i=0; i < sizeof(FONT[0]); i++) {
                    doubleChar[i] = 0;
                    dChar = pgm_read_byte(&(FONT[(uint8_t)c][i]));
                    for (uint8_t j=0; j<8; j++) {
 a48:	8b 81       	ldd	r24, Y+3	; 0x03
 a4a:	8f 5f       	subi	r24, 0xFF	; 255
 a4c:	8b 83       	std	Y+3, r24	; 0x03
 a4e:	8b 81       	ldd	r24, Y+3	; 0x03
 a50:	88 30       	cpi	r24, 0x08	; 8
 a52:	08 f4       	brcc	.+2      	; 0xa56 <__stack+0x157>
 a54:	8f cf       	rjmp	.-226    	; 0x974 <__stack+0x75>
            if (charMode == DOUBLESIZE) {
                uint16_t doubleChar[sizeof(FONT[0])];
                uint8_t dChar;
                if ((cursorPosition.x+2*sizeof(FONT[0]))>DISPLAY_WIDTH) break;
                
                for (uint8_t i=0; i < sizeof(FONT[0]); i++) {
 a56:	8a 81       	ldd	r24, Y+2	; 0x02
 a58:	8f 5f       	subi	r24, 0xFF	; 255
 a5a:	8a 83       	std	Y+2, r24	; 0x02
 a5c:	8a 81       	ldd	r24, Y+2	; 0x02
 a5e:	86 30       	cpi	r24, 0x06	; 6
 a60:	08 f4       	brcc	.+2      	; 0xa64 <__stack+0x165>
 a62:	5e cf       	rjmp	.-324    	; 0x920 <__stack+0x21>
                            doubleChar[i] |= (1 << ((j*2)+1));
                        }
                    }
                }
                uint8_t data[sizeof(FONT[0])*2];
                for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
 a64:	1c 82       	std	Y+4, r1	; 0x04
 a66:	3c c0       	rjmp	.+120    	; 0xae0 <__stack+0x1e1>
                {
                    // print font to ram, print 6 columns
                    data[i<<1]=(doubleChar[i] & 0xff);
 a68:	8c 81       	ldd	r24, Y+4	; 0x04
 a6a:	88 2f       	mov	r24, r24
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	88 0f       	add	r24, r24
 a70:	99 1f       	adc	r25, r25
 a72:	2c 81       	ldd	r18, Y+4	; 0x04
 a74:	22 2f       	mov	r18, r18
 a76:	30 e0       	ldi	r19, 0x00	; 0
 a78:	22 0f       	add	r18, r18
 a7a:	33 1f       	adc	r19, r19
 a7c:	ae 01       	movw	r20, r28
 a7e:	4f 5f       	subi	r20, 0xFF	; 255
 a80:	5f 4f       	sbci	r21, 0xFF	; 255
 a82:	24 0f       	add	r18, r20
 a84:	35 1f       	adc	r19, r21
 a86:	26 5e       	subi	r18, 0xE6	; 230
 a88:	3f 4f       	sbci	r19, 0xFF	; 255
 a8a:	f9 01       	movw	r30, r18
 a8c:	20 81       	ld	r18, Z
 a8e:	31 81       	ldd	r19, Z+1	; 0x01
 a90:	42 2f       	mov	r20, r18
 a92:	9e 01       	movw	r18, r28
 a94:	29 5d       	subi	r18, 0xD9	; 217
 a96:	3f 4f       	sbci	r19, 0xFF	; 255
 a98:	82 0f       	add	r24, r18
 a9a:	93 1f       	adc	r25, r19
 a9c:	fc 01       	movw	r30, r24
 a9e:	40 83       	st	Z, r20
                    data[(i<<1)+1]=(doubleChar[i] & 0xff);
 aa0:	8c 81       	ldd	r24, Y+4	; 0x04
 aa2:	88 2f       	mov	r24, r24
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	88 0f       	add	r24, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	01 96       	adiw	r24, 0x01	; 1
 aac:	2c 81       	ldd	r18, Y+4	; 0x04
 aae:	22 2f       	mov	r18, r18
 ab0:	30 e0       	ldi	r19, 0x00	; 0
 ab2:	22 0f       	add	r18, r18
 ab4:	33 1f       	adc	r19, r19
 ab6:	ae 01       	movw	r20, r28
 ab8:	4f 5f       	subi	r20, 0xFF	; 255
 aba:	5f 4f       	sbci	r21, 0xFF	; 255
 abc:	24 0f       	add	r18, r20
 abe:	35 1f       	adc	r19, r21
 ac0:	26 5e       	subi	r18, 0xE6	; 230
 ac2:	3f 4f       	sbci	r19, 0xFF	; 255
 ac4:	f9 01       	movw	r30, r18
 ac6:	20 81       	ld	r18, Z
 ac8:	31 81       	ldd	r19, Z+1	; 0x01
 aca:	42 2f       	mov	r20, r18
 acc:	9e 01       	movw	r18, r28
 ace:	29 5d       	subi	r18, 0xD9	; 217
 ad0:	3f 4f       	sbci	r19, 0xFF	; 255
 ad2:	82 0f       	add	r24, r18
 ad4:	93 1f       	adc	r25, r19
 ad6:	fc 01       	movw	r30, r24
 ad8:	40 83       	st	Z, r20
                            doubleChar[i] |= (1 << ((j*2)+1));
                        }
                    }
                }
                uint8_t data[sizeof(FONT[0])*2];
                for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
 ada:	8c 81       	ldd	r24, Y+4	; 0x04
 adc:	8f 5f       	subi	r24, 0xFF	; 255
 ade:	8c 83       	std	Y+4, r24	; 0x04
 ae0:	8c 81       	ldd	r24, Y+4	; 0x04
 ae2:	86 30       	cpi	r24, 0x06	; 6
 ae4:	08 f2       	brcs	.-126    	; 0xa68 <__stack+0x169>
                {
                    // print font to ram, print 6 columns
                    data[i<<1]=(doubleChar[i] & 0xff);
                    data[(i<<1)+1]=(doubleChar[i] & 0xff);
                }
                lcd_data(data, sizeof(FONT[0])*2);
 ae6:	ce 01       	movw	r24, r28
 ae8:	87 96       	adiw	r24, 0x27	; 39
 aea:	6c e0       	ldi	r22, 0x0C	; 12
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	0e 94 81 02 	call	0x502	; 0x502 <lcd_data>
                uint8_t commandSequence[] = {0xb0+cursorPosition.y+1,
                    0x21,
                    cursorPosition.x,
                    0x7f};
#elif defined SH1106
                uint8_t commandSequence[] = {0xb0+cursorPosition.y+1,
 af2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__data_end+0x1>
 af6:	8f 54       	subi	r24, 0x4F	; 79
 af8:	8b ab       	std	Y+51, r24	; 0x33
 afa:	81 e2       	ldi	r24, 0x21	; 33
 afc:	8c ab       	std	Y+52, r24	; 0x34
                    0x21,
                    0x00+((2+cursorPosition.x) & (0x0f)),
 afe:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
                uint8_t commandSequence[] = {0xb0+cursorPosition.y+1,
                    0x21,
                    cursorPosition.x,
                    0x7f};
#elif defined SH1106
                uint8_t commandSequence[] = {0xb0+cursorPosition.y+1,
 b02:	8e 5f       	subi	r24, 0xFE	; 254
 b04:	8f 70       	andi	r24, 0x0F	; 15
 b06:	8d ab       	std	Y+53, r24	; 0x35
                    0x21,
                    0x00+((2+cursorPosition.x) & (0x0f)),
                    0x10+( ((2+cursorPosition.x) & (0xf0)) >> 4 ),
 b08:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 b0c:	88 2f       	mov	r24, r24
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	02 96       	adiw	r24, 0x02	; 2
 b12:	80 7f       	andi	r24, 0xF0	; 240
 b14:	99 27       	eor	r25, r25
 b16:	95 95       	asr	r25
 b18:	87 95       	ror	r24
 b1a:	95 95       	asr	r25
 b1c:	87 95       	ror	r24
 b1e:	95 95       	asr	r25
 b20:	87 95       	ror	r24
 b22:	95 95       	asr	r25
 b24:	87 95       	ror	r24
                uint8_t commandSequence[] = {0xb0+cursorPosition.y+1,
                    0x21,
                    cursorPosition.x,
                    0x7f};
#elif defined SH1106
                uint8_t commandSequence[] = {0xb0+cursorPosition.y+1,
 b26:	80 5f       	subi	r24, 0xF0	; 240
 b28:	8e ab       	std	Y+54, r24	; 0x36
 b2a:	8f e7       	ldi	r24, 0x7F	; 127
 b2c:	8f ab       	std	Y+55, r24	; 0x37
                    0x21,
                    0x00+((2+cursorPosition.x) & (0x0f)),
                    0x10+( ((2+cursorPosition.x) & (0xf0)) >> 4 ),
                    0x7f};
#endif
                lcd_command(commandSequence, sizeof(commandSequence));
 b2e:	ce 01       	movw	r24, r28
 b30:	c3 96       	adiw	r24, 0x33	; 51
 b32:	65 e0       	ldi	r22, 0x05	; 5
 b34:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_command>
                
                for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
 b38:	1d 82       	std	Y+5, r1	; 0x05
 b3a:	40 c0       	rjmp	.+128    	; 0xbbc <__stack+0x2bd>
                {
                    // print font to ram, print 6 columns
                    data[i<<1]=(doubleChar[i] >> 8);
 b3c:	8d 81       	ldd	r24, Y+5	; 0x05
 b3e:	88 2f       	mov	r24, r24
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	88 0f       	add	r24, r24
 b44:	99 1f       	adc	r25, r25
 b46:	2d 81       	ldd	r18, Y+5	; 0x05
 b48:	22 2f       	mov	r18, r18
 b4a:	30 e0       	ldi	r19, 0x00	; 0
 b4c:	22 0f       	add	r18, r18
 b4e:	33 1f       	adc	r19, r19
 b50:	ae 01       	movw	r20, r28
 b52:	4f 5f       	subi	r20, 0xFF	; 255
 b54:	5f 4f       	sbci	r21, 0xFF	; 255
 b56:	24 0f       	add	r18, r20
 b58:	35 1f       	adc	r19, r21
 b5a:	26 5e       	subi	r18, 0xE6	; 230
 b5c:	3f 4f       	sbci	r19, 0xFF	; 255
 b5e:	f9 01       	movw	r30, r18
 b60:	20 81       	ld	r18, Z
 b62:	31 81       	ldd	r19, Z+1	; 0x01
 b64:	23 2f       	mov	r18, r19
 b66:	33 27       	eor	r19, r19
 b68:	42 2f       	mov	r20, r18
 b6a:	9e 01       	movw	r18, r28
 b6c:	29 5d       	subi	r18, 0xD9	; 217
 b6e:	3f 4f       	sbci	r19, 0xFF	; 255
 b70:	82 0f       	add	r24, r18
 b72:	93 1f       	adc	r25, r19
 b74:	fc 01       	movw	r30, r24
 b76:	40 83       	st	Z, r20
                    data[(i<<1)+1]=(doubleChar[i] >> 8);
 b78:	8d 81       	ldd	r24, Y+5	; 0x05
 b7a:	88 2f       	mov	r24, r24
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	88 0f       	add	r24, r24
 b80:	99 1f       	adc	r25, r25
 b82:	01 96       	adiw	r24, 0x01	; 1
 b84:	2d 81       	ldd	r18, Y+5	; 0x05
 b86:	22 2f       	mov	r18, r18
 b88:	30 e0       	ldi	r19, 0x00	; 0
 b8a:	22 0f       	add	r18, r18
 b8c:	33 1f       	adc	r19, r19
 b8e:	ae 01       	movw	r20, r28
 b90:	4f 5f       	subi	r20, 0xFF	; 255
 b92:	5f 4f       	sbci	r21, 0xFF	; 255
 b94:	24 0f       	add	r18, r20
 b96:	35 1f       	adc	r19, r21
 b98:	26 5e       	subi	r18, 0xE6	; 230
 b9a:	3f 4f       	sbci	r19, 0xFF	; 255
 b9c:	f9 01       	movw	r30, r18
 b9e:	20 81       	ld	r18, Z
 ba0:	31 81       	ldd	r19, Z+1	; 0x01
 ba2:	23 2f       	mov	r18, r19
 ba4:	33 27       	eor	r19, r19
 ba6:	42 2f       	mov	r20, r18
 ba8:	9e 01       	movw	r18, r28
 baa:	29 5d       	subi	r18, 0xD9	; 217
 bac:	3f 4f       	sbci	r19, 0xFF	; 255
 bae:	82 0f       	add	r24, r18
 bb0:	93 1f       	adc	r25, r19
 bb2:	fc 01       	movw	r30, r24
 bb4:	40 83       	st	Z, r20
                    0x10+( ((2+cursorPosition.x) & (0xf0)) >> 4 ),
                    0x7f};
#endif
                lcd_command(commandSequence, sizeof(commandSequence));
                
                for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
 bb6:	8d 81       	ldd	r24, Y+5	; 0x05
 bb8:	8f 5f       	subi	r24, 0xFF	; 255
 bba:	8d 83       	std	Y+5, r24	; 0x05
 bbc:	8d 81       	ldd	r24, Y+5	; 0x05
 bbe:	86 30       	cpi	r24, 0x06	; 6
 bc0:	08 f4       	brcc	.+2      	; 0xbc4 <__stack+0x2c5>
 bc2:	bc cf       	rjmp	.-136    	; 0xb3c <__stack+0x23d>
                {
                    // print font to ram, print 6 columns
                    data[i<<1]=(doubleChar[i] >> 8);
                    data[(i<<1)+1]=(doubleChar[i] >> 8);
                }
                lcd_data(data, sizeof(FONT[0])*2);
 bc4:	ce 01       	movw	r24, r28
 bc6:	87 96       	adiw	r24, 0x27	; 39
 bc8:	6c e0       	ldi	r22, 0x0C	; 12
 bca:	70 e0       	ldi	r23, 0x00	; 0
 bcc:	0e 94 81 02 	call	0x502	; 0x502 <lcd_data>
                
                commandSequence[0] = 0xb0+cursorPosition.y;
 bd0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__data_end+0x1>
 bd4:	80 55       	subi	r24, 0x50	; 80
 bd6:	8b ab       	std	Y+51, r24	; 0x33
#if defined (SSD1306) || defined (SSD1309)
                commandSequence[2] = cursorPosition.x+(2*sizeof(FONT[0]));
#elif defined SH1106
                commandSequence[2] = 0x00+((2+cursorPosition.x+(2*sizeof(FONT[0]))) & (0x0f));
 bd8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 bdc:	82 5f       	subi	r24, 0xF2	; 242
 bde:	8f 70       	andi	r24, 0x0F	; 15
 be0:	8d ab       	std	Y+53, r24	; 0x35
                commandSequence[3] = 0x10+( ((2+cursorPosition.x+(2*sizeof(FONT[0]))) & (0xf0)) >> 4 );
 be2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 be6:	88 2f       	mov	r24, r24
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	0e 96       	adiw	r24, 0x0e	; 14
 bec:	80 7f       	andi	r24, 0xF0	; 240
 bee:	99 27       	eor	r25, r25
 bf0:	92 95       	swap	r25
 bf2:	82 95       	swap	r24
 bf4:	8f 70       	andi	r24, 0x0F	; 15
 bf6:	89 27       	eor	r24, r25
 bf8:	9f 70       	andi	r25, 0x0F	; 15
 bfa:	89 27       	eor	r24, r25
 bfc:	80 5f       	subi	r24, 0xF0	; 240
 bfe:	8e ab       	std	Y+54, r24	; 0x36
#endif
                lcd_command(commandSequence, sizeof(commandSequence));
 c00:	ce 01       	movw	r24, r28
 c02:	c3 96       	adiw	r24, 0x33	; 51
 c04:	65 e0       	ldi	r22, 0x05	; 5
 c06:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_command>
                cursorPosition.x += sizeof(FONT[0])*2;
 c0a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 c0e:	84 5f       	subi	r24, 0xF4	; 244
 c10:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
                }
                lcd_data(data, sizeof(FONT[0]));
                cursorPosition.x += sizeof(FONT[0]);
            }
#endif
            break;
 c14:	43 c0       	rjmp	.+134    	; 0xc9c <__stack+0x39d>
#endif
                lcd_command(commandSequence, sizeof(commandSequence));
                cursorPosition.x += sizeof(FONT[0])*2;
            } else {
                uint8_t data[sizeof(FONT[0])];
                if ((cursorPosition.x+sizeof(FONT[0]))>DISPLAY_WIDTH) break;
 c16:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 c1a:	88 2f       	mov	r24, r24
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	06 96       	adiw	r24, 0x06	; 6
 c20:	81 38       	cpi	r24, 0x81	; 129
 c22:	91 05       	cpc	r25, r1
 c24:	10 f0       	brcs	.+4      	; 0xc2a <__stack+0x32b>
 c26:	00 00       	nop
            }
#endif
            break;
    }
    
}
 c28:	39 c0       	rjmp	.+114    	; 0xc9c <__stack+0x39d>
                cursorPosition.x += sizeof(FONT[0])*2;
            } else {
                uint8_t data[sizeof(FONT[0])];
                if ((cursorPosition.x+sizeof(FONT[0]))>DISPLAY_WIDTH) break;
                
            	for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
 c2a:	1e 82       	std	Y+6, r1	; 0x06
 c2c:	25 c0       	rjmp	.+74     	; 0xc78 <__stack+0x379>
                {
                    // print font to ram, print 6 columns
                    data[i]=(pgm_read_byte(&(FONT[(uint8_t)c][i])));
 c2e:	8e 81       	ldd	r24, Y+6	; 0x06
 c30:	48 2f       	mov	r20, r24
 c32:	50 e0       	ldi	r21, 0x00	; 0
 c34:	8e ad       	ldd	r24, Y+62	; 0x3e
 c36:	28 2f       	mov	r18, r24
 c38:	30 e0       	ldi	r19, 0x00	; 0
 c3a:	8e 81       	ldd	r24, Y+6	; 0x06
 c3c:	68 2f       	mov	r22, r24
 c3e:	70 e0       	ldi	r23, 0x00	; 0
 c40:	c9 01       	movw	r24, r18
 c42:	88 0f       	add	r24, r24
 c44:	99 1f       	adc	r25, r25
 c46:	82 0f       	add	r24, r18
 c48:	93 1f       	adc	r25, r19
 c4a:	88 0f       	add	r24, r24
 c4c:	99 1f       	adc	r25, r25
 c4e:	86 0f       	add	r24, r22
 c50:	97 1f       	adc	r25, r23
 c52:	88 59       	subi	r24, 0x98	; 152
 c54:	9f 4f       	sbci	r25, 0xFF	; 255
 c56:	99 8f       	std	Y+25, r25	; 0x19
 c58:	88 8f       	std	Y+24, r24	; 0x18
 c5a:	88 8d       	ldd	r24, Y+24	; 0x18
 c5c:	99 8d       	ldd	r25, Y+25	; 0x19
 c5e:	fc 01       	movw	r30, r24
 c60:	84 91       	lpm	r24, Z
 c62:	8a 8f       	std	Y+26, r24	; 0x1a
 c64:	2a 8d       	ldd	r18, Y+26	; 0x1a
 c66:	ce 01       	movw	r24, r28
 c68:	c8 96       	adiw	r24, 0x38	; 56
 c6a:	84 0f       	add	r24, r20
 c6c:	95 1f       	adc	r25, r21
 c6e:	fc 01       	movw	r30, r24
 c70:	20 83       	st	Z, r18
                cursorPosition.x += sizeof(FONT[0])*2;
            } else {
                uint8_t data[sizeof(FONT[0])];
                if ((cursorPosition.x+sizeof(FONT[0]))>DISPLAY_WIDTH) break;
                
            	for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
 c72:	8e 81       	ldd	r24, Y+6	; 0x06
 c74:	8f 5f       	subi	r24, 0xFF	; 255
 c76:	8e 83       	std	Y+6, r24	; 0x06
 c78:	8e 81       	ldd	r24, Y+6	; 0x06
 c7a:	86 30       	cpi	r24, 0x06	; 6
 c7c:	c0 f2       	brcs	.-80     	; 0xc2e <__stack+0x32f>
                {
                    // print font to ram, print 6 columns
                    data[i]=(pgm_read_byte(&(FONT[(uint8_t)c][i])));
                }
                lcd_data(data, sizeof(FONT[0]));
 c7e:	ce 01       	movw	r24, r28
 c80:	c8 96       	adiw	r24, 0x38	; 56
 c82:	66 e0       	ldi	r22, 0x06	; 6
 c84:	70 e0       	ldi	r23, 0x00	; 0
 c86:	0e 94 81 02 	call	0x502	; 0x502 <lcd_data>
                cursorPosition.x += sizeof(FONT[0]);
 c8a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 c8e:	8a 5f       	subi	r24, 0xFA	; 250
 c90:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
            }
#endif
            break;
 c94:	03 c0       	rjmp	.+6      	; 0xc9c <__stack+0x39d>
        case '\n':
            // linefeed
            if(cursorPosition.y < (DISPLAY_HEIGHT/8-1)){
                lcd_gotoxy(cursorPosition.x, cursorPosition.y+charMode);
            }
            break;
 c96:	00 00       	nop
 c98:	01 c0       	rjmp	.+2      	; 0xc9c <__stack+0x39d>
                    if ( pgm_read_byte(&special_char[i][0])-' ' == temp ) {
                        c = pgm_read_byte(&special_char[i][1]);
                        break;
                    }
                }
                if ( c == 0xff ) break;
 c9a:	00 00       	nop
            }
#endif
            break;
    }
    
}
 c9c:	00 00       	nop
 c9e:	ee 96       	adiw	r28, 0x3e	; 62
 ca0:	0f b6       	in	r0, 0x3f	; 63
 ca2:	f8 94       	cli
 ca4:	de bf       	out	0x3e, r29	; 62
 ca6:	0f be       	out	0x3f, r0	; 63
 ca8:	cd bf       	out	0x3d, r28	; 61
 caa:	df 91       	pop	r29
 cac:	cf 91       	pop	r28
 cae:	08 95       	ret

00000cb0 <lcd_charMode>:
void lcd_charMode(uint8_t mode){
 cb0:	cf 93       	push	r28
 cb2:	df 93       	push	r29
 cb4:	1f 92       	push	r1
 cb6:	cd b7       	in	r28, 0x3d	; 61
 cb8:	de b7       	in	r29, 0x3e	; 62
 cba:	89 83       	std	Y+1, r24	; 0x01
    charMode = mode;
 cbc:	89 81       	ldd	r24, Y+1	; 0x01
 cbe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
}
 cc2:	00 00       	nop
 cc4:	0f 90       	pop	r0
 cc6:	df 91       	pop	r29
 cc8:	cf 91       	pop	r28
 cca:	08 95       	ret

00000ccc <lcd_puts>:
void lcd_puts(const char* s){
 ccc:	cf 93       	push	r28
 cce:	df 93       	push	r29
 cd0:	00 d0       	rcall	.+0      	; 0xcd2 <lcd_puts+0x6>
 cd2:	cd b7       	in	r28, 0x3d	; 61
 cd4:	de b7       	in	r29, 0x3e	; 62
 cd6:	9a 83       	std	Y+2, r25	; 0x02
 cd8:	89 83       	std	Y+1, r24	; 0x01
    while (*s) {
 cda:	0b c0       	rjmp	.+22     	; 0xcf2 <lcd_puts+0x26>
        lcd_putc(*s++);
 cdc:	89 81       	ldd	r24, Y+1	; 0x01
 cde:	9a 81       	ldd	r25, Y+2	; 0x02
 ce0:	9c 01       	movw	r18, r24
 ce2:	2f 5f       	subi	r18, 0xFF	; 255
 ce4:	3f 4f       	sbci	r19, 0xFF	; 255
 ce6:	3a 83       	std	Y+2, r19	; 0x02
 ce8:	29 83       	std	Y+1, r18	; 0x01
 cea:	fc 01       	movw	r30, r24
 cec:	80 81       	ld	r24, Z
 cee:	0e 94 94 03 	call	0x728	; 0x728 <lcd_putc>
}
void lcd_charMode(uint8_t mode){
    charMode = mode;
}
void lcd_puts(const char* s){
    while (*s) {
 cf2:	89 81       	ldd	r24, Y+1	; 0x01
 cf4:	9a 81       	ldd	r25, Y+2	; 0x02
 cf6:	fc 01       	movw	r30, r24
 cf8:	80 81       	ld	r24, Z
 cfa:	88 23       	and	r24, r24
 cfc:	79 f7       	brne	.-34     	; 0xcdc <lcd_puts+0x10>
        lcd_putc(*s++);
    }
}
 cfe:	00 00       	nop
 d00:	0f 90       	pop	r0
 d02:	0f 90       	pop	r0
 d04:	df 91       	pop	r29
 d06:	cf 91       	pop	r28
 d08:	08 95       	ret

00000d0a <main>:
	
	USART_Transmit('\r\n');
}

int main(void)
{
 d0a:	cf 93       	push	r28
 d0c:	df 93       	push	r29
 d0e:	cd b7       	in	r28, 0x3d	; 61
 d10:	de b7       	in	r29, 0x3e	; 62
    
    lcd_init(LCD_DISP_ON);
 d12:	8f ea       	ldi	r24, 0xAF	; 175
 d14:	0e 94 b7 02 	call	0x56e	; 0x56e <lcd_init>
    lcd_clrscr();
 d18:	0e 94 3f 03 	call	0x67e	; 0x67e <lcd_clrscr>
    lcd_set_contrast(0x00);
 d1c:	80 e0       	ldi	r24, 0x00	; 0
 d1e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <lcd_set_contrast>
    lcd_gotoxy(4,1);
 d22:	61 e0       	ldi	r22, 0x01	; 1
 d24:	84 e0       	ldi	r24, 0x04	; 4
 d26:	0e 94 f6 02 	call	0x5ec	; 0x5ec <lcd_gotoxy>
    lcd_puts("Normal Size");
 d2a:	81 e0       	ldi	r24, 0x01	; 1
 d2c:	91 e0       	ldi	r25, 0x01	; 1
 d2e:	0e 94 66 06 	call	0xccc	; 0xccc <lcd_puts>
    lcd_charMode(DOUBLESIZE);
 d32:	82 e0       	ldi	r24, 0x02	; 2
 d34:	0e 94 58 06 	call	0xcb0	; 0xcb0 <lcd_charMode>
    lcd_gotoxy(0,4);
 d38:	64 e0       	ldi	r22, 0x04	; 4
 d3a:	80 e0       	ldi	r24, 0x00	; 0
 d3c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <lcd_gotoxy>
    lcd_puts("  Double  \r\n   Size");
 d40:	8d e0       	ldi	r24, 0x0D	; 13
 d42:	91 e0       	ldi	r25, 0x01	; 1
 d44:	0e 94 66 06 	call	0xccc	; 0xccc <lcd_puts>
    lcd_charMode(NORMALSIZE);
 d48:	81 e0       	ldi	r24, 0x01	; 1
 d4a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <lcd_charMode>
    #ifdef GRAPHICMODE
    lcd_display();
    #endif
    for(;;){
	    //main loop
    }
 d4e:	ff cf       	rjmp	.-2      	; 0xd4e <main+0x44>

00000d50 <memset>:
 d50:	dc 01       	movw	r26, r24
 d52:	01 c0       	rjmp	.+2      	; 0xd56 <memset+0x6>
 d54:	6d 93       	st	X+, r22
 d56:	41 50       	subi	r20, 0x01	; 1
 d58:	50 40       	sbci	r21, 0x00	; 0
 d5a:	e0 f7       	brcc	.-8      	; 0xd54 <memset+0x4>
 d5c:	08 95       	ret

00000d5e <_exit>:
 d5e:	f8 94       	cli

00000d60 <__stop_program>:
 d60:	ff cf       	rjmp	.-2      	; 0xd60 <__stop_program>
