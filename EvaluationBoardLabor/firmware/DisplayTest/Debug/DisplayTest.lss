
DisplayTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000004bc  00000530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000536  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ed  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ef  00000000  00000000  00000dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000242  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001700  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c0  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec eb       	ldi	r30, 0xBC	; 188
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  9e:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InitUART>:
#include <avr/io.h>
#include <util/delay.h>
#include "lcd.h"

void InitUART()
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);// | (1 << RXCIE0);
  ae:	81 ec       	ldi	r24, 0xC1	; 193
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	28 e1       	ldi	r18, 0x18	; 24
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
  b8:	82 ec       	ldi	r24, 0xC2	; 194
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	26 e0       	ldi	r18, 0x06	; 6
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
	
	UBRR0 = 103;	// 103 = value @16MHz clock for 9600
  c2:	84 ec       	ldi	r24, 0xC4	; 196
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	27 e6       	ldi	r18, 0x67	; 103
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	31 83       	std	Z+1, r19	; 0x01
  ce:	20 83       	st	Z, r18
}
  d0:	00 00       	nop
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	1f 92       	push	r1
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
  e4:	00 00       	nop
  e6:	80 ec       	ldi	r24, 0xC0	; 192
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	80 81       	ld	r24, Z
  ee:	88 2f       	mov	r24, r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	80 72       	andi	r24, 0x20	; 32
  f4:	99 27       	eor	r25, r25
  f6:	89 2b       	or	r24, r25
  f8:	b1 f3       	breq	.-20     	; 0xe6 <USART_Transmit+0xe>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  fa:	86 ec       	ldi	r24, 0xC6	; 198
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	29 81       	ldd	r18, Y+1	; 0x01
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
}
 104:	00 00       	nop
 106:	0f 90       	pop	r0
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <SendString>:

void SendString(uint8_t* pData)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <SendString+0x6>
 114:	00 d0       	rcall	.+0      	; 0x116 <SendString+0x8>
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	9c 83       	std	Y+4, r25	; 0x04
 11c:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t len = strlen(pData);
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	9c 81       	ldd	r25, Y+4	; 0x04
 122:	0e 94 53 02 	call	0x4a6	; 0x4a6 <strlen>
 126:	89 83       	std	Y+1, r24	; 0x01
	if (len < 1)
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	88 23       	and	r24, r24
 12c:	b1 f0       	breq	.+44     	; 0x15a <SendString+0x4c>
	return;
	
	char c = 0x00;
 12e:	1a 82       	std	Y+2, r1	; 0x02
	
	while(c = *pData++)
 130:	03 c0       	rjmp	.+6      	; 0x138 <SendString+0x2a>
	USART_Transmit(c);
 132:	8a 81       	ldd	r24, Y+2	; 0x02
 134:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Transmit>
	if (len < 1)
	return;
	
	char c = 0x00;
	
	while(c = *pData++)
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	9c 81       	ldd	r25, Y+4	; 0x04
 13c:	9c 01       	movw	r18, r24
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	3c 83       	std	Y+4, r19	; 0x04
 144:	2b 83       	std	Y+3, r18	; 0x03
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	8a 83       	std	Y+2, r24	; 0x02
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	88 23       	and	r24, r24
 150:	81 f7       	brne	.-32     	; 0x132 <SendString+0x24>
	USART_Transmit(c);
	
	USART_Transmit('\r\n');
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Transmit>
 158:	01 c0       	rjmp	.+2      	; 0x15c <SendString+0x4e>

void SendString(uint8_t* pData)
{
	uint8_t len = strlen(pData);
	if (len < 1)
	return;
 15a:	00 00       	nop
	
	while(c = *pData++)
	USART_Transmit(c);
	
	USART_Transmit('\r\n');
}
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <main>:

int main(void)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	2e 97       	sbiw	r28, 0x0e	; 14
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	f8 94       	cli
 178:	de bf       	out	0x3e, r29	; 62
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	cd bf       	out	0x3d, r28	; 61
	InitUART();
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <InitUART>

	while(1) {
		SendString("Hallo");
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	0e 94 87 00 	call	0x10e	; 0x10e <SendString>
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	aa ef       	ldi	r26, 0xFA	; 250
 190:	b4 e4       	ldi	r27, 0x44	; 68
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	9a 83       	std	Y+2, r25	; 0x02
 196:	ab 83       	std	Y+3, r26	; 0x03
 198:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	4a e7       	ldi	r20, 0x7A	; 122
 1a0:	55 e4       	ldi	r21, 0x45	; 69
 1a2:	69 81       	ldd	r22, Y+1	; 0x01
 1a4:	7a 81       	ldd	r23, Y+2	; 0x02
 1a6:	8b 81       	ldd	r24, Y+3	; 0x03
 1a8:	9c 81       	ldd	r25, Y+4	; 0x04
 1aa:	0e 94 be 01 	call	0x37c	; 0x37c <__mulsf3>
 1ae:	dc 01       	movw	r26, r24
 1b0:	cb 01       	movw	r24, r22
 1b2:	8d 83       	std	Y+5, r24	; 0x05
 1b4:	9e 83       	std	Y+6, r25	; 0x06
 1b6:	af 83       	std	Y+7, r26	; 0x07
 1b8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 e8       	ldi	r20, 0x80	; 128
 1c0:	5f e3       	ldi	r21, 0x3F	; 63
 1c2:	6d 81       	ldd	r22, Y+5	; 0x05
 1c4:	7e 81       	ldd	r23, Y+6	; 0x06
 1c6:	8f 81       	ldd	r24, Y+7	; 0x07
 1c8:	98 85       	ldd	r25, Y+8	; 0x08
 1ca:	0e 94 38 01 	call	0x270	; 0x270 <__cmpsf2>
 1ce:	88 23       	and	r24, r24
 1d0:	2c f4       	brge	.+10     	; 0x1dc <main+0x72>
		__ticks = 1;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	9a 87       	std	Y+10, r25	; 0x0a
 1d8:	89 87       	std	Y+9, r24	; 0x09
 1da:	3f c0       	rjmp	.+126    	; 0x25a <main+0xf0>
	else if (__tmp > 65535)
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	3f ef       	ldi	r19, 0xFF	; 255
 1e0:	4f e7       	ldi	r20, 0x7F	; 127
 1e2:	57 e4       	ldi	r21, 0x47	; 71
 1e4:	6d 81       	ldd	r22, Y+5	; 0x05
 1e6:	7e 81       	ldd	r23, Y+6	; 0x06
 1e8:	8f 81       	ldd	r24, Y+7	; 0x07
 1ea:	98 85       	ldd	r25, Y+8	; 0x08
 1ec:	0e 94 b9 01 	call	0x372	; 0x372 <__gesf2>
 1f0:	18 16       	cp	r1, r24
 1f2:	4c f5       	brge	.+82     	; 0x246 <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1f4:	20 e0       	ldi	r18, 0x00	; 0
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	40 e2       	ldi	r20, 0x20	; 32
 1fa:	51 e4       	ldi	r21, 0x41	; 65
 1fc:	69 81       	ldd	r22, Y+1	; 0x01
 1fe:	7a 81       	ldd	r23, Y+2	; 0x02
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	9c 81       	ldd	r25, Y+4	; 0x04
 204:	0e 94 be 01 	call	0x37c	; 0x37c <__mulsf3>
 208:	dc 01       	movw	r26, r24
 20a:	cb 01       	movw	r24, r22
 20c:	bc 01       	movw	r22, r24
 20e:	cd 01       	movw	r24, r26
 210:	0e 94 3d 01 	call	0x27a	; 0x27a <__fixunssfsi>
 214:	dc 01       	movw	r26, r24
 216:	cb 01       	movw	r24, r22
 218:	9a 87       	std	Y+10, r25	; 0x0a
 21a:	89 87       	std	Y+9, r24	; 0x09
 21c:	0f c0       	rjmp	.+30     	; 0x23c <main+0xd2>
 21e:	80 e9       	ldi	r24, 0x90	; 144
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	9c 87       	std	Y+12, r25	; 0x0c
 224:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 226:	8b 85       	ldd	r24, Y+11	; 0x0b
 228:	9c 85       	ldd	r25, Y+12	; 0x0c
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <main+0xc0>
 22e:	9c 87       	std	Y+12, r25	; 0x0c
 230:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 232:	89 85       	ldd	r24, Y+9	; 0x09
 234:	9a 85       	ldd	r25, Y+10	; 0x0a
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	9a 87       	std	Y+10, r25	; 0x0a
 23a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 23c:	89 85       	ldd	r24, Y+9	; 0x09
 23e:	9a 85       	ldd	r25, Y+10	; 0x0a
 240:	89 2b       	or	r24, r25
 242:	69 f7       	brne	.-38     	; 0x21e <main+0xb4>
 244:	14 c0       	rjmp	.+40     	; 0x26e <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 246:	6d 81       	ldd	r22, Y+5	; 0x05
 248:	7e 81       	ldd	r23, Y+6	; 0x06
 24a:	8f 81       	ldd	r24, Y+7	; 0x07
 24c:	98 85       	ldd	r25, Y+8	; 0x08
 24e:	0e 94 3d 01 	call	0x27a	; 0x27a <__fixunssfsi>
 252:	dc 01       	movw	r26, r24
 254:	cb 01       	movw	r24, r22
 256:	9a 87       	std	Y+10, r25	; 0x0a
 258:	89 87       	std	Y+9, r24	; 0x09
 25a:	89 85       	ldd	r24, Y+9	; 0x09
 25c:	9a 85       	ldd	r25, Y+10	; 0x0a
 25e:	9e 87       	std	Y+14, r25	; 0x0e
 260:	8d 87       	std	Y+13, r24	; 0x0d
 262:	8d 85       	ldd	r24, Y+13	; 0x0d
 264:	9e 85       	ldd	r25, Y+14	; 0x0e
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0xfc>
 26a:	9e 87       	std	Y+14, r25	; 0x0e
 26c:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(2000);	
	}
 26e:	89 cf       	rjmp	.-238    	; 0x182 <main+0x18>

00000270 <__cmpsf2>:
 270:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__fp_cmp>
 274:	08 f4       	brcc	.+2      	; 0x278 <__cmpsf2+0x8>
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	08 95       	ret

0000027a <__fixunssfsi>:
 27a:	0e 94 98 01 	call	0x330	; 0x330 <__fp_splitA>
 27e:	88 f0       	brcs	.+34     	; 0x2a2 <__fixunssfsi+0x28>
 280:	9f 57       	subi	r25, 0x7F	; 127
 282:	98 f0       	brcs	.+38     	; 0x2aa <__fixunssfsi+0x30>
 284:	b9 2f       	mov	r27, r25
 286:	99 27       	eor	r25, r25
 288:	b7 51       	subi	r27, 0x17	; 23
 28a:	b0 f0       	brcs	.+44     	; 0x2b8 <__fixunssfsi+0x3e>
 28c:	e1 f0       	breq	.+56     	; 0x2c6 <__fixunssfsi+0x4c>
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	88 1f       	adc	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	1a f0       	brmi	.+6      	; 0x29e <__fixunssfsi+0x24>
 298:	ba 95       	dec	r27
 29a:	c9 f7       	brne	.-14     	; 0x28e <__fixunssfsi+0x14>
 29c:	14 c0       	rjmp	.+40     	; 0x2c6 <__fixunssfsi+0x4c>
 29e:	b1 30       	cpi	r27, 0x01	; 1
 2a0:	91 f0       	breq	.+36     	; 0x2c6 <__fixunssfsi+0x4c>
 2a2:	0e 94 b2 01 	call	0x364	; 0x364 <__fp_zero>
 2a6:	b1 e0       	ldi	r27, 0x01	; 1
 2a8:	08 95       	ret
 2aa:	0c 94 b2 01 	jmp	0x364	; 0x364 <__fp_zero>
 2ae:	67 2f       	mov	r22, r23
 2b0:	78 2f       	mov	r23, r24
 2b2:	88 27       	eor	r24, r24
 2b4:	b8 5f       	subi	r27, 0xF8	; 248
 2b6:	39 f0       	breq	.+14     	; 0x2c6 <__fixunssfsi+0x4c>
 2b8:	b9 3f       	cpi	r27, 0xF9	; 249
 2ba:	cc f3       	brlt	.-14     	; 0x2ae <__fixunssfsi+0x34>
 2bc:	86 95       	lsr	r24
 2be:	77 95       	ror	r23
 2c0:	67 95       	ror	r22
 2c2:	b3 95       	inc	r27
 2c4:	d9 f7       	brne	.-10     	; 0x2bc <__fixunssfsi+0x42>
 2c6:	3e f4       	brtc	.+14     	; 0x2d6 <__fixunssfsi+0x5c>
 2c8:	90 95       	com	r25
 2ca:	80 95       	com	r24
 2cc:	70 95       	com	r23
 2ce:	61 95       	neg	r22
 2d0:	7f 4f       	sbci	r23, 0xFF	; 255
 2d2:	8f 4f       	sbci	r24, 0xFF	; 255
 2d4:	9f 4f       	sbci	r25, 0xFF	; 255
 2d6:	08 95       	ret

000002d8 <__fp_cmp>:
 2d8:	99 0f       	add	r25, r25
 2da:	00 08       	sbc	r0, r0
 2dc:	55 0f       	add	r21, r21
 2de:	aa 0b       	sbc	r26, r26
 2e0:	e0 e8       	ldi	r30, 0x80	; 128
 2e2:	fe ef       	ldi	r31, 0xFE	; 254
 2e4:	16 16       	cp	r1, r22
 2e6:	17 06       	cpc	r1, r23
 2e8:	e8 07       	cpc	r30, r24
 2ea:	f9 07       	cpc	r31, r25
 2ec:	c0 f0       	brcs	.+48     	; 0x31e <__fp_cmp+0x46>
 2ee:	12 16       	cp	r1, r18
 2f0:	13 06       	cpc	r1, r19
 2f2:	e4 07       	cpc	r30, r20
 2f4:	f5 07       	cpc	r31, r21
 2f6:	98 f0       	brcs	.+38     	; 0x31e <__fp_cmp+0x46>
 2f8:	62 1b       	sub	r22, r18
 2fa:	73 0b       	sbc	r23, r19
 2fc:	84 0b       	sbc	r24, r20
 2fe:	95 0b       	sbc	r25, r21
 300:	39 f4       	brne	.+14     	; 0x310 <__fp_cmp+0x38>
 302:	0a 26       	eor	r0, r26
 304:	61 f0       	breq	.+24     	; 0x31e <__fp_cmp+0x46>
 306:	23 2b       	or	r18, r19
 308:	24 2b       	or	r18, r20
 30a:	25 2b       	or	r18, r21
 30c:	21 f4       	brne	.+8      	; 0x316 <__fp_cmp+0x3e>
 30e:	08 95       	ret
 310:	0a 26       	eor	r0, r26
 312:	09 f4       	brne	.+2      	; 0x316 <__fp_cmp+0x3e>
 314:	a1 40       	sbci	r26, 0x01	; 1
 316:	a6 95       	lsr	r26
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	81 1d       	adc	r24, r1
 31c:	81 1d       	adc	r24, r1
 31e:	08 95       	ret

00000320 <__fp_split3>:
 320:	57 fd       	sbrc	r21, 7
 322:	90 58       	subi	r25, 0x80	; 128
 324:	44 0f       	add	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	59 f0       	breq	.+22     	; 0x340 <__fp_splitA+0x10>
 32a:	5f 3f       	cpi	r21, 0xFF	; 255
 32c:	71 f0       	breq	.+28     	; 0x34a <__fp_splitA+0x1a>
 32e:	47 95       	ror	r20

00000330 <__fp_splitA>:
 330:	88 0f       	add	r24, r24
 332:	97 fb       	bst	r25, 7
 334:	99 1f       	adc	r25, r25
 336:	61 f0       	breq	.+24     	; 0x350 <__fp_splitA+0x20>
 338:	9f 3f       	cpi	r25, 0xFF	; 255
 33a:	79 f0       	breq	.+30     	; 0x35a <__fp_splitA+0x2a>
 33c:	87 95       	ror	r24
 33e:	08 95       	ret
 340:	12 16       	cp	r1, r18
 342:	13 06       	cpc	r1, r19
 344:	14 06       	cpc	r1, r20
 346:	55 1f       	adc	r21, r21
 348:	f2 cf       	rjmp	.-28     	; 0x32e <__fp_split3+0xe>
 34a:	46 95       	lsr	r20
 34c:	f1 df       	rcall	.-30     	; 0x330 <__fp_splitA>
 34e:	08 c0       	rjmp	.+16     	; 0x360 <__fp_splitA+0x30>
 350:	16 16       	cp	r1, r22
 352:	17 06       	cpc	r1, r23
 354:	18 06       	cpc	r1, r24
 356:	99 1f       	adc	r25, r25
 358:	f1 cf       	rjmp	.-30     	; 0x33c <__fp_splitA+0xc>
 35a:	86 95       	lsr	r24
 35c:	71 05       	cpc	r23, r1
 35e:	61 05       	cpc	r22, r1
 360:	08 94       	sec
 362:	08 95       	ret

00000364 <__fp_zero>:
 364:	e8 94       	clt

00000366 <__fp_szero>:
 366:	bb 27       	eor	r27, r27
 368:	66 27       	eor	r22, r22
 36a:	77 27       	eor	r23, r23
 36c:	cb 01       	movw	r24, r22
 36e:	97 f9       	bld	r25, 7
 370:	08 95       	ret

00000372 <__gesf2>:
 372:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__fp_cmp>
 376:	08 f4       	brcc	.+2      	; 0x37a <__gesf2+0x8>
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	08 95       	ret

0000037c <__mulsf3>:
 37c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__mulsf3x>
 380:	0c 94 42 02 	jmp	0x484	; 0x484 <__fp_round>
 384:	0e 94 34 02 	call	0x468	; 0x468 <__fp_pscA>
 388:	38 f0       	brcs	.+14     	; 0x398 <__mulsf3+0x1c>
 38a:	0e 94 3b 02 	call	0x476	; 0x476 <__fp_pscB>
 38e:	20 f0       	brcs	.+8      	; 0x398 <__mulsf3+0x1c>
 390:	95 23       	and	r25, r21
 392:	11 f0       	breq	.+4      	; 0x398 <__mulsf3+0x1c>
 394:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_inf>
 398:	0c 94 31 02 	jmp	0x462	; 0x462 <__fp_nan>
 39c:	11 24       	eor	r1, r1
 39e:	0c 94 b3 01 	jmp	0x366	; 0x366 <__fp_szero>

000003a2 <__mulsf3x>:
 3a2:	0e 94 90 01 	call	0x320	; 0x320 <__fp_split3>
 3a6:	70 f3       	brcs	.-36     	; 0x384 <__mulsf3+0x8>

000003a8 <__mulsf3_pse>:
 3a8:	95 9f       	mul	r25, r21
 3aa:	c1 f3       	breq	.-16     	; 0x39c <__mulsf3+0x20>
 3ac:	95 0f       	add	r25, r21
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	55 1f       	adc	r21, r21
 3b2:	62 9f       	mul	r22, r18
 3b4:	f0 01       	movw	r30, r0
 3b6:	72 9f       	mul	r23, r18
 3b8:	bb 27       	eor	r27, r27
 3ba:	f0 0d       	add	r31, r0
 3bc:	b1 1d       	adc	r27, r1
 3be:	63 9f       	mul	r22, r19
 3c0:	aa 27       	eor	r26, r26
 3c2:	f0 0d       	add	r31, r0
 3c4:	b1 1d       	adc	r27, r1
 3c6:	aa 1f       	adc	r26, r26
 3c8:	64 9f       	mul	r22, r20
 3ca:	66 27       	eor	r22, r22
 3cc:	b0 0d       	add	r27, r0
 3ce:	a1 1d       	adc	r26, r1
 3d0:	66 1f       	adc	r22, r22
 3d2:	82 9f       	mul	r24, r18
 3d4:	22 27       	eor	r18, r18
 3d6:	b0 0d       	add	r27, r0
 3d8:	a1 1d       	adc	r26, r1
 3da:	62 1f       	adc	r22, r18
 3dc:	73 9f       	mul	r23, r19
 3de:	b0 0d       	add	r27, r0
 3e0:	a1 1d       	adc	r26, r1
 3e2:	62 1f       	adc	r22, r18
 3e4:	83 9f       	mul	r24, r19
 3e6:	a0 0d       	add	r26, r0
 3e8:	61 1d       	adc	r22, r1
 3ea:	22 1f       	adc	r18, r18
 3ec:	74 9f       	mul	r23, r20
 3ee:	33 27       	eor	r19, r19
 3f0:	a0 0d       	add	r26, r0
 3f2:	61 1d       	adc	r22, r1
 3f4:	23 1f       	adc	r18, r19
 3f6:	84 9f       	mul	r24, r20
 3f8:	60 0d       	add	r22, r0
 3fa:	21 1d       	adc	r18, r1
 3fc:	82 2f       	mov	r24, r18
 3fe:	76 2f       	mov	r23, r22
 400:	6a 2f       	mov	r22, r26
 402:	11 24       	eor	r1, r1
 404:	9f 57       	subi	r25, 0x7F	; 127
 406:	50 40       	sbci	r21, 0x00	; 0
 408:	9a f0       	brmi	.+38     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 40a:	f1 f0       	breq	.+60     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 40c:	88 23       	and	r24, r24
 40e:	4a f0       	brmi	.+18     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 410:	ee 0f       	add	r30, r30
 412:	ff 1f       	adc	r31, r31
 414:	bb 1f       	adc	r27, r27
 416:	66 1f       	adc	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	88 1f       	adc	r24, r24
 41c:	91 50       	subi	r25, 0x01	; 1
 41e:	50 40       	sbci	r21, 0x00	; 0
 420:	a9 f7       	brne	.-22     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 422:	9e 3f       	cpi	r25, 0xFE	; 254
 424:	51 05       	cpc	r21, r1
 426:	80 f0       	brcs	.+32     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 428:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_inf>
 42c:	0c 94 b3 01 	jmp	0x366	; 0x366 <__fp_szero>
 430:	5f 3f       	cpi	r21, 0xFF	; 255
 432:	e4 f3       	brlt	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	98 3e       	cpi	r25, 0xE8	; 232
 436:	d4 f3       	brlt	.-12     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 438:	86 95       	lsr	r24
 43a:	77 95       	ror	r23
 43c:	67 95       	ror	r22
 43e:	b7 95       	ror	r27
 440:	f7 95       	ror	r31
 442:	e7 95       	ror	r30
 444:	9f 5f       	subi	r25, 0xFF	; 255
 446:	c1 f7       	brne	.-16     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 448:	fe 2b       	or	r31, r30
 44a:	88 0f       	add	r24, r24
 44c:	91 1d       	adc	r25, r1
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	97 f9       	bld	r25, 7
 454:	08 95       	ret

00000456 <__fp_inf>:
 456:	97 f9       	bld	r25, 7
 458:	9f 67       	ori	r25, 0x7F	; 127
 45a:	80 e8       	ldi	r24, 0x80	; 128
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	08 95       	ret

00000462 <__fp_nan>:
 462:	9f ef       	ldi	r25, 0xFF	; 255
 464:	80 ec       	ldi	r24, 0xC0	; 192
 466:	08 95       	ret

00000468 <__fp_pscA>:
 468:	00 24       	eor	r0, r0
 46a:	0a 94       	dec	r0
 46c:	16 16       	cp	r1, r22
 46e:	17 06       	cpc	r1, r23
 470:	18 06       	cpc	r1, r24
 472:	09 06       	cpc	r0, r25
 474:	08 95       	ret

00000476 <__fp_pscB>:
 476:	00 24       	eor	r0, r0
 478:	0a 94       	dec	r0
 47a:	12 16       	cp	r1, r18
 47c:	13 06       	cpc	r1, r19
 47e:	14 06       	cpc	r1, r20
 480:	05 06       	cpc	r0, r21
 482:	08 95       	ret

00000484 <__fp_round>:
 484:	09 2e       	mov	r0, r25
 486:	03 94       	inc	r0
 488:	00 0c       	add	r0, r0
 48a:	11 f4       	brne	.+4      	; 0x490 <__fp_round+0xc>
 48c:	88 23       	and	r24, r24
 48e:	52 f0       	brmi	.+20     	; 0x4a4 <__fp_round+0x20>
 490:	bb 0f       	add	r27, r27
 492:	40 f4       	brcc	.+16     	; 0x4a4 <__fp_round+0x20>
 494:	bf 2b       	or	r27, r31
 496:	11 f4       	brne	.+4      	; 0x49c <__fp_round+0x18>
 498:	60 ff       	sbrs	r22, 0
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__fp_round+0x20>
 49c:	6f 5f       	subi	r22, 0xFF	; 255
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	8f 4f       	sbci	r24, 0xFF	; 255
 4a2:	9f 4f       	sbci	r25, 0xFF	; 255
 4a4:	08 95       	ret

000004a6 <strlen>:
 4a6:	fc 01       	movw	r30, r24
 4a8:	01 90       	ld	r0, Z+
 4aa:	00 20       	and	r0, r0
 4ac:	e9 f7       	brne	.-6      	; 0x4a8 <strlen+0x2>
 4ae:	80 95       	com	r24
 4b0:	90 95       	com	r25
 4b2:	8e 0f       	add	r24, r30
 4b4:	9f 1f       	adc	r25, r31
 4b6:	08 95       	ret

000004b8 <_exit>:
 4b8:	f8 94       	cli

000004ba <__stop_program>:
 4ba:	ff cf       	rjmp	.-2      	; 0x4ba <__stop_program>
