
PowerOnOff.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072f  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  000008cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000282  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001576  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include "avr/delay.h"

int main(void)
{
	DDRD = (1<< PD5) | (1 << PD6);
  80:	80 e6       	ldi	r24, 0x60	; 96
  82:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  84:	1b b8       	out	0x0b, r1	; 11
	
	PORTD |= (1 << PD4); // Pull up Res. PD4
  86:	5c 9a       	sbi	0x0b, 4	; 11
	

	PORTD |= (1 << PD5); // switch permanent on
  88:	5d 9a       	sbi	0x0b, 5	; 11
			low = ((PIND & (1 << PD4)) == 0);

			_delay_ms(1000);
			int tmp = ((PIND & (1 << PD4)) == 0);
			
			if (low > 0 && tmp > 0)
  8a:	21 e0       	ldi	r18, 0x01	; 1
		int low = 0;
	
		/* Replace with your application code */
		while (1)
		{
			low = ((PIND & (1 << PD4)) == 0);
  8c:	99 b1       	in	r25, 0x09	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	3f ef       	ldi	r19, 0xFF	; 255
  90:	43 ed       	ldi	r20, 0xD3	; 211
  92:	80 e3       	ldi	r24, 0x30	; 48
  94:	31 50       	subi	r19, 0x01	; 1
  96:	40 40       	sbci	r20, 0x00	; 0
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x14>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x1e>
  9e:	00 00       	nop

			_delay_ms(1000);
			int tmp = ((PIND & (1 << PD4)) == 0);
  a0:	89 b1       	in	r24, 0x09	; 9
			
			if (low > 0 && tmp > 0)
  a2:	92 95       	swap	r25
  a4:	91 70       	andi	r25, 0x01	; 1
  a6:	92 17       	cp	r25, r18
  a8:	89 f3       	breq	.-30     	; 0x8c <main+0xc>
  aa:	82 95       	swap	r24
  ac:	81 70       	andi	r24, 0x01	; 1
  ae:	82 17       	cp	r24, r18
  b0:	69 f3       	breq	.-38     	; 0x8c <main+0xc>
			{
				PORTD &= ~(1<<PD5); // switch off
  b2:	5d 98       	cbi	0x0b, 5	; 11
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x34>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
