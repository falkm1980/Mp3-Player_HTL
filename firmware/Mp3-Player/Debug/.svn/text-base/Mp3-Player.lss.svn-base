
Mp3-Player.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00005394  00005428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005394  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  0000542c  2**0
                  ALLOC
  3 .stab         00002148  00000000  00000000  0000542c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000772  00000000  00000000  00007574  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00007ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003060  00000000  00000000  00007ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c11  00000000  00000000  0000af48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019ed  00000000  00000000  0000bb59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a10  00000000  00000000  0000d548  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b0  00000000  00000000  0000df58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017fe  00000000  00000000  0000e708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000ff06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d4 e0       	ldi	r29, 0x04	; 4
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e9       	ldi	r30, 0x94	; 148
      7c:	f3 e5       	ldi	r31, 0x53	; 83
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 30       	cpi	r26, 0x04	; 4
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e0       	ldi	r26, 0x04	; 4
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 30       	cpi	r26, 0x09	; 9
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 11 1a 	call	0x3422	; 0x3422 <main>
      9e:	0c 94 c8 29 	jmp	0x5390	; 0x5390 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <_delayFourCycles+0x6>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	9a 83       	std	Y+2, r25	; 0x02
      b2:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )    
      b4:	89 81       	ldd	r24, Y+1	; 0x01
      b6:	9a 81       	ldd	r25, Y+2	; 0x02
      b8:	00 97       	sbiw	r24, 0x00	; 0
      ba:	11 f4       	brne	.+4      	; 0xc0 <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
      bc:	00 c0       	rjmp	.+0      	; 0xbe <_delayFourCycles+0x18>
      be:	06 c0       	rjmp	.+12     	; 0xcc <_delayFourCycles+0x26>
    else
        __asm__ __volatile__ (
      c0:	89 81       	ldd	r24, Y+1	; 0x01
      c2:	9a 81       	ldd	r25, Y+2	; 0x02
      c4:	01 97       	sbiw	r24, 0x01	; 1
      c6:	f1 f7       	brne	.-4      	; 0xc4 <_delayFourCycles+0x1e>
      c8:	9a 83       	std	Y+2, r25	; 0x02
      ca:	89 83       	std	Y+1, r24	; 0x01
    	    "1: sbiw %0,1" "\n\t"                  
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
}
      cc:	0f 90       	pop	r0
      ce:	0f 90       	pop	r0
      d0:	df 91       	pop	r29
      d2:	cf 91       	pop	r28
      d4:	08 95       	ret

000000d6 <toggle_e>:


#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
    lcd_e_high();
      de:	88 e2       	ldi	r24, 0x28	; 40
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	28 e2       	ldi	r18, 0x28	; 40
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	f9 01       	movw	r30, r18
      e8:	20 81       	ld	r18, Z
      ea:	20 61       	ori	r18, 0x10	; 16
      ec:	fc 01       	movw	r30, r24
      ee:	20 83       	st	Z, r18
    lcd_e_delay();
      f0:	00 c0       	rjmp	.+0      	; 0xf2 <toggle_e+0x1c>
    lcd_e_low();
      f2:	88 e2       	ldi	r24, 0x28	; 40
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	28 e2       	ldi	r18, 0x28	; 40
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	f9 01       	movw	r30, r18
      fc:	20 81       	ld	r18, Z
      fe:	2f 7e       	andi	r18, 0xEF	; 239
     100:	fc 01       	movw	r30, r24
     102:	20 83       	st	Z, r18
}
     104:	df 91       	pop	r29
     106:	cf 91       	pop	r28
     108:	08 95       	ret

0000010a <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	00 d0       	rcall	.+0      	; 0x110 <lcd_write+0x6>
     110:	0f 92       	push	r0
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	8a 83       	std	Y+2, r24	; 0x02
     118:	6b 83       	std	Y+3, r22	; 0x03
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
     11a:	8b 81       	ldd	r24, Y+3	; 0x03
     11c:	88 23       	and	r24, r24
     11e:	51 f0       	breq	.+20     	; 0x134 <lcd_write+0x2a>
       lcd_rs_high();
     120:	88 e2       	ldi	r24, 0x28	; 40
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	28 e2       	ldi	r18, 0x28	; 40
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	f9 01       	movw	r30, r18
     12a:	20 81       	ld	r18, Z
     12c:	20 62       	ori	r18, 0x20	; 32
     12e:	fc 01       	movw	r30, r24
     130:	20 83       	st	Z, r18
     132:	09 c0       	rjmp	.+18     	; 0x146 <lcd_write+0x3c>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     134:	88 e2       	ldi	r24, 0x28	; 40
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	28 e2       	ldi	r18, 0x28	; 40
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	f9 01       	movw	r30, r18
     13e:	20 81       	ld	r18, Z
     140:	2f 7d       	andi	r18, 0xDF	; 223
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
    }
    lcd_rw_low();
     146:	8b e2       	ldi	r24, 0x2B	; 43
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	2b e2       	ldi	r18, 0x2B	; 43
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	20 81       	ld	r18, Z
     152:	2f 7e       	andi	r18, 0xEF	; 239
     154:	fc 01       	movw	r30, r24
     156:	20 83       	st	Z, r18

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
     158:	87 e2       	ldi	r24, 0x27	; 39
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	27 e2       	ldi	r18, 0x27	; 39
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	f9 01       	movw	r30, r18
     162:	20 81       	ld	r18, Z
     164:	2f 60       	ori	r18, 0x0F	; 15
     166:	fc 01       	movw	r30, r24
     168:	20 83       	st	Z, r18

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
     16a:	88 e2       	ldi	r24, 0x28	; 40
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	fc 01       	movw	r30, r24
     170:	80 81       	ld	r24, Z
     172:	80 7f       	andi	r24, 0xF0	; 240
     174:	89 83       	std	Y+1, r24	; 0x01
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
     176:	88 e2       	ldi	r24, 0x28	; 40
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	2a 81       	ldd	r18, Y+2	; 0x02
     17c:	22 95       	swap	r18
     17e:	2f 70       	andi	r18, 0x0F	; 15
     180:	32 2f       	mov	r19, r18
     182:	29 81       	ldd	r18, Y+1	; 0x01
     184:	23 2b       	or	r18, r19
     186:	fc 01       	movw	r30, r24
     188:	20 83       	st	Z, r18
        lcd_e_toggle();
     18a:	0e 94 6b 00 	call	0xd6	; 0xd6 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
     18e:	88 e2       	ldi	r24, 0x28	; 40
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	2a 81       	ldd	r18, Y+2	; 0x02
     194:	32 2f       	mov	r19, r18
     196:	3f 70       	andi	r19, 0x0F	; 15
     198:	29 81       	ldd	r18, Y+1	; 0x01
     19a:	23 2b       	or	r18, r19
     19c:	fc 01       	movw	r30, r24
     19e:	20 83       	st	Z, r18
        lcd_e_toggle();
     1a0:	0e 94 6b 00 	call	0xd6	; 0xd6 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
     1a4:	88 e2       	ldi	r24, 0x28	; 40
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	29 81       	ldd	r18, Y+1	; 0x01
     1aa:	2f 60       	ori	r18, 0x0F	; 15
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 83       	st	Z, r18
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <lcd_read>:
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	00 d0       	rcall	.+0      	; 0x1c2 <lcd_read+0x6>
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    
    
    if (rs)
     1c8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ca:	88 23       	and	r24, r24
     1cc:	51 f0       	breq	.+20     	; 0x1e2 <lcd_read+0x26>
        lcd_rs_high();                       /* RS=1: read data      */
     1ce:	88 e2       	ldi	r24, 0x28	; 40
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	28 e2       	ldi	r18, 0x28	; 40
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	f9 01       	movw	r30, r18
     1d8:	20 81       	ld	r18, Z
     1da:	20 62       	ori	r18, 0x20	; 32
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
     1e0:	09 c0       	rjmp	.+18     	; 0x1f4 <lcd_read+0x38>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     1e2:	88 e2       	ldi	r24, 0x28	; 40
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	28 e2       	ldi	r18, 0x28	; 40
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	f9 01       	movw	r30, r18
     1ec:	20 81       	ld	r18, Z
     1ee:	2f 7d       	andi	r18, 0xDF	; 223
     1f0:	fc 01       	movw	r30, r24
     1f2:	20 83       	st	Z, r18
    lcd_rw_high();                           /* RW=1  read mode      */
     1f4:	8b e2       	ldi	r24, 0x2B	; 43
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	2b e2       	ldi	r18, 0x2B	; 43
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	f9 01       	movw	r30, r18
     1fe:	20 81       	ld	r18, Z
     200:	20 61       	ori	r18, 0x10	; 16
     202:	fc 01       	movw	r30, r24
     204:	20 83       	st	Z, r18
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
     206:	87 e2       	ldi	r24, 0x27	; 39
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	27 e2       	ldi	r18, 0x27	; 39
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	f9 01       	movw	r30, r18
     210:	20 81       	ld	r18, Z
     212:	20 7f       	andi	r18, 0xF0	; 240
     214:	fc 01       	movw	r30, r24
     216:	20 83       	st	Z, r18
        
        lcd_e_high();
     218:	88 e2       	ldi	r24, 0x28	; 40
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	28 e2       	ldi	r18, 0x28	; 40
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	f9 01       	movw	r30, r18
     222:	20 81       	ld	r18, Z
     224:	20 61       	ori	r18, 0x10	; 16
     226:	fc 01       	movw	r30, r24
     228:	20 83       	st	Z, r18
        lcd_e_delay();        
     22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_read+0x70>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
     22c:	86 e2       	ldi	r24, 0x26	; 38
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	fc 01       	movw	r30, r24
     232:	80 81       	ld	r24, Z
     234:	82 95       	swap	r24
     236:	80 7f       	andi	r24, 0xF0	; 240
     238:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
     23a:	88 e2       	ldi	r24, 0x28	; 40
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	28 e2       	ldi	r18, 0x28	; 40
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	f9 01       	movw	r30, r18
     244:	20 81       	ld	r18, Z
     246:	2f 7e       	andi	r18, 0xEF	; 239
     248:	fc 01       	movw	r30, r24
     24a:	20 83       	st	Z, r18
        
        lcd_e_delay();                       /* Enable 500ns low       */
     24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_read+0x92>
        
        lcd_e_high();
     24e:	88 e2       	ldi	r24, 0x28	; 40
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	28 e2       	ldi	r18, 0x28	; 40
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	f9 01       	movw	r30, r18
     258:	20 81       	ld	r18, Z
     25a:	20 61       	ori	r18, 0x10	; 16
     25c:	fc 01       	movw	r30, r24
     25e:	20 83       	st	Z, r18
        lcd_e_delay();
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_read+0xa6>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
     262:	86 e2       	ldi	r24, 0x26	; 38
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	fc 01       	movw	r30, r24
     268:	80 81       	ld	r24, Z
     26a:	98 2f       	mov	r25, r24
     26c:	9f 70       	andi	r25, 0x0F	; 15
     26e:	89 81       	ldd	r24, Y+1	; 0x01
     270:	89 2b       	or	r24, r25
     272:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
     274:	88 e2       	ldi	r24, 0x28	; 40
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	28 e2       	ldi	r18, 0x28	; 40
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	f9 01       	movw	r30, r18
     27e:	20 81       	ld	r18, Z
     280:	2f 7e       	andi	r18, 0xEF	; 239
     282:	fc 01       	movw	r30, r24
     284:	20 83       	st	Z, r18
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
     286:	89 81       	ldd	r24, Y+1	; 0x01
}
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	df 91       	pop	r29
     28e:	cf 91       	pop	r28
     290:	08 95       	ret

00000292 <lcd_waitbusy>:
/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
	delay(500);
     29a:	80 e4       	ldi	r24, 0x40	; 64
     29c:	9f e1       	ldi	r25, 0x1F	; 31
     29e:	0e 94 53 00 	call	0xa6	; 0xa6 <_delayFourCycles>
	return 0;
     2a2:	80 e0       	ldi	r24, 0x00	; 0
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
    
}/* lcd_waitbusy */
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <lcd_newline>:
/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	0f 92       	push	r0
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	89 83       	std	Y+1, r24	; 0x01

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     2b8:	89 81       	ldd	r24, Y+1	; 0x01
     2ba:	80 34       	cpi	r24, 0x40	; 64
     2bc:	10 f4       	brcc	.+4      	; 0x2c2 <lcd_newline+0x18>
        addressCounter = LCD_START_LINE2;
     2be:	10 e4       	ldi	r17, 0x40	; 64
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <lcd_newline+0x1a>
    else
        addressCounter = LCD_START_LINE1;
     2c2:	10 e0       	ldi	r17, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     2c4:	81 2f       	mov	r24, r17
     2c6:	80 58       	subi	r24, 0x80	; 128
     2c8:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_command>

}/* lcd_newline */
     2cc:	0f 90       	pop	r0
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	08 95       	ret

000002d6 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	0f 92       	push	r0
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
     2e2:	0e 94 49 01 	call	0x292	; 0x292 <lcd_waitbusy>
    lcd_write(cmd,0);
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_write>
}
     2ee:	0f 90       	pop	r0
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	0f 92       	push	r0
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
     300:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
     302:	0e 94 49 01 	call	0x292	; 0x292 <lcd_waitbusy>
    lcd_write(data,1);
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	61 e0       	ldi	r22, 0x01	; 1
     30a:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_write>
}
     30e:	0f 90       	pop	r0
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <lcd_gotoxy>:
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	00 d0       	rcall	.+0      	; 0x31c <lcd_gotoxy+0x6>
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	89 83       	std	Y+1, r24	; 0x01
     322:	6a 83       	std	Y+2, r22	; 0x02
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     324:	8a 81       	ldd	r24, Y+2	; 0x02
     326:	88 23       	and	r24, r24
     328:	29 f4       	brne	.+10     	; 0x334 <lcd_gotoxy+0x1e>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	80 58       	subi	r24, 0x80	; 128
     32e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_command>
     332:	04 c0       	rjmp	.+8      	; 0x33c <lcd_gotoxy+0x26>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	80 54       	subi	r24, 0x40	; 64
     338:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_command>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <lcd_getxy>:


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
    return lcd_waitbusy();
     34e:	0e 94 49 01 	call	0x292	; 0x292 <lcd_waitbusy>
     352:	88 2f       	mov	r24, r24
     354:	90 e0       	ldi	r25, 0x00	; 0
}
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <lcd_clrscr>:

/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_CLR);
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_command>
}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <lcd_home>:

/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_HOME);
     378:	82 e0       	ldi	r24, 0x02	; 2
     37a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_command>
}
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	00 d0       	rcall	.+0      	; 0x38a <lcd_putc+0x6>
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     390:	0e 94 49 01 	call	0x292	; 0x292 <lcd_waitbusy>
     394:	89 83       	std	Y+1, r24	; 0x01
    if (c=='\n')
     396:	8a 81       	ldd	r24, Y+2	; 0x02
     398:	8a 30       	cpi	r24, 0x0A	; 10
     39a:	21 f4       	brne	.+8      	; 0x3a4 <lcd_putc+0x20>
    {
        lcd_newline(pos);
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_newline>
     3a2:	04 c0       	rjmp	.+8      	; 0x3ac <lcd_putc+0x28>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     3a4:	8a 81       	ldd	r24, Y+2	; 0x02
     3a6:	61 e0       	ldi	r22, 0x01	; 1
     3a8:	0e 94 85 00 	call	0x10a	; 0x10a <lcd_write>
    }

}/* lcd_putc */
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	08 95       	ret

000003b6 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	00 d0       	rcall	.+0      	; 0x3be <lcd_puts+0x8>
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	9a 83       	std	Y+2, r25	; 0x02
     3c4:	89 83       	std	Y+1, r24	; 0x01
    register char c;

    while ( (c = *s++) ) {
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <lcd_puts+0x18>
        lcd_putc(c);
     3c8:	81 2f       	mov	r24, r17
     3ca:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	9a 81       	ldd	r25, Y+2	; 0x02
     3d2:	fc 01       	movw	r30, r24
     3d4:	10 81       	ld	r17, Z
     3d6:	21 e0       	ldi	r18, 0x01	; 1
     3d8:	11 23       	and	r17, r17
     3da:	09 f4       	brne	.+2      	; 0x3de <lcd_puts+0x28>
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	9a 81       	ldd	r25, Y+2	; 0x02
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	9a 83       	std	Y+2, r25	; 0x02
     3e6:	89 83       	std	Y+1, r24	; 0x01
     3e8:	22 23       	and	r18, r18
     3ea:	71 f7       	brne	.-36     	; 0x3c8 <lcd_puts+0x12>
        lcd_putc(c);
    }

}/* lcd_puts */
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	08 95       	ret

000003f8 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	00 d0       	rcall	.+0      	; 0x400 <lcd_puts_p+0x8>
     400:	00 d0       	rcall	.+0      	; 0x402 <lcd_puts_p+0xa>
     402:	0f 92       	push	r0
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
     408:	9d 83       	std	Y+5, r25	; 0x05
     40a:	8c 83       	std	Y+4, r24	; 0x04
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     40c:	03 c0       	rjmp	.+6      	; 0x414 <lcd_puts_p+0x1c>
        lcd_putc(c);
     40e:	81 2f       	mov	r24, r17
     410:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     414:	8c 81       	ldd	r24, Y+4	; 0x04
     416:	9d 81       	ldd	r25, Y+5	; 0x05
     418:	9a 83       	std	Y+2, r25	; 0x02
     41a:	89 83       	std	Y+1, r24	; 0x01
     41c:	8c 81       	ldd	r24, Y+4	; 0x04
     41e:	9d 81       	ldd	r25, Y+5	; 0x05
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	9d 83       	std	Y+5, r25	; 0x05
     424:	8c 83       	std	Y+4, r24	; 0x04
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	9a 81       	ldd	r25, Y+2	; 0x02
     42a:	fc 01       	movw	r30, r24
     42c:	14 91       	lpm	r17, Z
     42e:	1b 83       	std	Y+3, r17	; 0x03
     430:	8b 81       	ldd	r24, Y+3	; 0x03
     432:	18 2f       	mov	r17, r24
     434:	11 23       	and	r17, r17
     436:	59 f7       	brne	.-42     	; 0x40e <lcd_puts_p+0x16>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	08 95       	ret

0000044a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	0f 92       	push	r0
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	89 83       	std	Y+1, r24	; 0x01
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
     456:	87 e2       	ldi	r24, 0x27	; 39
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	27 e2       	ldi	r18, 0x27	; 39
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	f9 01       	movw	r30, r18
     460:	20 81       	ld	r18, Z
     462:	2f 60       	ori	r18, 0x0F	; 15
     464:	fc 01       	movw	r30, r24
     466:	20 83       	st	Z, r18
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     468:	87 e2       	ldi	r24, 0x27	; 39
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	27 e2       	ldi	r18, 0x27	; 39
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	f9 01       	movw	r30, r18
     472:	20 81       	ld	r18, Z
     474:	20 62       	ori	r18, 0x20	; 32
     476:	fc 01       	movw	r30, r24
     478:	20 83       	st	Z, r18
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     47a:	8a e2       	ldi	r24, 0x2A	; 42
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	2a e2       	ldi	r18, 0x2A	; 42
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	f9 01       	movw	r30, r18
     484:	20 81       	ld	r18, Z
     486:	20 61       	ori	r18, 0x10	; 16
     488:	fc 01       	movw	r30, r24
     48a:	20 83       	st	Z, r18
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     48c:	87 e2       	ldi	r24, 0x27	; 39
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	27 e2       	ldi	r18, 0x27	; 39
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	f9 01       	movw	r30, r18
     496:	20 81       	ld	r18, Z
     498:	20 61       	ori	r18, 0x10	; 16
     49a:	fc 01       	movw	r30, r24
     49c:	20 83       	st	Z, r18
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	98 ee       	ldi	r25, 0xE8	; 232
     4a2:	0e 94 53 00 	call	0xa6	; 0xa6 <_delayFourCycles>
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     4a6:	88 e2       	ldi	r24, 0x28	; 40
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	28 e2       	ldi	r18, 0x28	; 40
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	f9 01       	movw	r30, r18
     4b0:	20 81       	ld	r18, Z
     4b2:	22 60       	ori	r18, 0x02	; 2
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     4b8:	88 e2       	ldi	r24, 0x28	; 40
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	28 e2       	ldi	r18, 0x28	; 40
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	f9 01       	movw	r30, r18
     4c2:	20 81       	ld	r18, Z
     4c4:	21 60       	ori	r18, 0x01	; 1
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
    lcd_e_toggle();
     4ca:	0e 94 6b 00 	call	0xd6	; 0xd6 <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	98 e3       	ldi	r25, 0x38	; 56
     4d2:	0e 94 53 00 	call	0xa6	; 0xa6 <_delayFourCycles>
	
    /* repeat last command */ 
    lcd_e_toggle();      
     4d6:	0e 94 6b 00 	call	0xd6	; 0xd6 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	94 e0       	ldi	r25, 0x04	; 4
     4de:	0e 94 53 00 	call	0xa6	; 0xa6 <_delayFourCycles>
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     4e2:	0e 94 6b 00 	call	0xd6	; 0xd6 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	94 e0       	ldi	r25, 0x04	; 4
     4ea:	0e 94 53 00 	call	0xa6	; 0xa6 <_delayFourCycles>

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     4ee:	88 e2       	ldi	r24, 0x28	; 40
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	28 e2       	ldi	r18, 0x28	; 40
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	f9 01       	movw	r30, r18
     4f8:	20 81       	ld	r18, Z
     4fa:	2e 7f       	andi	r18, 0xFE	; 254
     4fc:	fc 01       	movw	r30, r24
     4fe:	20 83       	st	Z, r18
    lcd_e_toggle();
     500:	0e 94 6b 00 	call	0xd6	; 0xd6 <toggle_e>
    delay(64);           /* some displays need this additional delay */
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	94 e0       	ldi	r25, 0x04	; 4
     508:	0e 94 53 00 	call	0xa6	; 0xa6 <_delayFourCycles>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     50c:	88 e2       	ldi	r24, 0x28	; 40
     50e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     512:	88 e0       	ldi	r24, 0x08	; 8
     514:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     518:	0e 94 ae 01 	call	0x35c	; 0x35c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     51c:	86 e0       	ldi	r24, 0x06	; 6
     51e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <lcd_command>

}/* lcd_init */
     528:	0f 90       	pop	r0
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	27 97       	sbiw	r28, 0x07	; 7
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	de bf       	out	0x3e, r29	; 62
     540:	0f be       	out	0x3f, r0	; 63
     542:	cd bf       	out	0x3d, r28	; 61
     544:	8b 83       	std	Y+3, r24	; 0x03
     546:	4c 83       	std	Y+4, r20	; 0x04
     548:	5d 83       	std	Y+5, r21	; 0x05
     54a:	6e 83       	std	Y+6, r22	; 0x06
     54c:	7f 83       	std	Y+7, r23	; 0x07
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     54e:	8b 81       	ldd	r24, Y+3	; 0x03
     550:	88 23       	and	r24, r24
     552:	7c f4       	brge	.+30     	; 0x572 <send_cmd+0x42>
		cmd &= 0x7F;
     554:	8b 81       	ldd	r24, Y+3	; 0x03
     556:	8f 77       	andi	r24, 0x7F	; 127
     558:	8b 83       	std	Y+3, r24	; 0x03
		res = send_cmd(CMD55, 0);
     55a:	87 e7       	ldi	r24, 0x77	; 119
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	ba 01       	movw	r22, r20
     562:	0e 94 98 02 	call	0x530	; 0x530 <send_cmd>
     566:	8a 83       	std	Y+2, r24	; 0x02
		if (res > 1) return res;
     568:	8a 81       	ldd	r24, Y+2	; 0x02
     56a:	82 30       	cpi	r24, 0x02	; 2
     56c:	10 f0       	brcs	.+4      	; 0x572 <send_cmd+0x42>
     56e:	8a 81       	ldd	r24, Y+2	; 0x02
     570:	57 c0       	rjmp	.+174    	; 0x620 <send_cmd+0xf0>
	}

	/* Select the card */
	DESELECT();
     572:	8b e2       	ldi	r24, 0x2B	; 43
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	2b e2       	ldi	r18, 0x2B	; 43
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	20 81       	ld	r18, Z
     57e:	20 61       	ori	r18, 0x10	; 16
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
	rcv_spi();
     584:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>
	SELECT();
     588:	8b e2       	ldi	r24, 0x2B	; 43
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	2b e2       	ldi	r18, 0x2B	; 43
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	f9 01       	movw	r30, r18
     592:	20 81       	ld	r18, Z
     594:	2f 7e       	andi	r18, 0xEF	; 239
     596:	fc 01       	movw	r30, r24
     598:	20 83       	st	Z, r18
	rcv_spi();
     59a:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
     59e:	8b 81       	ldd	r24, Y+3	; 0x03
     5a0:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     5a4:	8c 81       	ldd	r24, Y+4	; 0x04
     5a6:	9d 81       	ldd	r25, Y+5	; 0x05
     5a8:	ae 81       	ldd	r26, Y+6	; 0x06
     5aa:	bf 81       	ldd	r27, Y+7	; 0x07
     5ac:	8b 2f       	mov	r24, r27
     5ae:	99 27       	eor	r25, r25
     5b0:	aa 27       	eor	r26, r26
     5b2:	bb 27       	eor	r27, r27
     5b4:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     5b8:	8c 81       	ldd	r24, Y+4	; 0x04
     5ba:	9d 81       	ldd	r25, Y+5	; 0x05
     5bc:	ae 81       	ldd	r26, Y+6	; 0x06
     5be:	bf 81       	ldd	r27, Y+7	; 0x07
     5c0:	cd 01       	movw	r24, r26
     5c2:	aa 27       	eor	r26, r26
     5c4:	bb 27       	eor	r27, r27
     5c6:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     5ca:	8c 81       	ldd	r24, Y+4	; 0x04
     5cc:	9d 81       	ldd	r25, Y+5	; 0x05
     5ce:	ae 81       	ldd	r26, Y+6	; 0x06
     5d0:	bf 81       	ldd	r27, Y+7	; 0x07
     5d2:	89 2f       	mov	r24, r25
     5d4:	9a 2f       	mov	r25, r26
     5d6:	ab 2f       	mov	r26, r27
     5d8:	bb 27       	eor	r27, r27
     5da:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     5de:	8c 81       	ldd	r24, Y+4	; 0x04
     5e0:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	89 83       	std	Y+1, r24	; 0x01
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	11 f4       	brne	.+4      	; 0x5f2 <send_cmd+0xc2>
     5ee:	85 e9       	ldi	r24, 0x95	; 149
     5f0:	89 83       	std	Y+1, r24	; 0x01
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     5f2:	8b 81       	ldd	r24, Y+3	; 0x03
     5f4:	88 34       	cpi	r24, 0x48	; 72
     5f6:	11 f4       	brne	.+4      	; 0x5fc <send_cmd+0xcc>
     5f8:	87 e8       	ldi	r24, 0x87	; 135
     5fa:	89 83       	std	Y+1, r24	; 0x01
	xmit_spi(n);
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
     602:	8a e0       	ldi	r24, 0x0A	; 10
     604:	89 83       	std	Y+1, r24	; 0x01
	do {
		res = rcv_spi();
     606:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>
     60a:	8a 83       	std	Y+2, r24	; 0x02
	} while ((res & 0x80) && --n);
     60c:	8a 81       	ldd	r24, Y+2	; 0x02
     60e:	88 23       	and	r24, r24
     610:	34 f4       	brge	.+12     	; 0x61e <send_cmd+0xee>
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	81 50       	subi	r24, 0x01	; 1
     616:	89 83       	std	Y+1, r24	; 0x01
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	88 23       	and	r24, r24
     61c:	a1 f7       	brne	.-24     	; 0x606 <send_cmd+0xd6>

	return res;			/* Return with the response value */
     61e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     620:	27 96       	adiw	r28, 0x07	; 7
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	29 97       	sbiw	r28, 0x09	; 9
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if _USE_WRITE
	if (CardType && MMC_SEL) disk_writep(0, 0);	/* Finalize write process if it is in progress */
     64a:	80 91 04 01 	lds	r24, 0x0104
     64e:	88 23       	and	r24, r24
     650:	89 f0       	breq	.+34     	; 0x674 <disk_initialize+0x42>
     652:	8b e2       	ldi	r24, 0x2B	; 43
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	fc 01       	movw	r30, r24
     658:	80 81       	ld	r24, Z
     65a:	88 2f       	mov	r24, r24
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	80 71       	andi	r24, 0x10	; 16
     660:	90 70       	andi	r25, 0x00	; 0
     662:	00 97       	sbiw	r24, 0x00	; 0
     664:	39 f4       	brne	.+14     	; 0x674 <disk_initialize+0x42>
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	ba 01       	movw	r22, r20
     670:	0e 94 d5 04 	call	0x9aa	; 0x9aa <disk_writep>
#endif
	init_spi();		/* Initialize ports to control MMC */
     674:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <init_spi>
	DESELECT();
     678:	8b e2       	ldi	r24, 0x2B	; 43
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	2b e2       	ldi	r18, 0x2B	; 43
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	f9 01       	movw	r30, r18
     682:	20 81       	ld	r18, Z
     684:	20 61       	ori	r18, 0x10	; 16
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */
     68a:	8a e0       	ldi	r24, 0x0A	; 10
     68c:	89 83       	std	Y+1, r24	; 0x01
     68e:	05 c0       	rjmp	.+10     	; 0x69a <disk_initialize+0x68>
     690:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	81 50       	subi	r24, 0x01	; 1
     698:	89 83       	std	Y+1, r24	; 0x01
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	88 23       	and	r24, r24
     69e:	c1 f7       	brne	.-16     	; 0x690 <disk_initialize+0x5e>

	ty = 0;
     6a0:	1b 82       	std	Y+3, r1	; 0x03
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     6a2:	80 e4       	ldi	r24, 0x40	; 64
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	ba 01       	movw	r22, r20
     6aa:	0e 94 98 02 	call	0x530	; 0x530 <send_cmd>
     6ae:	81 30       	cpi	r24, 0x01	; 1
     6b0:	09 f0       	breq	.+2      	; 0x6b4 <disk_initialize+0x82>
     6b2:	a4 c0       	rjmp	.+328    	; 0x7fc <disk_initialize+0x1ca>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
     6b4:	88 e4       	ldi	r24, 0x48	; 72
     6b6:	4a ea       	ldi	r20, 0xAA	; 170
     6b8:	51 e0       	ldi	r21, 0x01	; 1
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	0e 94 98 02 	call	0x530	; 0x530 <send_cmd>
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <disk_initialize+0x96>
     6c6:	63 c0       	rjmp	.+198    	; 0x78e <disk_initialize+0x15c>
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
     6c8:	19 82       	std	Y+1, r1	; 0x01
     6ca:	0f c0       	rjmp	.+30     	; 0x6ea <disk_initialize+0xb8>
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	08 2f       	mov	r16, r24
     6d0:	10 e0       	ldi	r17, 0x00	; 0
     6d2:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>
     6d6:	28 2f       	mov	r18, r24
     6d8:	ce 01       	movw	r24, r28
     6da:	06 96       	adiw	r24, 0x06	; 6
     6dc:	80 0f       	add	r24, r16
     6de:	91 1f       	adc	r25, r17
     6e0:	fc 01       	movw	r30, r24
     6e2:	20 83       	st	Z, r18
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	8f 5f       	subi	r24, 0xFF	; 255
     6e8:	89 83       	std	Y+1, r24	; 0x01
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	84 30       	cpi	r24, 0x04	; 4
     6ee:	70 f3       	brcs	.-36     	; 0x6cc <disk_initialize+0x9a>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
     6f0:	88 85       	ldd	r24, Y+8	; 0x08
     6f2:	81 30       	cpi	r24, 0x01	; 1
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <disk_initialize+0xc6>
     6f6:	82 c0       	rjmp	.+260    	; 0x7fc <disk_initialize+0x1ca>
     6f8:	89 85       	ldd	r24, Y+9	; 0x09
     6fa:	8a 3a       	cpi	r24, 0xAA	; 170
     6fc:	09 f0       	breq	.+2      	; 0x700 <disk_initialize+0xce>
     6fe:	7e c0       	rjmp	.+252    	; 0x7fc <disk_initialize+0x1ca>
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     700:	80 e1       	ldi	r24, 0x10	; 16
     702:	97 e2       	ldi	r25, 0x27	; 39
     704:	9d 83       	std	Y+5, r25	; 0x05
     706:	8c 83       	std	Y+4, r24	; 0x04
     708:	07 c0       	rjmp	.+14     	; 0x718 <disk_initialize+0xe6>
     70a:	0e 94 50 24 	call	0x48a0	; 0x48a0 <dly_100us>
     70e:	8c 81       	ldd	r24, Y+4	; 0x04
     710:	9d 81       	ldd	r25, Y+5	; 0x05
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	9d 83       	std	Y+5, r25	; 0x05
     716:	8c 83       	std	Y+4, r24	; 0x04
     718:	8c 81       	ldd	r24, Y+4	; 0x04
     71a:	9d 81       	ldd	r25, Y+5	; 0x05
     71c:	00 97       	sbiw	r24, 0x00	; 0
     71e:	49 f0       	breq	.+18     	; 0x732 <disk_initialize+0x100>
     720:	89 ee       	ldi	r24, 0xE9	; 233
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	70 e4       	ldi	r23, 0x40	; 64
     72a:	0e 94 98 02 	call	0x530	; 0x530 <send_cmd>
     72e:	88 23       	and	r24, r24
     730:	61 f7       	brne	.-40     	; 0x70a <disk_initialize+0xd8>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     732:	8c 81       	ldd	r24, Y+4	; 0x04
     734:	9d 81       	ldd	r25, Y+5	; 0x05
     736:	00 97       	sbiw	r24, 0x00	; 0
     738:	09 f4       	brne	.+2      	; 0x73c <disk_initialize+0x10a>
     73a:	60 c0       	rjmp	.+192    	; 0x7fc <disk_initialize+0x1ca>
     73c:	8a e7       	ldi	r24, 0x7A	; 122
     73e:	40 e0       	ldi	r20, 0x00	; 0
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	ba 01       	movw	r22, r20
     744:	0e 94 98 02 	call	0x530	; 0x530 <send_cmd>
     748:	88 23       	and	r24, r24
     74a:	09 f0       	breq	.+2      	; 0x74e <disk_initialize+0x11c>
     74c:	57 c0       	rjmp	.+174    	; 0x7fc <disk_initialize+0x1ca>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
     74e:	19 82       	std	Y+1, r1	; 0x01
     750:	0f c0       	rjmp	.+30     	; 0x770 <disk_initialize+0x13e>
     752:	89 81       	ldd	r24, Y+1	; 0x01
     754:	08 2f       	mov	r16, r24
     756:	10 e0       	ldi	r17, 0x00	; 0
     758:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>
     75c:	28 2f       	mov	r18, r24
     75e:	ce 01       	movw	r24, r28
     760:	06 96       	adiw	r24, 0x06	; 6
     762:	80 0f       	add	r24, r16
     764:	91 1f       	adc	r25, r17
     766:	fc 01       	movw	r30, r24
     768:	20 83       	st	Z, r18
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	8f 5f       	subi	r24, 0xFF	; 255
     76e:	89 83       	std	Y+1, r24	; 0x01
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	84 30       	cpi	r24, 0x04	; 4
     774:	70 f3       	brcs	.-36     	; 0x752 <disk_initialize+0x120>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
     776:	8e 81       	ldd	r24, Y+6	; 0x06
     778:	88 2f       	mov	r24, r24
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	80 74       	andi	r24, 0x40	; 64
     77e:	90 70       	andi	r25, 0x00	; 0
     780:	00 97       	sbiw	r24, 0x00	; 0
     782:	11 f0       	breq	.+4      	; 0x788 <disk_initialize+0x156>
     784:	8c e0       	ldi	r24, 0x0C	; 12
     786:	01 c0       	rjmp	.+2      	; 0x78a <disk_initialize+0x158>
     788:	84 e0       	ldi	r24, 0x04	; 4
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	37 c0       	rjmp	.+110    	; 0x7fc <disk_initialize+0x1ca>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     78e:	89 ee       	ldi	r24, 0xE9	; 233
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	ba 01       	movw	r22, r20
     796:	0e 94 98 02 	call	0x530	; 0x530 <send_cmd>
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f4       	brcc	.+10     	; 0x7a8 <disk_initialize+0x176>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	8b 83       	std	Y+3, r24	; 0x03
     7a2:	89 ee       	ldi	r24, 0xE9	; 233
     7a4:	8a 83       	std	Y+2, r24	; 0x02
     7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <disk_initialize+0x17e>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	8b 83       	std	Y+3, r24	; 0x03
     7ac:	81 e4       	ldi	r24, 0x41	; 65
     7ae:	8a 83       	std	Y+2, r24	; 0x02
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
     7b0:	80 e1       	ldi	r24, 0x10	; 16
     7b2:	97 e2       	ldi	r25, 0x27	; 39
     7b4:	9d 83       	std	Y+5, r25	; 0x05
     7b6:	8c 83       	std	Y+4, r24	; 0x04
     7b8:	07 c0       	rjmp	.+14     	; 0x7c8 <disk_initialize+0x196>
     7ba:	0e 94 50 24 	call	0x48a0	; 0x48a0 <dly_100us>
     7be:	8c 81       	ldd	r24, Y+4	; 0x04
     7c0:	9d 81       	ldd	r25, Y+5	; 0x05
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	9d 83       	std	Y+5, r25	; 0x05
     7c6:	8c 83       	std	Y+4, r24	; 0x04
     7c8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ca:	9d 81       	ldd	r25, Y+5	; 0x05
     7cc:	00 97       	sbiw	r24, 0x00	; 0
     7ce:	41 f0       	breq	.+16     	; 0x7e0 <disk_initialize+0x1ae>
     7d0:	8a 81       	ldd	r24, Y+2	; 0x02
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	ba 01       	movw	r22, r20
     7d8:	0e 94 98 02 	call	0x530	; 0x530 <send_cmd>
     7dc:	88 23       	and	r24, r24
     7de:	69 f7       	brne	.-38     	; 0x7ba <disk_initialize+0x188>
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
     7e0:	8c 81       	ldd	r24, Y+4	; 0x04
     7e2:	9d 81       	ldd	r25, Y+5	; 0x05
     7e4:	00 97       	sbiw	r24, 0x00	; 0
     7e6:	49 f0       	breq	.+18     	; 0x7fa <disk_initialize+0x1c8>
     7e8:	80 e5       	ldi	r24, 0x50	; 80
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	52 e0       	ldi	r21, 0x02	; 2
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	0e 94 98 02 	call	0x530	; 0x530 <send_cmd>
     7f6:	88 23       	and	r24, r24
     7f8:	09 f0       	breq	.+2      	; 0x7fc <disk_initialize+0x1ca>
				ty = 0;
     7fa:	1b 82       	std	Y+3, r1	; 0x03
		}
	}
	CardType = ty;
     7fc:	8b 81       	ldd	r24, Y+3	; 0x03
     7fe:	80 93 04 01 	sts	0x0104, r24
	DESELECT();
     802:	8b e2       	ldi	r24, 0x2B	; 43
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	2b e2       	ldi	r18, 0x2B	; 43
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	f9 01       	movw	r30, r18
     80c:	20 81       	ld	r18, Z
     80e:	20 61       	ori	r18, 0x10	; 16
     810:	fc 01       	movw	r30, r24
     812:	20 83       	st	Z, r18
	rcv_spi();
     814:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>

	return ty ? 0 : STA_NOINIT;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	9b 81       	ldd	r25, Y+3	; 0x03
     81c:	99 23       	and	r25, r25
     81e:	09 f0       	breq	.+2      	; 0x822 <disk_initialize+0x1f0>
     820:	80 e0       	ldi	r24, 0x00	; 0
}
     822:	29 96       	adiw	r28, 0x09	; 9
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	08 95       	ret

00000838 <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	2e 97       	sbiw	r28, 0x0e	; 14
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	9e 83       	std	Y+6, r25	; 0x06
     852:	8d 83       	std	Y+5, r24	; 0x05
     854:	4f 83       	std	Y+7, r20	; 0x07
     856:	58 87       	std	Y+8, r21	; 0x08
     858:	69 87       	std	Y+9, r22	; 0x09
     85a:	7a 87       	std	Y+10, r23	; 0x0a
     85c:	3c 87       	std	Y+12, r19	; 0x0c
     85e:	2b 87       	std	Y+11, r18	; 0x0b
     860:	1e 87       	std	Y+14, r17	; 0x0e
     862:	0d 87       	std	Y+13, r16	; 0x0d
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
     864:	80 91 04 01 	lds	r24, 0x0104
     868:	88 2f       	mov	r24, r24
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	88 70       	andi	r24, 0x08	; 8
     86e:	90 70       	andi	r25, 0x00	; 0
     870:	00 97       	sbiw	r24, 0x00	; 0
     872:	89 f4       	brne	.+34     	; 0x896 <disk_readp+0x5e>
     874:	8f 81       	ldd	r24, Y+7	; 0x07
     876:	98 85       	ldd	r25, Y+8	; 0x08
     878:	a9 85       	ldd	r26, Y+9	; 0x09
     87a:	ba 85       	ldd	r27, Y+10	; 0x0a
     87c:	07 2e       	mov	r0, r23
     87e:	79 e0       	ldi	r23, 0x09	; 9
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	aa 1f       	adc	r26, r26
     886:	bb 1f       	adc	r27, r27
     888:	7a 95       	dec	r23
     88a:	d1 f7       	brne	.-12     	; 0x880 <disk_readp+0x48>
     88c:	70 2d       	mov	r23, r0
     88e:	8f 83       	std	Y+7, r24	; 0x07
     890:	98 87       	std	Y+8, r25	; 0x08
     892:	a9 87       	std	Y+9, r26	; 0x09
     894:	ba 87       	std	Y+10, r27	; 0x0a

	res = RES_ERROR;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	89 83       	std	Y+1, r24	; 0x01
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
     89a:	2f 81       	ldd	r18, Y+7	; 0x07
     89c:	38 85       	ldd	r19, Y+8	; 0x08
     89e:	49 85       	ldd	r20, Y+9	; 0x09
     8a0:	5a 85       	ldd	r21, Y+10	; 0x0a
     8a2:	81 e5       	ldi	r24, 0x51	; 81
     8a4:	ba 01       	movw	r22, r20
     8a6:	a9 01       	movw	r20, r18
     8a8:	0e 94 98 02 	call	0x530	; 0x530 <send_cmd>
     8ac:	88 23       	and	r24, r24
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <disk_readp+0x7a>
     8b0:	65 c0       	rjmp	.+202    	; 0x97c <disk_readp+0x144>

		bc = 40000;
     8b2:	80 e4       	ldi	r24, 0x40	; 64
     8b4:	9c e9       	ldi	r25, 0x9C	; 156
     8b6:	9b 83       	std	Y+3, r25	; 0x03
     8b8:	8a 83       	std	Y+2, r24	; 0x02
		do {							/* Wait for data packet */
			rc = rcv_spi();
     8ba:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>
     8be:	8c 83       	std	Y+4, r24	; 0x04
		} while (rc == 0xFF && --bc);
     8c0:	8c 81       	ldd	r24, Y+4	; 0x04
     8c2:	8f 3f       	cpi	r24, 0xFF	; 255
     8c4:	49 f4       	brne	.+18     	; 0x8d8 <disk_readp+0xa0>
     8c6:	8a 81       	ldd	r24, Y+2	; 0x02
     8c8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	9b 83       	std	Y+3, r25	; 0x03
     8ce:	8a 83       	std	Y+2, r24	; 0x02
     8d0:	8a 81       	ldd	r24, Y+2	; 0x02
     8d2:	9b 81       	ldd	r25, Y+3	; 0x03
     8d4:	00 97       	sbiw	r24, 0x00	; 0
     8d6:	89 f7       	brne	.-30     	; 0x8ba <disk_readp+0x82>

		if (rc == 0xFE) {				/* A data packet arrived */
     8d8:	8c 81       	ldd	r24, Y+4	; 0x04
     8da:	8e 3f       	cpi	r24, 0xFE	; 254
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <disk_readp+0xa8>
     8de:	4e c0       	rjmp	.+156    	; 0x97c <disk_readp+0x144>
			bc = 514 - ofs - cnt;
     8e0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8e2:	9c 85       	ldd	r25, Y+12	; 0x0c
     8e4:	22 27       	eor	r18, r18
     8e6:	33 27       	eor	r19, r19
     8e8:	28 1b       	sub	r18, r24
     8ea:	39 0b       	sbc	r19, r25
     8ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     8ee:	9e 85       	ldd	r25, Y+14	; 0x0e
     8f0:	a9 01       	movw	r20, r18
     8f2:	48 1b       	sub	r20, r24
     8f4:	59 0b       	sbc	r21, r25
     8f6:	ca 01       	movw	r24, r20
     8f8:	8e 5f       	subi	r24, 0xFE	; 254
     8fa:	9d 4f       	sbci	r25, 0xFD	; 253
     8fc:	9b 83       	std	Y+3, r25	; 0x03
     8fe:	8a 83       	std	Y+2, r24	; 0x02

			/* Skip leading bytes */
			if (ofs) {
     900:	8b 85       	ldd	r24, Y+11	; 0x0b
     902:	9c 85       	ldd	r25, Y+12	; 0x0c
     904:	00 97       	sbiw	r24, 0x00	; 0
     906:	59 f0       	breq	.+22     	; 0x91e <disk_readp+0xe6>
				do rcv_spi(); while (--ofs);
     908:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>
     90c:	8b 85       	ldd	r24, Y+11	; 0x0b
     90e:	9c 85       	ldd	r25, Y+12	; 0x0c
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	9c 87       	std	Y+12, r25	; 0x0c
     914:	8b 87       	std	Y+11, r24	; 0x0b
     916:	8b 85       	ldd	r24, Y+11	; 0x0b
     918:	9c 85       	ldd	r25, Y+12	; 0x0c
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	a9 f7       	brne	.-22     	; 0x908 <disk_readp+0xd0>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
     91e:	8d 81       	ldd	r24, Y+5	; 0x05
     920:	9e 81       	ldd	r25, Y+6	; 0x06
     922:	00 97       	sbiw	r24, 0x00	; 0
     924:	b1 f0       	breq	.+44     	; 0x952 <disk_readp+0x11a>
				do {
					*buff++ = rcv_spi();
     926:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>
     92a:	28 2f       	mov	r18, r24
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	9e 81       	ldd	r25, Y+6	; 0x06
     930:	fc 01       	movw	r30, r24
     932:	20 83       	st	Z, r18
     934:	8d 81       	ldd	r24, Y+5	; 0x05
     936:	9e 81       	ldd	r25, Y+6	; 0x06
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	9e 83       	std	Y+6, r25	; 0x06
     93c:	8d 83       	std	Y+5, r24	; 0x05
				} while (--cnt);
     93e:	8d 85       	ldd	r24, Y+13	; 0x0d
     940:	9e 85       	ldd	r25, Y+14	; 0x0e
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	9e 87       	std	Y+14, r25	; 0x0e
     946:	8d 87       	std	Y+13, r24	; 0x0d
     948:	8d 85       	ldd	r24, Y+13	; 0x0d
     94a:	9e 85       	ldd	r25, Y+14	; 0x0e
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	59 f7       	brne	.-42     	; 0x926 <disk_readp+0xee>
     950:	09 c0       	rjmp	.+18     	; 0x964 <disk_readp+0x12c>
			} else {	/* Forward data to the outgoing stream (depends on the project) */
				do {
			//		FORWARD(rcv_spi());
				} while (--cnt);
     952:	8d 85       	ldd	r24, Y+13	; 0x0d
     954:	9e 85       	ldd	r25, Y+14	; 0x0e
     956:	01 97       	sbiw	r24, 0x01	; 1
     958:	9e 87       	std	Y+14, r25	; 0x0e
     95a:	8d 87       	std	Y+13, r24	; 0x0d
     95c:	8d 85       	ldd	r24, Y+13	; 0x0d
     95e:	9e 85       	ldd	r25, Y+14	; 0x0e
     960:	00 97       	sbiw	r24, 0x00	; 0
     962:	b9 f7       	brne	.-18     	; 0x952 <disk_readp+0x11a>
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
     964:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>
     968:	8a 81       	ldd	r24, Y+2	; 0x02
     96a:	9b 81       	ldd	r25, Y+3	; 0x03
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	9b 83       	std	Y+3, r25	; 0x03
     970:	8a 83       	std	Y+2, r24	; 0x02
     972:	8a 81       	ldd	r24, Y+2	; 0x02
     974:	9b 81       	ldd	r25, Y+3	; 0x03
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	a9 f7       	brne	.-22     	; 0x964 <disk_readp+0x12c>

			res = RES_OK;
     97a:	19 82       	std	Y+1, r1	; 0x01
		}
	}

	DESELECT();
     97c:	8b e2       	ldi	r24, 0x2B	; 43
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	2b e2       	ldi	r18, 0x2B	; 43
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	f9 01       	movw	r30, r18
     986:	20 81       	ld	r18, Z
     988:	20 61       	ori	r18, 0x10	; 16
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
	rcv_spi();
     98e:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>

	return res;
     992:	89 81       	ldd	r24, Y+1	; 0x01
}
     994:	2e 96       	adiw	r28, 0x0e	; 14
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	08 95       	ret

000009aa <disk_writep>:
#if _USE_WRITE
DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	cd b7       	in	r28, 0x3d	; 61
     9b0:	de b7       	in	r29, 0x3e	; 62
     9b2:	29 97       	sbiw	r28, 0x09	; 9
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	9d 83       	std	Y+5, r25	; 0x05
     9c0:	8c 83       	std	Y+4, r24	; 0x04
     9c2:	4e 83       	std	Y+6, r20	; 0x06
     9c4:	5f 83       	std	Y+7, r21	; 0x07
     9c6:	68 87       	std	Y+8, r22	; 0x08
     9c8:	79 87       	std	Y+9, r23	; 0x09
	DRESULT res;
	WORD bc;
	static WORD wc;

	res = RES_ERROR;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	89 83       	std	Y+1, r24	; 0x01

	if (buff) {		/* Send data bytes */
     9ce:	8c 81       	ldd	r24, Y+4	; 0x04
     9d0:	9d 81       	ldd	r25, Y+5	; 0x05
     9d2:	00 97       	sbiw	r24, 0x00	; 0
     9d4:	59 f1       	breq	.+86     	; 0xa2c <disk_writep+0x82>
		bc = (WORD)sa;
     9d6:	8e 81       	ldd	r24, Y+6	; 0x06
     9d8:	9f 81       	ldd	r25, Y+7	; 0x07
     9da:	9b 83       	std	Y+3, r25	; 0x03
     9dc:	8a 83       	std	Y+2, r24	; 0x02
		while (bc && wc) {		/* Send data bytes to the card */
     9de:	1a c0       	rjmp	.+52     	; 0xa14 <disk_writep+0x6a>
			xmit_spi(*buff++);
     9e0:	8c 81       	ldd	r24, Y+4	; 0x04
     9e2:	9d 81       	ldd	r25, Y+5	; 0x05
     9e4:	fc 01       	movw	r30, r24
     9e6:	20 81       	ld	r18, Z
     9e8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ea:	9d 81       	ldd	r25, Y+5	; 0x05
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	9d 83       	std	Y+5, r25	; 0x05
     9f0:	8c 83       	std	Y+4, r24	; 0x04
     9f2:	82 2f       	mov	r24, r18
     9f4:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
			wc--; bc--;
     9f8:	80 91 05 01 	lds	r24, 0x0105
     9fc:	90 91 06 01 	lds	r25, 0x0106
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	90 93 06 01 	sts	0x0106, r25
     a06:	80 93 05 01 	sts	0x0105, r24
     a0a:	8a 81       	ldd	r24, Y+2	; 0x02
     a0c:	9b 81       	ldd	r25, Y+3	; 0x03
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	9b 83       	std	Y+3, r25	; 0x03
     a12:	8a 83       	std	Y+2, r24	; 0x02

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
     a14:	8a 81       	ldd	r24, Y+2	; 0x02
     a16:	9b 81       	ldd	r25, Y+3	; 0x03
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	31 f0       	breq	.+12     	; 0xa28 <disk_writep+0x7e>
     a1c:	80 91 05 01 	lds	r24, 0x0105
     a20:	90 91 06 01 	lds	r25, 0x0106
     a24:	00 97       	sbiw	r24, 0x00	; 0
     a26:	e1 f6       	brne	.-72     	; 0x9e0 <disk_writep+0x36>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
     a28:	19 82       	std	Y+1, r1	; 0x01
     a2a:	80 c0       	rjmp	.+256    	; 0xb2c <disk_writep+0x182>
	} else {
		if (sa) {	/* Initiate sector write process */
     a2c:	8e 81       	ldd	r24, Y+6	; 0x06
     a2e:	9f 81       	ldd	r25, Y+7	; 0x07
     a30:	a8 85       	ldd	r26, Y+8	; 0x08
     a32:	b9 85       	ldd	r27, Y+9	; 0x09
     a34:	00 97       	sbiw	r24, 0x00	; 0
     a36:	a1 05       	cpc	r26, r1
     a38:	b1 05       	cpc	r27, r1
     a3a:	99 f1       	breq	.+102    	; 0xaa2 <disk_writep+0xf8>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
     a3c:	80 91 04 01 	lds	r24, 0x0104
     a40:	88 2f       	mov	r24, r24
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	88 70       	andi	r24, 0x08	; 8
     a46:	90 70       	andi	r25, 0x00	; 0
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	89 f4       	brne	.+34     	; 0xa6e <disk_writep+0xc4>
     a4c:	8e 81       	ldd	r24, Y+6	; 0x06
     a4e:	9f 81       	ldd	r25, Y+7	; 0x07
     a50:	a8 85       	ldd	r26, Y+8	; 0x08
     a52:	b9 85       	ldd	r27, Y+9	; 0x09
     a54:	07 2e       	mov	r0, r23
     a56:	79 e0       	ldi	r23, 0x09	; 9
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	aa 1f       	adc	r26, r26
     a5e:	bb 1f       	adc	r27, r27
     a60:	7a 95       	dec	r23
     a62:	d1 f7       	brne	.-12     	; 0xa58 <disk_writep+0xae>
     a64:	70 2d       	mov	r23, r0
     a66:	8e 83       	std	Y+6, r24	; 0x06
     a68:	9f 83       	std	Y+7, r25	; 0x07
     a6a:	a8 87       	std	Y+8, r26	; 0x08
     a6c:	b9 87       	std	Y+9, r27	; 0x09
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
     a6e:	2e 81       	ldd	r18, Y+6	; 0x06
     a70:	3f 81       	ldd	r19, Y+7	; 0x07
     a72:	48 85       	ldd	r20, Y+8	; 0x08
     a74:	59 85       	ldd	r21, Y+9	; 0x09
     a76:	88 e5       	ldi	r24, 0x58	; 88
     a78:	ba 01       	movw	r22, r20
     a7a:	a9 01       	movw	r20, r18
     a7c:	0e 94 98 02 	call	0x530	; 0x530 <send_cmd>
     a80:	88 23       	and	r24, r24
     a82:	09 f0       	breq	.+2      	; 0xa86 <disk_writep+0xdc>
     a84:	53 c0       	rjmp	.+166    	; 0xb2c <disk_writep+0x182>
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
     a8c:	8e ef       	ldi	r24, 0xFE	; 254
     a8e:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
				wc = 512;							/* Set byte counter */
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	92 e0       	ldi	r25, 0x02	; 2
     a96:	90 93 06 01 	sts	0x0106, r25
     a9a:	80 93 05 01 	sts	0x0105, r24
				res = RES_OK;
     a9e:	19 82       	std	Y+1, r1	; 0x01
     aa0:	45 c0       	rjmp	.+138    	; 0xb2c <disk_writep+0x182>
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
     aa2:	80 91 05 01 	lds	r24, 0x0105
     aa6:	90 91 06 01 	lds	r25, 0x0106
     aaa:	02 96       	adiw	r24, 0x02	; 2
     aac:	9b 83       	std	Y+3, r25	; 0x03
     aae:	8a 83       	std	Y+2, r24	; 0x02
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
     ab0:	03 c0       	rjmp	.+6      	; 0xab8 <disk_writep+0x10e>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
     ab8:	21 e0       	ldi	r18, 0x01	; 1
     aba:	8a 81       	ldd	r24, Y+2	; 0x02
     abc:	9b 81       	ldd	r25, Y+3	; 0x03
     abe:	00 97       	sbiw	r24, 0x00	; 0
     ac0:	09 f4       	brne	.+2      	; 0xac4 <disk_writep+0x11a>
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	8a 81       	ldd	r24, Y+2	; 0x02
     ac6:	9b 81       	ldd	r25, Y+3	; 0x03
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	9b 83       	std	Y+3, r25	; 0x03
     acc:	8a 83       	std	Y+2, r24	; 0x02
     ace:	22 23       	and	r18, r18
     ad0:	81 f7       	brne	.-32     	; 0xab2 <disk_writep+0x108>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
     ad2:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>
     ad6:	88 2f       	mov	r24, r24
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	8f 71       	andi	r24, 0x1F	; 31
     adc:	90 70       	andi	r25, 0x00	; 0
     ade:	85 30       	cpi	r24, 0x05	; 5
     ae0:	91 05       	cpc	r25, r1
     ae2:	c9 f4       	brne	.+50     	; 0xb16 <disk_writep+0x16c>
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--) dly_100us();	/* Wait ready */
     ae4:	88 e8       	ldi	r24, 0x88	; 136
     ae6:	93 e1       	ldi	r25, 0x13	; 19
     ae8:	9b 83       	std	Y+3, r25	; 0x03
     aea:	8a 83       	std	Y+2, r24	; 0x02
     aec:	07 c0       	rjmp	.+14     	; 0xafc <disk_writep+0x152>
     aee:	0e 94 50 24 	call	0x48a0	; 0x48a0 <dly_100us>
     af2:	8a 81       	ldd	r24, Y+2	; 0x02
     af4:	9b 81       	ldd	r25, Y+3	; 0x03
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	9b 83       	std	Y+3, r25	; 0x03
     afa:	8a 83       	std	Y+2, r24	; 0x02
     afc:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>
     b00:	8f 3f       	cpi	r24, 0xFF	; 255
     b02:	21 f0       	breq	.+8      	; 0xb0c <disk_writep+0x162>
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	9b 81       	ldd	r25, Y+3	; 0x03
     b08:	00 97       	sbiw	r24, 0x00	; 0
     b0a:	89 f7       	brne	.-30     	; 0xaee <disk_writep+0x144>
				if (bc) res = RES_OK;
     b0c:	8a 81       	ldd	r24, Y+2	; 0x02
     b0e:	9b 81       	ldd	r25, Y+3	; 0x03
     b10:	00 97       	sbiw	r24, 0x00	; 0
     b12:	09 f0       	breq	.+2      	; 0xb16 <disk_writep+0x16c>
     b14:	19 82       	std	Y+1, r1	; 0x01
			}
			DESELECT();
     b16:	8b e2       	ldi	r24, 0x2B	; 43
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	2b e2       	ldi	r18, 0x2B	; 43
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	f9 01       	movw	r30, r18
     b20:	20 81       	ld	r18, Z
     b22:	20 61       	ori	r18, 0x10	; 16
     b24:	fc 01       	movw	r30, r24
     b26:	20 83       	st	Z, r18
			rcv_spi();
     b28:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>
		}
	}

	return res;
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
}
     b2e:	29 96       	adiw	r28, 0x09	; 9
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	08 95       	ret

00000b40 <mem_set>:
FATFS *FatFs;	/* Pointer to the file system object (logical drive) */


/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	cd b7       	in	r28, 0x3d	; 61
     b46:	de b7       	in	r29, 0x3e	; 62
     b48:	28 97       	sbiw	r28, 0x08	; 8
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	f8 94       	cli
     b4e:	de bf       	out	0x3e, r29	; 62
     b50:	0f be       	out	0x3f, r0	; 63
     b52:	cd bf       	out	0x3d, r28	; 61
     b54:	9c 83       	std	Y+4, r25	; 0x04
     b56:	8b 83       	std	Y+3, r24	; 0x03
     b58:	7e 83       	std	Y+6, r23	; 0x06
     b5a:	6d 83       	std	Y+5, r22	; 0x05
     b5c:	58 87       	std	Y+8, r21	; 0x08
     b5e:	4f 83       	std	Y+7, r20	; 0x07
	char *d = (char*)dst;
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	89 83       	std	Y+1, r24	; 0x01
	while (cnt--) *d++ = (char)val;
     b68:	0a c0       	rjmp	.+20     	; 0xb7e <mem_set+0x3e>
     b6a:	2d 81       	ldd	r18, Y+5	; 0x05
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	9a 81       	ldd	r25, Y+2	; 0x02
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	9a 81       	ldd	r25, Y+2	; 0x02
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9a 83       	std	Y+2, r25	; 0x02
     b7c:	89 83       	std	Y+1, r24	; 0x01
     b7e:	21 e0       	ldi	r18, 0x01	; 1
     b80:	8f 81       	ldd	r24, Y+7	; 0x07
     b82:	98 85       	ldd	r25, Y+8	; 0x08
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	09 f4       	brne	.+2      	; 0xb8a <mem_set+0x4a>
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	8f 81       	ldd	r24, Y+7	; 0x07
     b8c:	98 85       	ldd	r25, Y+8	; 0x08
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	98 87       	std	Y+8, r25	; 0x08
     b92:	8f 83       	std	Y+7, r24	; 0x07
     b94:	22 23       	and	r18, r18
     b96:	49 f7       	brne	.-46     	; 0xb6a <mem_set+0x2a>
}
     b98:	28 96       	adiw	r28, 0x08	; 8
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	2c 97       	sbiw	r28, 0x0c	; 12
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	98 87       	std	Y+8, r25	; 0x08
     bc0:	8f 83       	std	Y+7, r24	; 0x07
     bc2:	7a 87       	std	Y+10, r23	; 0x0a
     bc4:	69 87       	std	Y+9, r22	; 0x09
     bc6:	5c 87       	std	Y+12, r21	; 0x0c
     bc8:	4b 87       	std	Y+11, r20	; 0x0b
	const char *d = (const char *)dst, *s = (const char *)src;
     bca:	8f 81       	ldd	r24, Y+7	; 0x07
     bcc:	98 85       	ldd	r25, Y+8	; 0x08
     bce:	9a 83       	std	Y+2, r25	; 0x02
     bd0:	89 83       	std	Y+1, r24	; 0x01
     bd2:	89 85       	ldd	r24, Y+9	; 0x09
     bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd6:	9c 83       	std	Y+4, r25	; 0x04
     bd8:	8b 83       	std	Y+3, r24	; 0x03
	int r = 0;
     bda:	1e 82       	std	Y+6, r1	; 0x06
     bdc:	1d 82       	std	Y+5, r1	; 0x05
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     bde:	00 00       	nop
     be0:	21 e0       	ldi	r18, 0x01	; 1
     be2:	8b 85       	ldd	r24, Y+11	; 0x0b
     be4:	9c 85       	ldd	r25, Y+12	; 0x0c
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	09 f4       	brne	.+2      	; 0xbec <mem_cmp+0x42>
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	8b 85       	ldd	r24, Y+11	; 0x0b
     bee:	9c 85       	ldd	r25, Y+12	; 0x0c
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	9c 87       	std	Y+12, r25	; 0x0c
     bf4:	8b 87       	std	Y+11, r24	; 0x0b
     bf6:	22 23       	and	r18, r18
     bf8:	21 f1       	breq	.+72     	; 0xc42 <mem_cmp+0x98>
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
     bfe:	fc 01       	movw	r30, r24
     c00:	80 81       	ld	r24, Z
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	fc 01       	movw	r30, r24
     c0c:	80 81       	ld	r24, Z
     c0e:	88 2f       	mov	r24, r24
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	a9 01       	movw	r20, r18
     c14:	48 1b       	sub	r20, r24
     c16:	59 0b       	sbc	r21, r25
     c18:	ca 01       	movw	r24, r20
     c1a:	9e 83       	std	Y+6, r25	; 0x06
     c1c:	8d 83       	std	Y+5, r24	; 0x05
     c1e:	21 e0       	ldi	r18, 0x01	; 1
     c20:	8d 81       	ldd	r24, Y+5	; 0x05
     c22:	9e 81       	ldd	r25, Y+6	; 0x06
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	09 f0       	breq	.+2      	; 0xc2a <mem_cmp+0x80>
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	89 83       	std	Y+1, r24	; 0x01
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	9c 81       	ldd	r25, Y+4	; 0x04
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	9c 83       	std	Y+4, r25	; 0x04
     c3c:	8b 83       	std	Y+3, r24	; 0x03
     c3e:	22 23       	and	r18, r18
     c40:	79 f6       	brne	.-98     	; 0xbe0 <mem_cmp+0x36>
	return r;
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
}
     c46:	2c 96       	adiw	r28, 0x0c	; 12
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	60 97       	sbiw	r28, 0x10	; 16
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	6d 87       	std	Y+13, r22	; 0x0d
     c72:	7e 87       	std	Y+14, r23	; 0x0e
     c74:	8f 87       	std	Y+15, r24	; 0x0f
     c76:	98 8b       	std	Y+16, r25	; 0x10
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     c78:	80 91 07 01 	lds	r24, 0x0107
     c7c:	90 91 08 01 	lds	r25, 0x0108
     c80:	9a 83       	std	Y+2, r25	; 0x02
     c82:	89 83       	std	Y+1, r24	; 0x01


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
     c84:	8d 85       	ldd	r24, Y+13	; 0x0d
     c86:	9e 85       	ldd	r25, Y+14	; 0x0e
     c88:	af 85       	ldd	r26, Y+15	; 0x0f
     c8a:	b8 89       	ldd	r27, Y+16	; 0x10
     c8c:	82 30       	cpi	r24, 0x02	; 2
     c8e:	91 05       	cpc	r25, r1
     c90:	a1 05       	cpc	r26, r1
     c92:	b1 05       	cpc	r27, r1
     c94:	80 f0       	brcs	.+32     	; 0xcb6 <get_fat+0x5e>
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	fc 01       	movw	r30, r24
     c9c:	26 81       	ldd	r18, Z+6	; 0x06
     c9e:	37 81       	ldd	r19, Z+7	; 0x07
     ca0:	40 85       	ldd	r20, Z+8	; 0x08
     ca2:	51 85       	ldd	r21, Z+9	; 0x09
     ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ca8:	af 85       	ldd	r26, Y+15	; 0x0f
     caa:	b8 89       	ldd	r27, Y+16	; 0x10
     cac:	82 17       	cp	r24, r18
     cae:	93 07       	cpc	r25, r19
     cb0:	a4 07       	cpc	r26, r20
     cb2:	b5 07       	cpc	r27, r21
     cb4:	28 f0       	brcs	.+10     	; 0xcc0 <get_fat+0x68>
		return 1;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a0 e0       	ldi	r26, 0x00	; 0
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	21 c1       	rjmp	.+578    	; 0xf02 <get_fat+0x2aa>

	switch (fs->fs_type) {
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	9a 81       	ldd	r25, Y+2	; 0x02
     cc4:	fc 01       	movw	r30, r24
     cc6:	80 81       	ld	r24, Z
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	91 05       	cpc	r25, r1
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <get_fat+0x7c>
     cd2:	aa c0       	rjmp	.+340    	; 0xe28 <get_fat+0x1d0>
     cd4:	83 30       	cpi	r24, 0x03	; 3
     cd6:	91 05       	cpc	r25, r1
     cd8:	09 f4       	brne	.+2      	; 0xcdc <get_fat+0x84>
     cda:	d4 c0       	rjmp	.+424    	; 0xe84 <get_fat+0x22c>
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	91 05       	cpc	r25, r1
     ce0:	09 f0       	breq	.+2      	; 0xce4 <get_fat+0x8c>
     ce2:	0b c1       	rjmp	.+534    	; 0xefa <get_fat+0x2a2>
#if _FS_FAT12
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce8:	9c 83       	std	Y+4, r25	; 0x04
     cea:	8b 83       	std	Y+3, r24	; 0x03
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	96 95       	lsr	r25
     cf2:	87 95       	ror	r24
     cf4:	2b 81       	ldd	r18, Y+3	; 0x03
     cf6:	3c 81       	ldd	r19, Y+4	; 0x04
     cf8:	82 0f       	add	r24, r18
     cfa:	93 1f       	adc	r25, r19
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
		ofs = bc % 512; bc /= 512;
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	9c 81       	ldd	r25, Y+4	; 0x04
     d04:	91 70       	andi	r25, 0x01	; 1
     d06:	9e 83       	std	Y+6, r25	; 0x06
     d08:	8d 83       	std	Y+5, r24	; 0x05
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	89 2f       	mov	r24, r25
     d10:	99 27       	eor	r25, r25
     d12:	86 95       	lsr	r24
     d14:	9c 83       	std	Y+4, r25	; 0x04
     d16:	8b 83       	std	Y+3, r24	; 0x03
		if (ofs != 511) {
     d18:	8d 81       	ldd	r24, Y+5	; 0x05
     d1a:	9e 81       	ldd	r25, Y+6	; 0x06
     d1c:	f1 e0       	ldi	r31, 0x01	; 1
     d1e:	8f 3f       	cpi	r24, 0xFF	; 255
     d20:	9f 07       	cpc	r25, r31
     d22:	f9 f0       	breq	.+62     	; 0xd62 <get_fat+0x10a>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	9a 81       	ldd	r25, Y+2	; 0x02
     d28:	fc 01       	movw	r30, r24
     d2a:	22 85       	ldd	r18, Z+10	; 0x0a
     d2c:	33 85       	ldd	r19, Z+11	; 0x0b
     d2e:	44 85       	ldd	r20, Z+12	; 0x0c
     d30:	55 85       	ldd	r21, Z+13	; 0x0d
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	9c 81       	ldd	r25, Y+4	; 0x04
     d36:	cc 01       	movw	r24, r24
     d38:	a0 e0       	ldi	r26, 0x00	; 0
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	28 0f       	add	r18, r24
     d3e:	39 1f       	adc	r19, r25
     d40:	4a 1f       	adc	r20, r26
     d42:	5b 1f       	adc	r21, r27
     d44:	ce 01       	movw	r24, r28
     d46:	09 96       	adiw	r24, 0x09	; 9
     d48:	ed 81       	ldd	r30, Y+5	; 0x05
     d4a:	fe 81       	ldd	r31, Y+6	; 0x06
     d4c:	ba 01       	movw	r22, r20
     d4e:	a9 01       	movw	r20, r18
     d50:	9f 01       	movw	r18, r30
     d52:	02 e0       	ldi	r16, 0x02	; 2
     d54:	10 e0       	ldi	r17, 0x00	; 0
     d56:	0e 94 1c 04 	call	0x838	; 0x838 <disk_readp>
     d5a:	88 23       	and	r24, r24
     d5c:	09 f4       	brne	.+2      	; 0xd60 <get_fat+0x108>
     d5e:	42 c0       	rjmp	.+132    	; 0xde4 <get_fat+0x18c>
     d60:	cc c0       	rjmp	.+408    	; 0xefa <get_fat+0x2a2>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	9a 81       	ldd	r25, Y+2	; 0x02
     d66:	fc 01       	movw	r30, r24
     d68:	22 85       	ldd	r18, Z+10	; 0x0a
     d6a:	33 85       	ldd	r19, Z+11	; 0x0b
     d6c:	44 85       	ldd	r20, Z+12	; 0x0c
     d6e:	55 85       	ldd	r21, Z+13	; 0x0d
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	9c 81       	ldd	r25, Y+4	; 0x04
     d74:	cc 01       	movw	r24, r24
     d76:	a0 e0       	ldi	r26, 0x00	; 0
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	28 0f       	add	r18, r24
     d7c:	39 1f       	adc	r19, r25
     d7e:	4a 1f       	adc	r20, r26
     d80:	5b 1f       	adc	r21, r27
     d82:	ce 01       	movw	r24, r28
     d84:	09 96       	adiw	r24, 0x09	; 9
     d86:	ba 01       	movw	r22, r20
     d88:	a9 01       	movw	r20, r18
     d8a:	2f ef       	ldi	r18, 0xFF	; 255
     d8c:	31 e0       	ldi	r19, 0x01	; 1
     d8e:	01 e0       	ldi	r16, 0x01	; 1
     d90:	10 e0       	ldi	r17, 0x00	; 0
     d92:	0e 94 1c 04 	call	0x838	; 0x838 <disk_readp>
     d96:	88 23       	and	r24, r24
     d98:	09 f0       	breq	.+2      	; 0xd9c <get_fat+0x144>
     d9a:	a8 c0       	rjmp	.+336    	; 0xeec <get_fat+0x294>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	9a 81       	ldd	r25, Y+2	; 0x02
     da0:	fc 01       	movw	r30, r24
     da2:	22 85       	ldd	r18, Z+10	; 0x0a
     da4:	33 85       	ldd	r19, Z+11	; 0x0b
     da6:	44 85       	ldd	r20, Z+12	; 0x0c
     da8:	55 85       	ldd	r21, Z+13	; 0x0d
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	cc 01       	movw	r24, r24
     db0:	a0 e0       	ldi	r26, 0x00	; 0
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	82 0f       	add	r24, r18
     db6:	93 1f       	adc	r25, r19
     db8:	a4 1f       	adc	r26, r20
     dba:	b5 1f       	adc	r27, r21
     dbc:	9c 01       	movw	r18, r24
     dbe:	ad 01       	movw	r20, r26
     dc0:	2f 5f       	subi	r18, 0xFF	; 255
     dc2:	3f 4f       	sbci	r19, 0xFF	; 255
     dc4:	4f 4f       	sbci	r20, 0xFF	; 255
     dc6:	5f 4f       	sbci	r21, 0xFF	; 255
     dc8:	ce 01       	movw	r24, r28
     dca:	09 96       	adiw	r24, 0x09	; 9
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	ba 01       	movw	r22, r20
     dd0:	a9 01       	movw	r20, r18
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	01 e0       	ldi	r16, 0x01	; 1
     dd8:	10 e0       	ldi	r17, 0x00	; 0
     dda:	0e 94 1c 04 	call	0x838	; 0x838 <disk_readp>
     dde:	88 23       	and	r24, r24
     de0:	09 f0       	breq	.+2      	; 0xde4 <get_fat+0x18c>
     de2:	86 c0       	rjmp	.+268    	; 0xef0 <get_fat+0x298>
		}
		wc = LD_WORD(buf);
     de4:	ce 01       	movw	r24, r28
     de6:	09 96       	adiw	r24, 0x09	; 9
     de8:	fc 01       	movw	r30, r24
     dea:	80 81       	ld	r24, Z
     dec:	91 81       	ldd	r25, Z+1	; 0x01
     dee:	98 87       	std	Y+8, r25	; 0x08
     df0:	8f 83       	std	Y+7, r24	; 0x07
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     df2:	8d 85       	ldd	r24, Y+13	; 0x0d
     df4:	9e 85       	ldd	r25, Y+14	; 0x0e
     df6:	81 70       	andi	r24, 0x01	; 1
     df8:	90 70       	andi	r25, 0x00	; 0
     dfa:	88 23       	and	r24, r24
     dfc:	61 f0       	breq	.+24     	; 0xe16 <get_fat+0x1be>
     dfe:	8f 81       	ldd	r24, Y+7	; 0x07
     e00:	98 85       	ldd	r25, Y+8	; 0x08
     e02:	92 95       	swap	r25
     e04:	82 95       	swap	r24
     e06:	8f 70       	andi	r24, 0x0F	; 15
     e08:	89 27       	eor	r24, r25
     e0a:	9f 70       	andi	r25, 0x0F	; 15
     e0c:	89 27       	eor	r24, r25
     e0e:	cc 01       	movw	r24, r24
     e10:	a0 e0       	ldi	r26, 0x00	; 0
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	08 c0       	rjmp	.+16     	; 0xe26 <get_fat+0x1ce>
     e16:	8f 81       	ldd	r24, Y+7	; 0x07
     e18:	98 85       	ldd	r25, Y+8	; 0x08
     e1a:	cc 01       	movw	r24, r24
     e1c:	a0 e0       	ldi	r26, 0x00	; 0
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	9f 70       	andi	r25, 0x0F	; 15
     e22:	a0 70       	andi	r26, 0x00	; 0
     e24:	b0 70       	andi	r27, 0x00	; 0
     e26:	6d c0       	rjmp	.+218    	; 0xf02 <get_fat+0x2aa>
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	fc 01       	movw	r30, r24
     e2e:	22 85       	ldd	r18, Z+10	; 0x0a
     e30:	33 85       	ldd	r19, Z+11	; 0x0b
     e32:	44 85       	ldd	r20, Z+12	; 0x0c
     e34:	55 85       	ldd	r21, Z+13	; 0x0d
     e36:	8d 85       	ldd	r24, Y+13	; 0x0d
     e38:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3a:	af 85       	ldd	r26, Y+15	; 0x0f
     e3c:	b8 89       	ldd	r27, Y+16	; 0x10
     e3e:	89 2f       	mov	r24, r25
     e40:	9a 2f       	mov	r25, r26
     e42:	ab 2f       	mov	r26, r27
     e44:	bb 27       	eor	r27, r27
     e46:	28 0f       	add	r18, r24
     e48:	39 1f       	adc	r19, r25
     e4a:	4a 1f       	adc	r20, r26
     e4c:	5b 1f       	adc	r21, r27
     e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e50:	9e 85       	ldd	r25, Y+14	; 0x0e
     e52:	90 70       	andi	r25, 0x00	; 0
     e54:	fc 01       	movw	r30, r24
     e56:	ee 0f       	add	r30, r30
     e58:	ff 1f       	adc	r31, r31
     e5a:	ce 01       	movw	r24, r28
     e5c:	09 96       	adiw	r24, 0x09	; 9
     e5e:	ba 01       	movw	r22, r20
     e60:	a9 01       	movw	r20, r18
     e62:	9f 01       	movw	r18, r30
     e64:	02 e0       	ldi	r16, 0x02	; 2
     e66:	10 e0       	ldi	r17, 0x00	; 0
     e68:	0e 94 1c 04 	call	0x838	; 0x838 <disk_readp>
     e6c:	88 23       	and	r24, r24
     e6e:	09 f0       	breq	.+2      	; 0xe72 <get_fat+0x21a>
     e70:	41 c0       	rjmp	.+130    	; 0xef4 <get_fat+0x29c>
		return LD_WORD(buf);
     e72:	ce 01       	movw	r24, r28
     e74:	09 96       	adiw	r24, 0x09	; 9
     e76:	fc 01       	movw	r30, r24
     e78:	80 81       	ld	r24, Z
     e7a:	91 81       	ldd	r25, Z+1	; 0x01
     e7c:	cc 01       	movw	r24, r24
     e7e:	a0 e0       	ldi	r26, 0x00	; 0
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	3f c0       	rjmp	.+126    	; 0xf02 <get_fat+0x2aa>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	fc 01       	movw	r30, r24
     e8a:	22 85       	ldd	r18, Z+10	; 0x0a
     e8c:	33 85       	ldd	r19, Z+11	; 0x0b
     e8e:	44 85       	ldd	r20, Z+12	; 0x0c
     e90:	55 85       	ldd	r21, Z+13	; 0x0d
     e92:	8d 85       	ldd	r24, Y+13	; 0x0d
     e94:	9e 85       	ldd	r25, Y+14	; 0x0e
     e96:	af 85       	ldd	r26, Y+15	; 0x0f
     e98:	b8 89       	ldd	r27, Y+16	; 0x10
     e9a:	68 94       	set
     e9c:	16 f8       	bld	r1, 6
     e9e:	b6 95       	lsr	r27
     ea0:	a7 95       	ror	r26
     ea2:	97 95       	ror	r25
     ea4:	87 95       	ror	r24
     ea6:	16 94       	lsr	r1
     ea8:	d1 f7       	brne	.-12     	; 0xe9e <get_fat+0x246>
     eaa:	28 0f       	add	r18, r24
     eac:	39 1f       	adc	r19, r25
     eae:	4a 1f       	adc	r20, r26
     eb0:	5b 1f       	adc	r21, r27
     eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb6:	8f 77       	andi	r24, 0x7F	; 127
     eb8:	90 70       	andi	r25, 0x00	; 0
     eba:	fc 01       	movw	r30, r24
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	ee 0f       	add	r30, r30
     ec2:	ff 1f       	adc	r31, r31
     ec4:	ce 01       	movw	r24, r28
     ec6:	09 96       	adiw	r24, 0x09	; 9
     ec8:	ba 01       	movw	r22, r20
     eca:	a9 01       	movw	r20, r18
     ecc:	9f 01       	movw	r18, r30
     ece:	04 e0       	ldi	r16, 0x04	; 4
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	0e 94 1c 04 	call	0x838	; 0x838 <disk_readp>
     ed6:	88 23       	and	r24, r24
     ed8:	79 f4       	brne	.+30     	; 0xef8 <get_fat+0x2a0>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     eda:	ce 01       	movw	r24, r28
     edc:	09 96       	adiw	r24, 0x09	; 9
     ede:	fc 01       	movw	r30, r24
     ee0:	80 81       	ld	r24, Z
     ee2:	91 81       	ldd	r25, Z+1	; 0x01
     ee4:	a2 81       	ldd	r26, Z+2	; 0x02
     ee6:	b3 81       	ldd	r27, Z+3	; 0x03
     ee8:	bf 70       	andi	r27, 0x0F	; 15
     eea:	0b c0       	rjmp	.+22     	; 0xf02 <get_fat+0x2aa>
		bc = (WORD)clst; bc += bc / 2;
		ofs = bc % 512; bc /= 512;
		if (ofs != 511) {
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     eec:	00 00       	nop
     eee:	05 c0       	rjmp	.+10     	; 0xefa <get_fat+0x2a2>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     ef0:	00 00       	nop
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <get_fat+0x2a2>
		}
		wc = LD_WORD(buf);
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     ef4:	00 00       	nop
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <get_fat+0x2a2>
		return LD_WORD(buf);
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     ef8:	00 00       	nop
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	a0 e0       	ldi	r26, 0x00	; 0
     f00:	b0 e0       	ldi	r27, 0x00	; 0
}
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	60 96       	adiw	r28, 0x10	; 16
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	08 95       	ret

00000f1c <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	00 d0       	rcall	.+0      	; 0xf22 <clust2sect+0x6>
     f22:	00 d0       	rcall	.+0      	; 0xf24 <clust2sect+0x8>
     f24:	00 d0       	rcall	.+0      	; 0xf26 <clust2sect+0xa>
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	6b 83       	std	Y+3, r22	; 0x03
     f2c:	7c 83       	std	Y+4, r23	; 0x04
     f2e:	8d 83       	std	Y+5, r24	; 0x05
     f30:	9e 83       	std	Y+6, r25	; 0x06
	FATFS *fs = FatFs;
     f32:	80 91 07 01 	lds	r24, 0x0107
     f36:	90 91 08 01 	lds	r25, 0x0108
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01


	clst -= 2;
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	9c 81       	ldd	r25, Y+4	; 0x04
     f42:	ad 81       	ldd	r26, Y+5	; 0x05
     f44:	be 81       	ldd	r27, Y+6	; 0x06
     f46:	02 97       	sbiw	r24, 0x02	; 2
     f48:	a1 09       	sbc	r26, r1
     f4a:	b1 09       	sbc	r27, r1
     f4c:	8b 83       	std	Y+3, r24	; 0x03
     f4e:	9c 83       	std	Y+4, r25	; 0x04
     f50:	ad 83       	std	Y+5, r26	; 0x05
     f52:	be 83       	std	Y+6, r27	; 0x06
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	fc 01       	movw	r30, r24
     f5a:	86 81       	ldd	r24, Z+6	; 0x06
     f5c:	97 81       	ldd	r25, Z+7	; 0x07
     f5e:	a0 85       	ldd	r26, Z+8	; 0x08
     f60:	b1 85       	ldd	r27, Z+9	; 0x09
     f62:	9c 01       	movw	r18, r24
     f64:	ad 01       	movw	r20, r26
     f66:	22 50       	subi	r18, 0x02	; 2
     f68:	30 40       	sbci	r19, 0x00	; 0
     f6a:	40 40       	sbci	r20, 0x00	; 0
     f6c:	50 40       	sbci	r21, 0x00	; 0
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	ad 81       	ldd	r26, Y+5	; 0x05
     f74:	be 81       	ldd	r27, Y+6	; 0x06
     f76:	82 17       	cp	r24, r18
     f78:	93 07       	cpc	r25, r19
     f7a:	a4 07       	cpc	r26, r20
     f7c:	b5 07       	cpc	r27, r21
     f7e:	20 f0       	brcs	.+8      	; 0xf88 <clust2sect+0x6c>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	dc 01       	movw	r26, r24
     f86:	1d c0       	rjmp	.+58     	; 0xfc2 <clust2sect+0xa6>
	return (DWORD)clst * fs->csize + fs->database;
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	fc 01       	movw	r30, r24
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a0 e0       	ldi	r26, 0x00	; 0
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	2b 81       	ldd	r18, Y+3	; 0x03
     f9a:	3c 81       	ldd	r19, Y+4	; 0x04
     f9c:	4d 81       	ldd	r20, Y+5	; 0x05
     f9e:	5e 81       	ldd	r21, Y+6	; 0x06
     fa0:	bc 01       	movw	r22, r24
     fa2:	cd 01       	movw	r24, r26
     fa4:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <__mulsi3>
     fa8:	9b 01       	movw	r18, r22
     faa:	ac 01       	movw	r20, r24
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	fc 01       	movw	r30, r24
     fb2:	82 89       	ldd	r24, Z+18	; 0x12
     fb4:	93 89       	ldd	r25, Z+19	; 0x13
     fb6:	a4 89       	ldd	r26, Z+20	; 0x14
     fb8:	b5 89       	ldd	r27, Z+21	; 0x15
     fba:	82 0f       	add	r24, r18
     fbc:	93 1f       	adc	r25, r19
     fbe:	a4 1f       	adc	r26, r20
     fc0:	b5 1f       	adc	r27, r21
}
     fc2:	bc 01       	movw	r22, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	26 96       	adiw	r28, 0x06	; 6
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	08 95       	ret

00000fd8 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	28 97       	sbiw	r28, 0x08	; 8
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	98 87       	std	Y+8, r25	; 0x08
     fee:	8f 83       	std	Y+7, r24	; 0x07
	CLUST clst;
	FATFS *fs = FatFs;
     ff0:	80 91 07 01 	lds	r24, 0x0107
     ff4:	90 91 08 01 	lds	r25, 0x0108
     ff8:	9e 83       	std	Y+6, r25	; 0x06
     ffa:	8d 83       	std	Y+5, r24	; 0x05


	dj->index = 0;
     ffc:	8f 81       	ldd	r24, Y+7	; 0x07
     ffe:	98 85       	ldd	r25, Y+8	; 0x08
    1000:	fc 01       	movw	r30, r24
    1002:	11 82       	std	Z+1, r1	; 0x01
    1004:	10 82       	st	Z, r1
	clst = dj->sclust;
    1006:	8f 81       	ldd	r24, Y+7	; 0x07
    1008:	98 85       	ldd	r25, Y+8	; 0x08
    100a:	fc 01       	movw	r30, r24
    100c:	84 81       	ldd	r24, Z+4	; 0x04
    100e:	95 81       	ldd	r25, Z+5	; 0x05
    1010:	a6 81       	ldd	r26, Z+6	; 0x06
    1012:	b7 81       	ldd	r27, Z+7	; 0x07
    1014:	89 83       	std	Y+1, r24	; 0x01
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	ab 83       	std	Y+3, r26	; 0x03
    101a:	bc 83       	std	Y+4, r27	; 0x04
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	9a 81       	ldd	r25, Y+2	; 0x02
    1020:	ab 81       	ldd	r26, Y+3	; 0x03
    1022:	bc 81       	ldd	r27, Y+4	; 0x04
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	91 05       	cpc	r25, r1
    1028:	a1 05       	cpc	r26, r1
    102a:	b1 05       	cpc	r27, r1
    102c:	81 f0       	breq	.+32     	; 0x104e <dir_rewind+0x76>
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	9e 81       	ldd	r25, Y+6	; 0x06
    1032:	fc 01       	movw	r30, r24
    1034:	26 81       	ldd	r18, Z+6	; 0x06
    1036:	37 81       	ldd	r19, Z+7	; 0x07
    1038:	40 85       	ldd	r20, Z+8	; 0x08
    103a:	51 85       	ldd	r21, Z+9	; 0x09
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	ab 81       	ldd	r26, Y+3	; 0x03
    1042:	bc 81       	ldd	r27, Y+4	; 0x04
    1044:	82 17       	cp	r24, r18
    1046:	93 07       	cpc	r25, r19
    1048:	a4 07       	cpc	r26, r20
    104a:	b5 07       	cpc	r27, r21
    104c:	10 f0       	brcs	.+4      	; 0x1052 <dir_rewind+0x7a>
		return FR_DISK_ERR;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	46 c0       	rjmp	.+140    	; 0x10de <dir_rewind+0x106>
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	9a 81       	ldd	r25, Y+2	; 0x02
    1056:	ab 81       	ldd	r26, Y+3	; 0x03
    1058:	bc 81       	ldd	r27, Y+4	; 0x04
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	a1 05       	cpc	r26, r1
    105e:	b1 05       	cpc	r27, r1
    1060:	89 f4       	brne	.+34     	; 0x1084 <dir_rewind+0xac>
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	fc 01       	movw	r30, r24
    1068:	80 81       	ld	r24, Z
    106a:	83 30       	cpi	r24, 0x03	; 3
    106c:	59 f4       	brne	.+22     	; 0x1084 <dir_rewind+0xac>
		clst = (CLUST)fs->dirbase;
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	fc 01       	movw	r30, r24
    1074:	86 85       	ldd	r24, Z+14	; 0x0e
    1076:	97 85       	ldd	r25, Z+15	; 0x0f
    1078:	a0 89       	ldd	r26, Z+16	; 0x10
    107a:	b1 89       	ldd	r27, Z+17	; 0x11
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	ab 83       	std	Y+3, r26	; 0x03
    1082:	bc 83       	std	Y+4, r27	; 0x04
	dj->clust = clst;						/* Current cluster */
    1084:	2f 81       	ldd	r18, Y+7	; 0x07
    1086:	38 85       	ldd	r19, Y+8	; 0x08
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	9a 81       	ldd	r25, Y+2	; 0x02
    108c:	ab 81       	ldd	r26, Y+3	; 0x03
    108e:	bc 81       	ldd	r27, Y+4	; 0x04
    1090:	f9 01       	movw	r30, r18
    1092:	80 87       	std	Z+8, r24	; 0x08
    1094:	91 87       	std	Z+9, r25	; 0x09
    1096:	a2 87       	std	Z+10, r26	; 0x0a
    1098:	b3 87       	std	Z+11, r27	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	ab 81       	ldd	r26, Y+3	; 0x03
    10a0:	bc 81       	ldd	r27, Y+4	; 0x04
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	a1 05       	cpc	r26, r1
    10a6:	b1 05       	cpc	r27, r1
    10a8:	59 f0       	breq	.+22     	; 0x10c0 <dir_rewind+0xe8>
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	9a 81       	ldd	r25, Y+2	; 0x02
    10ae:	ab 81       	ldd	r26, Y+3	; 0x03
    10b0:	bc 81       	ldd	r27, Y+4	; 0x04
    10b2:	bc 01       	movw	r22, r24
    10b4:	cd 01       	movw	r24, r26
    10b6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <clust2sect>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <dir_rewind+0xf6>
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	9e 81       	ldd	r25, Y+6	; 0x06
    10c4:	fc 01       	movw	r30, r24
    10c6:	86 85       	ldd	r24, Z+14	; 0x0e
    10c8:	97 85       	ldd	r25, Z+15	; 0x0f
    10ca:	a0 89       	ldd	r26, Z+16	; 0x10
    10cc:	b1 89       	ldd	r27, Z+17	; 0x11
    10ce:	2f 81       	ldd	r18, Y+7	; 0x07
    10d0:	38 85       	ldd	r19, Y+8	; 0x08
    10d2:	f9 01       	movw	r30, r18
    10d4:	84 87       	std	Z+12, r24	; 0x0c
    10d6:	95 87       	std	Z+13, r25	; 0x0d
    10d8:	a6 87       	std	Z+14, r26	; 0x0e
    10da:	b7 87       	std	Z+15, r27	; 0x0f

	return FR_OK;	/* Seek succeeded */
    10dc:	80 e0       	ldi	r24, 0x00	; 0
}
    10de:	28 96       	adiw	r28, 0x08	; 8
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	08 95       	ret

000010f0 <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	2a 97       	sbiw	r28, 0x0a	; 10
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	de bf       	out	0x3e, r29	; 62
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	cd bf       	out	0x3d, r28	; 61
    1104:	9a 87       	std	Y+10, r25	; 0x0a
    1106:	89 87       	std	Y+9, r24	; 0x09
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
    1108:	80 91 07 01 	lds	r24, 0x0107
    110c:	90 91 08 01 	lds	r25, 0x0108
    1110:	9a 83       	std	Y+2, r25	; 0x02
    1112:	89 83       	std	Y+1, r24	; 0x01


	i = dj->index + 1;
    1114:	89 85       	ldd	r24, Y+9	; 0x09
    1116:	9a 85       	ldd	r25, Y+10	; 0x0a
    1118:	fc 01       	movw	r30, r24
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	9c 83       	std	Y+4, r25	; 0x04
    1122:	8b 83       	std	Y+3, r24	; 0x03
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	59 f0       	breq	.+22     	; 0x1142 <dir_next+0x52>
    112c:	89 85       	ldd	r24, Y+9	; 0x09
    112e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1130:	fc 01       	movw	r30, r24
    1132:	84 85       	ldd	r24, Z+12	; 0x0c
    1134:	95 85       	ldd	r25, Z+13	; 0x0d
    1136:	a6 85       	ldd	r26, Z+14	; 0x0e
    1138:	b7 85       	ldd	r27, Z+15	; 0x0f
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	a1 05       	cpc	r26, r1
    113e:	b1 05       	cpc	r27, r1
    1140:	11 f4       	brne	.+4      	; 0x1146 <dir_next+0x56>
		return FR_NO_FILE;
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	97 c0       	rjmp	.+302    	; 0x1274 <dir_next+0x184>

	if (!(i % 16)) {		/* Sector changed? */
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	8f 70       	andi	r24, 0x0F	; 15
    114c:	90 70       	andi	r25, 0x00	; 0
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	09 f0       	breq	.+2      	; 0x1154 <dir_next+0x64>
    1152:	88 c0       	rjmp	.+272    	; 0x1264 <dir_next+0x174>
		dj->sect++;			/* Next sector */
    1154:	89 85       	ldd	r24, Y+9	; 0x09
    1156:	9a 85       	ldd	r25, Y+10	; 0x0a
    1158:	fc 01       	movw	r30, r24
    115a:	84 85       	ldd	r24, Z+12	; 0x0c
    115c:	95 85       	ldd	r25, Z+13	; 0x0d
    115e:	a6 85       	ldd	r26, Z+14	; 0x0e
    1160:	b7 85       	ldd	r27, Z+15	; 0x0f
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	a1 1d       	adc	r26, r1
    1166:	b1 1d       	adc	r27, r1
    1168:	29 85       	ldd	r18, Y+9	; 0x09
    116a:	3a 85       	ldd	r19, Y+10	; 0x0a
    116c:	f9 01       	movw	r30, r18
    116e:	84 87       	std	Z+12, r24	; 0x0c
    1170:	95 87       	std	Z+13, r25	; 0x0d
    1172:	a6 87       	std	Z+14, r26	; 0x0e
    1174:	b7 87       	std	Z+15, r27	; 0x0f

		if (dj->clust == 0) {	/* Static table */
    1176:	89 85       	ldd	r24, Y+9	; 0x09
    1178:	9a 85       	ldd	r25, Y+10	; 0x0a
    117a:	fc 01       	movw	r30, r24
    117c:	80 85       	ldd	r24, Z+8	; 0x08
    117e:	91 85       	ldd	r25, Z+9	; 0x09
    1180:	a2 85       	ldd	r26, Z+10	; 0x0a
    1182:	b3 85       	ldd	r27, Z+11	; 0x0b
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	a1 05       	cpc	r26, r1
    1188:	b1 05       	cpc	r27, r1
    118a:	69 f4       	brne	.+26     	; 0x11a6 <dir_next+0xb6>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	fc 01       	movw	r30, r24
    1192:	24 81       	ldd	r18, Z+4	; 0x04
    1194:	35 81       	ldd	r19, Z+5	; 0x05
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	82 17       	cp	r24, r18
    119c:	93 07       	cpc	r25, r19
    119e:	08 f4       	brcc	.+2      	; 0x11a2 <dir_next+0xb2>
    11a0:	61 c0       	rjmp	.+194    	; 0x1264 <dir_next+0x174>
				return FR_NO_FILE;
    11a2:	83 e0       	ldi	r24, 0x03	; 3
    11a4:	67 c0       	rjmp	.+206    	; 0x1274 <dir_next+0x184>
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	9c 01       	movw	r18, r24
    11ac:	32 95       	swap	r19
    11ae:	22 95       	swap	r18
    11b0:	2f 70       	andi	r18, 0x0F	; 15
    11b2:	23 27       	eor	r18, r19
    11b4:	3f 70       	andi	r19, 0x0F	; 15
    11b6:	23 27       	eor	r18, r19
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	fc 01       	movw	r30, r24
    11be:	82 81       	ldd	r24, Z+2	; 0x02
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	82 23       	and	r24, r18
    11c8:	93 23       	and	r25, r19
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <dir_next+0xe0>
    11ce:	4a c0       	rjmp	.+148    	; 0x1264 <dir_next+0x174>
				clst = get_fat(dj->clust);		/* Get next cluster */
    11d0:	89 85       	ldd	r24, Y+9	; 0x09
    11d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d4:	fc 01       	movw	r30, r24
    11d6:	80 85       	ldd	r24, Z+8	; 0x08
    11d8:	91 85       	ldd	r25, Z+9	; 0x09
    11da:	a2 85       	ldd	r26, Z+10	; 0x0a
    11dc:	b3 85       	ldd	r27, Z+11	; 0x0b
    11de:	bc 01       	movw	r22, r24
    11e0:	cd 01       	movw	r24, r26
    11e2:	0e 94 2c 06 	call	0xc58	; 0xc58 <get_fat>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	8d 83       	std	Y+5, r24	; 0x05
    11ec:	9e 83       	std	Y+6, r25	; 0x06
    11ee:	af 83       	std	Y+7, r26	; 0x07
    11f0:	b8 87       	std	Y+8, r27	; 0x08
				if (clst <= 1) return FR_DISK_ERR;
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	9e 81       	ldd	r25, Y+6	; 0x06
    11f6:	af 81       	ldd	r26, Y+7	; 0x07
    11f8:	b8 85       	ldd	r27, Y+8	; 0x08
    11fa:	82 30       	cpi	r24, 0x02	; 2
    11fc:	91 05       	cpc	r25, r1
    11fe:	a1 05       	cpc	r26, r1
    1200:	b1 05       	cpc	r27, r1
    1202:	10 f4       	brcc	.+4      	; 0x1208 <dir_next+0x118>
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	36 c0       	rjmp	.+108    	; 0x1274 <dir_next+0x184>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	9a 81       	ldd	r25, Y+2	; 0x02
    120c:	fc 01       	movw	r30, r24
    120e:	26 81       	ldd	r18, Z+6	; 0x06
    1210:	37 81       	ldd	r19, Z+7	; 0x07
    1212:	40 85       	ldd	r20, Z+8	; 0x08
    1214:	51 85       	ldd	r21, Z+9	; 0x09
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	af 81       	ldd	r26, Y+7	; 0x07
    121c:	b8 85       	ldd	r27, Y+8	; 0x08
    121e:	82 17       	cp	r24, r18
    1220:	93 07       	cpc	r25, r19
    1222:	a4 07       	cpc	r26, r20
    1224:	b5 07       	cpc	r27, r21
    1226:	10 f0       	brcs	.+4      	; 0x122c <dir_next+0x13c>
					return FR_NO_FILE;			/* Report EOT */
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	24 c0       	rjmp	.+72     	; 0x1274 <dir_next+0x184>
				dj->clust = clst;				/* Initialize data for new cluster */
    122c:	29 85       	ldd	r18, Y+9	; 0x09
    122e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	af 81       	ldd	r26, Y+7	; 0x07
    1236:	b8 85       	ldd	r27, Y+8	; 0x08
    1238:	f9 01       	movw	r30, r18
    123a:	80 87       	std	Z+8, r24	; 0x08
    123c:	91 87       	std	Z+9, r25	; 0x09
    123e:	a2 87       	std	Z+10, r26	; 0x0a
    1240:	b3 87       	std	Z+11, r27	; 0x0b
				dj->sect = clust2sect(clst);
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	af 81       	ldd	r26, Y+7	; 0x07
    1248:	b8 85       	ldd	r27, Y+8	; 0x08
    124a:	bc 01       	movw	r22, r24
    124c:	cd 01       	movw	r24, r26
    124e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <clust2sect>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	29 85       	ldd	r18, Y+9	; 0x09
    1258:	3a 85       	ldd	r19, Y+10	; 0x0a
    125a:	f9 01       	movw	r30, r18
    125c:	84 87       	std	Z+12, r24	; 0x0c
    125e:	95 87       	std	Z+13, r25	; 0x0d
    1260:	a6 87       	std	Z+14, r26	; 0x0e
    1262:	b7 87       	std	Z+15, r27	; 0x0f
			}
		}
	}

	dj->index = i;
    1264:	89 85       	ldd	r24, Y+9	; 0x09
    1266:	9a 85       	ldd	r25, Y+10	; 0x0a
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	fc 01       	movw	r30, r24
    126e:	31 83       	std	Z+1, r19	; 0x01
    1270:	20 83       	st	Z, r18

	return FR_OK;
    1272:	80 e0       	ldi	r24, 0x00	; 0
}
    1274:	2a 96       	adiw	r28, 0x0a	; 10
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	08 95       	ret

00001286 <dir_find>:
static
FRESULT dir_find (
	DIR *dj,		/* Pointer to the directory object linked to the file name */
	BYTE *dir		/* 32-byte working buffer */
)
{
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	00 d0       	rcall	.+0      	; 0x1290 <dir_find+0xa>
    1290:	00 d0       	rcall	.+0      	; 0x1292 <dir_find+0xc>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <dir_find+0xe>
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	9c 83       	std	Y+4, r25	; 0x04
    129a:	8b 83       	std	Y+3, r24	; 0x03
    129c:	7e 83       	std	Y+6, r23	; 0x06
    129e:	6d 83       	std	Y+5, r22	; 0x05
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <dir_rewind>
    12a8:	89 83       	std	Y+1, r24	; 0x01
	if (res != FR_OK) return res;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	88 23       	and	r24, r24
    12ae:	11 f0       	breq	.+4      	; 0x12b4 <dir_find+0x2e>
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	5b c0       	rjmp	.+182    	; 0x136a <dir_find+0xe4>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	fc 01       	movw	r30, r24
    12ba:	24 85       	ldd	r18, Z+12	; 0x0c
    12bc:	35 85       	ldd	r19, Z+13	; 0x0d
    12be:	46 85       	ldd	r20, Z+14	; 0x0e
    12c0:	57 85       	ldd	r21, Z+15	; 0x0f
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	fc 01       	movw	r30, r24
    12c8:	80 81       	ld	r24, Z
    12ca:	91 81       	ldd	r25, Z+1	; 0x01
    12cc:	8f 70       	andi	r24, 0x0F	; 15
    12ce:	90 70       	andi	r25, 0x00	; 0
    12d0:	fc 01       	movw	r30, r24
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	e2 95       	swap	r30
    12d8:	f2 95       	swap	r31
    12da:	f0 7f       	andi	r31, 0xF0	; 240
    12dc:	fe 27       	eor	r31, r30
    12de:	e0 7f       	andi	r30, 0xF0	; 240
    12e0:	fe 27       	eor	r31, r30
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	9e 81       	ldd	r25, Y+6	; 0x06
    12e6:	ba 01       	movw	r22, r20
    12e8:	a9 01       	movw	r20, r18
    12ea:	9f 01       	movw	r18, r30
    12ec:	00 e2       	ldi	r16, 0x20	; 32
    12ee:	10 e0       	ldi	r17, 0x00	; 0
    12f0:	0e 94 1c 04 	call	0x838	; 0x838 <disk_readp>
    12f4:	98 2f       	mov	r25, r24
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	99 23       	and	r25, r25
    12fa:	09 f4       	brne	.+2      	; 0x12fe <dir_find+0x78>
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	89 83       	std	Y+1, r24	; 0x01
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	88 23       	and	r24, r24
    1304:	71 f5       	brne	.+92     	; 0x1362 <dir_find+0xdc>
		c = dir[DIR_Name];	/* First character */
    1306:	8d 81       	ldd	r24, Y+5	; 0x05
    1308:	9e 81       	ldd	r25, Y+6	; 0x06
    130a:	fc 01       	movw	r30, r24
    130c:	80 81       	ld	r24, Z
    130e:	8a 83       	std	Y+2, r24	; 0x02
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	88 23       	and	r24, r24
    1314:	19 f4       	brne	.+6      	; 0x131c <dir_find+0x96>
    1316:	83 e0       	ldi	r24, 0x03	; 3
    1318:	89 83       	std	Y+1, r24	; 0x01
    131a:	26 c0       	rjmp	.+76     	; 0x1368 <dir_find+0xe2>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	0b 96       	adiw	r24, 0x0b	; 11
    1322:	fc 01       	movw	r30, r24
    1324:	80 81       	ld	r24, Z
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	88 70       	andi	r24, 0x08	; 8
    132c:	90 70       	andi	r25, 0x00	; 0
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	71 f4       	brne	.+28     	; 0x134e <dir_find+0xc8>
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	fc 01       	movw	r30, r24
    1338:	22 81       	ldd	r18, Z+2	; 0x02
    133a:	33 81       	ldd	r19, Z+3	; 0x03
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	b9 01       	movw	r22, r18
    1342:	4b e0       	ldi	r20, 0x0B	; 11
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	0e 94 d5 05 	call	0xbaa	; 0xbaa <mem_cmp>
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	61 f0       	breq	.+24     	; 0x1366 <dir_find+0xe0>
			break;
		res = dir_next(dj);					/* Next entry */
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	0e 94 78 08 	call	0x10f0	; 0x10f0 <dir_next>
    1356:	89 83       	std	Y+1, r24	; 0x01
	} while (res == FR_OK);
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	88 23       	and	r24, r24
    135c:	09 f4       	brne	.+2      	; 0x1360 <dir_find+0xda>
    135e:	aa cf       	rjmp	.-172    	; 0x12b4 <dir_find+0x2e>
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <dir_find+0xe2>
	if (res != FR_OK) return res;

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1362:	00 00       	nop
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <dir_find+0xe2>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
    1366:	00 00       	nop
		res = dir_next(dj);					/* Next entry */
	} while (res == FR_OK);

	return res;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
}
    136a:	26 96       	adiw	r28, 0x06	; 6
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	08 95       	ret

00001380 <dir_read>:
static
FRESULT dir_read (
	DIR *dj,		/* Pointer to the directory object to store read object name */
	BYTE *dir		/* 32-byte working buffer */
)
{
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	27 97       	sbiw	r28, 0x07	; 7
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	9d 83       	std	Y+5, r25	; 0x05
    139a:	8c 83       	std	Y+4, r24	; 0x04
    139c:	7f 83       	std	Y+7, r23	; 0x07
    139e:	6e 83       	std	Y+6, r22	; 0x06
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
    13a0:	83 e0       	ldi	r24, 0x03	; 3
    13a2:	89 83       	std	Y+1, r24	; 0x01
	while (dj->sect) {
    13a4:	50 c0       	rjmp	.+160    	; 0x1446 <dir_read+0xc6>
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	9d 81       	ldd	r25, Y+5	; 0x05
    13aa:	fc 01       	movw	r30, r24
    13ac:	24 85       	ldd	r18, Z+12	; 0x0c
    13ae:	35 85       	ldd	r19, Z+13	; 0x0d
    13b0:	46 85       	ldd	r20, Z+14	; 0x0e
    13b2:	57 85       	ldd	r21, Z+15	; 0x0f
    13b4:	8c 81       	ldd	r24, Y+4	; 0x04
    13b6:	9d 81       	ldd	r25, Y+5	; 0x05
    13b8:	fc 01       	movw	r30, r24
    13ba:	80 81       	ld	r24, Z
    13bc:	91 81       	ldd	r25, Z+1	; 0x01
    13be:	8f 70       	andi	r24, 0x0F	; 15
    13c0:	90 70       	andi	r25, 0x00	; 0
    13c2:	fc 01       	movw	r30, r24
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	e2 95       	swap	r30
    13ca:	f2 95       	swap	r31
    13cc:	f0 7f       	andi	r31, 0xF0	; 240
    13ce:	fe 27       	eor	r31, r30
    13d0:	e0 7f       	andi	r30, 0xF0	; 240
    13d2:	fe 27       	eor	r31, r30
    13d4:	8e 81       	ldd	r24, Y+6	; 0x06
    13d6:	9f 81       	ldd	r25, Y+7	; 0x07
    13d8:	ba 01       	movw	r22, r20
    13da:	a9 01       	movw	r20, r18
    13dc:	9f 01       	movw	r18, r30
    13de:	00 e2       	ldi	r16, 0x20	; 32
    13e0:	10 e0       	ldi	r17, 0x00	; 0
    13e2:	0e 94 1c 04 	call	0x838	; 0x838 <disk_readp>
    13e6:	98 2f       	mov	r25, r24
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	99 23       	and	r25, r25
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <dir_read+0x70>
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	89 83       	std	Y+1, r24	; 0x01
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	88 23       	and	r24, r24
    13f6:	a1 f5       	brne	.+104    	; 0x1460 <dir_read+0xe0>
		c = dir[DIR_Name];
    13f8:	8e 81       	ldd	r24, Y+6	; 0x06
    13fa:	9f 81       	ldd	r25, Y+7	; 0x07
    13fc:	fc 01       	movw	r30, r24
    13fe:	80 81       	ld	r24, Z
    1400:	8a 83       	std	Y+2, r24	; 0x02
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	88 23       	and	r24, r24
    1406:	19 f4       	brne	.+6      	; 0x140e <dir_read+0x8e>
    1408:	83 e0       	ldi	r24, 0x03	; 3
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	2e c0       	rjmp	.+92     	; 0x146a <dir_read+0xea>
		a = dir[DIR_Attr] & AM_MASK;
    140e:	8e 81       	ldd	r24, Y+6	; 0x06
    1410:	9f 81       	ldd	r25, Y+7	; 0x07
    1412:	0b 96       	adiw	r24, 0x0b	; 11
    1414:	fc 01       	movw	r30, r24
    1416:	80 81       	ld	r24, Z
    1418:	8f 73       	andi	r24, 0x3F	; 63
    141a:	8b 83       	std	Y+3, r24	; 0x03
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	85 3e       	cpi	r24, 0xE5	; 229
    1420:	51 f0       	breq	.+20     	; 0x1436 <dir_read+0xb6>
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	8e 32       	cpi	r24, 0x2E	; 46
    1426:	39 f0       	breq	.+14     	; 0x1436 <dir_read+0xb6>
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	88 70       	andi	r24, 0x08	; 8
    1430:	90 70       	andi	r25, 0x00	; 0
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	b9 f0       	breq	.+46     	; 0x1464 <dir_read+0xe4>
			break;
		res = dir_next(dj);			/* Next entry */
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	9d 81       	ldd	r25, Y+5	; 0x05
    143a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <dir_next>
    143e:	89 83       	std	Y+1, r24	; 0x01
		if (res != FR_OK) break;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	88 23       	and	r24, r24
    1444:	89 f4       	brne	.+34     	; 0x1468 <dir_read+0xe8>
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	9d 81       	ldd	r25, Y+5	; 0x05
    144a:	fc 01       	movw	r30, r24
    144c:	84 85       	ldd	r24, Z+12	; 0x0c
    144e:	95 85       	ldd	r25, Z+13	; 0x0d
    1450:	a6 85       	ldd	r26, Z+14	; 0x0e
    1452:	b7 85       	ldd	r27, Z+15	; 0x0f
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	a1 05       	cpc	r26, r1
    1458:	b1 05       	cpc	r27, r1
    145a:	09 f0       	breq	.+2      	; 0x145e <dir_read+0xde>
    145c:	a4 cf       	rjmp	.-184    	; 0x13a6 <dir_read+0x26>
    145e:	05 c0       	rjmp	.+10     	; 0x146a <dir_read+0xea>
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1460:	00 00       	nop
    1462:	03 c0       	rjmp	.+6      	; 0x146a <dir_read+0xea>
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		a = dir[DIR_Attr] & AM_MASK;
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
			break;
    1464:	00 00       	nop
    1466:	01 c0       	rjmp	.+2      	; 0x146a <dir_read+0xea>
		res = dir_next(dj);			/* Next entry */
		if (res != FR_OK) break;
    1468:	00 00       	nop
	}

	if (res != FR_OK) dj->sect = 0;
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	88 23       	and	r24, r24
    146e:	39 f0       	breq	.+14     	; 0x147e <dir_read+0xfe>
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	fc 01       	movw	r30, r24
    1476:	14 86       	std	Z+12, r1	; 0x0c
    1478:	15 86       	std	Z+13, r1	; 0x0d
    147a:	16 86       	std	Z+14, r1	; 0x0e
    147c:	17 86       	std	Z+15, r1	; 0x0f

	return res;
    147e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1480:	27 96       	adiw	r28, 0x07	; 7
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	f8 94       	cli
    1486:	de bf       	out	0x3e, r29	; 62
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	cd bf       	out	0x3d, r28	; 61
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	08 95       	ret

00001496 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const char **path	/* Pointer to pointer to the segment in the path string */
)
{
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	2c 97       	sbiw	r28, 0x0c	; 12
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	9a 87       	std	Y+10, r25	; 0x0a
    14ac:	89 87       	std	Y+9, r24	; 0x09
    14ae:	7c 87       	std	Y+12, r23	; 0x0c
    14b0:	6b 87       	std	Y+11, r22	; 0x0b
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    14b2:	89 85       	ldd	r24, Y+9	; 0x09
    14b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b6:	fc 01       	movw	r30, r24
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	93 81       	ldd	r25, Z+3	; 0x03
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8d 83       	std	Y+5, r24	; 0x05
	mem_set(sfn, ' ', 11);
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	60 e2       	ldi	r22, 0x20	; 32
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	4b e0       	ldi	r20, 0x0B	; 11
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	0e 94 a0 05 	call	0xb40	; 0xb40 <mem_set>
	si = i = 0; ni = 8;
    14d0:	1c 82       	std	Y+4, r1	; 0x04
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	8b 83       	std	Y+3, r24	; 0x03
    14d6:	88 e0       	ldi	r24, 0x08	; 8
    14d8:	8a 83       	std	Y+2, r24	; 0x02
	p = *path;
    14da:	8b 85       	ldd	r24, Y+11	; 0x0b
    14dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    14de:	fc 01       	movw	r30, r24
    14e0:	80 81       	ld	r24, Z
    14e2:	91 81       	ldd	r25, Z+1	; 0x01
    14e4:	98 87       	std	Y+8, r25	; 0x08
    14e6:	8f 83       	std	Y+7, r24	; 0x07
	for (;;) {
		c = p[si++];
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	2f 81       	ldd	r18, Y+7	; 0x07
    14f0:	38 85       	ldd	r19, Y+8	; 0x08
    14f2:	82 0f       	add	r24, r18
    14f4:	93 1f       	adc	r25, r19
    14f6:	fc 01       	movw	r30, r24
    14f8:	80 81       	ld	r24, Z
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	8f 5f       	subi	r24, 0xFF	; 255
    1500:	8b 83       	std	Y+3, r24	; 0x03
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	81 32       	cpi	r24, 0x21	; 33
    1506:	68 f1       	brcs	.+90     	; 0x1562 <create_name+0xcc>
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	8f 32       	cpi	r24, 0x2F	; 47
    150c:	51 f1       	breq	.+84     	; 0x1562 <create_name+0xcc>
		if (c == '.' || i >= ni) {
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	8e 32       	cpi	r24, 0x2E	; 46
    1512:	21 f0       	breq	.+8      	; 0x151c <create_name+0x86>
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	98 17       	cp	r25, r24
    151a:	60 f0       	brcs	.+24     	; 0x1534 <create_name+0x9e>
			if (ni != 8 || c != '.') break;
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	88 30       	cpi	r24, 0x08	; 8
    1520:	01 f5       	brne	.+64     	; 0x1562 <create_name+0xcc>
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	8e 32       	cpi	r24, 0x2E	; 46
    1526:	e9 f4       	brne	.+58     	; 0x1562 <create_name+0xcc>
			i = 8; ni = 11;
    1528:	88 e0       	ldi	r24, 0x08	; 8
    152a:	8c 83       	std	Y+4, r24	; 0x04
    152c:	8b e0       	ldi	r24, 0x0B	; 11
    152e:	8a 83       	std	Y+2, r24	; 0x02
			continue;
    1530:	00 00       	nop
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
    1532:	da cf       	rjmp	.-76     	; 0x14e8 <create_name+0x52>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	81 36       	cpi	r24, 0x61	; 97
    1538:	30 f0       	brcs	.+12     	; 0x1546 <create_name+0xb0>
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	8b 37       	cpi	r24, 0x7B	; 123
    153e:	18 f4       	brcc	.+6      	; 0x1546 <create_name+0xb0>
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	80 52       	subi	r24, 0x20	; 32
    1544:	89 83       	std	Y+1, r24	; 0x01
			sfn[i++] = c;
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	88 2f       	mov	r24, r24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	2d 81       	ldd	r18, Y+5	; 0x05
    154e:	3e 81       	ldd	r19, Y+6	; 0x06
    1550:	82 0f       	add	r24, r18
    1552:	93 1f       	adc	r25, r19
    1554:	29 81       	ldd	r18, Y+1	; 0x01
    1556:	fc 01       	movw	r30, r24
    1558:	20 83       	st	Z, r18
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	8f 5f       	subi	r24, 0xFF	; 255
    155e:	8c 83       	std	Y+4, r24	; 0x04
		}
	}
    1560:	c3 cf       	rjmp	.-122    	; 0x14e8 <create_name+0x52>
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	2f 81       	ldd	r18, Y+7	; 0x07
    156a:	38 85       	ldd	r19, Y+8	; 0x08
    156c:	28 0f       	add	r18, r24
    156e:	39 1f       	adc	r19, r25
    1570:	8b 85       	ldd	r24, Y+11	; 0x0b
    1572:	9c 85       	ldd	r25, Y+12	; 0x0c
    1574:	fc 01       	movw	r30, r24
    1576:	31 83       	std	Z+1, r19	; 0x01
    1578:	20 83       	st	Z, r18

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	0b 96       	adiw	r24, 0x0b	; 11
    1580:	21 e0       	ldi	r18, 0x01	; 1
    1582:	39 81       	ldd	r19, Y+1	; 0x01
    1584:	31 32       	cpi	r19, 0x21	; 33
    1586:	08 f0       	brcs	.+2      	; 0x158a <create_name+0xf4>
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	fc 01       	movw	r30, r24
    158c:	20 83       	st	Z, r18

	return FR_OK;
    158e:	80 e0       	ldi	r24, 0x00	; 0
}
    1590:	2c 96       	adiw	r28, 0x0c	; 12
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	08 95       	ret

000015a2 <get_fileinfo>:
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	BYTE *dir,			/* 32-byte working buffer */
	FILINFO *fno	 	/* Pointer to store the file information */
)
{
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	2a 97       	sbiw	r28, 0x0a	; 10
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	78 87       	std	Y+8, r23	; 0x08
    15bc:	6f 83       	std	Y+7, r22	; 0x07
    15be:	5a 87       	std	Y+10, r21	; 0x0a
    15c0:	49 87       	std	Y+9, r20	; 0x09
	BYTE i, c;
	char *p;


	p = fno->fname;
    15c2:	89 85       	ldd	r24, Y+9	; 0x09
    15c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c6:	09 96       	adiw	r24, 0x09	; 9
    15c8:	9c 83       	std	Y+4, r25	; 0x04
    15ca:	8b 83       	std	Y+3, r24	; 0x03
	if (dj->sect) {
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	fc 01       	movw	r30, r24
    15d2:	84 85       	ldd	r24, Z+12	; 0x0c
    15d4:	95 85       	ldd	r25, Z+13	; 0x0d
    15d6:	a6 85       	ldd	r26, Z+14	; 0x0e
    15d8:	b7 85       	ldd	r27, Z+15	; 0x0f
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	a1 05       	cpc	r26, r1
    15de:	b1 05       	cpc	r27, r1
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <get_fileinfo+0x42>
    15e2:	83 c0       	rjmp	.+262    	; 0x16ea <get_fileinfo+0x148>
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    15e4:	19 82       	std	Y+1, r1	; 0x01
    15e6:	1f c0       	rjmp	.+62     	; 0x1626 <get_fileinfo+0x84>
			c = dir[i];
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	2f 81       	ldd	r18, Y+7	; 0x07
    15f0:	38 85       	ldd	r19, Y+8	; 0x08
    15f2:	82 0f       	add	r24, r18
    15f4:	93 1f       	adc	r25, r19
    15f6:	fc 01       	movw	r30, r24
    15f8:	80 81       	ld	r24, Z
    15fa:	8a 83       	std	Y+2, r24	; 0x02
			if (c == ' ') break;
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	80 32       	cpi	r24, 0x20	; 32
    1600:	b1 f0       	breq	.+44     	; 0x162e <get_fileinfo+0x8c>
			if (c == 0x05) c = 0xE5;
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	85 30       	cpi	r24, 0x05	; 5
    1606:	11 f4       	brne	.+4      	; 0x160c <get_fileinfo+0x6a>
    1608:	85 ee       	ldi	r24, 0xE5	; 229
    160a:	8a 83       	std	Y+2, r24	; 0x02
			*p++ = c;
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	2a 81       	ldd	r18, Y+2	; 0x02
    1612:	fc 01       	movw	r30, r24
    1614:	20 83       	st	Z, r18
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	9c 83       	std	Y+4, r25	; 0x04
    161e:	8b 83       	std	Y+3, r24	; 0x03
	char *p;


	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	8f 5f       	subi	r24, 0xFF	; 255
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	88 30       	cpi	r24, 0x08	; 8
    162a:	f0 f2       	brcs	.-68     	; 0x15e8 <get_fileinfo+0x46>
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <get_fileinfo+0x8e>
			c = dir[i];
			if (c == ' ') break;
    162e:	00 00       	nop
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
    1630:	8f 81       	ldd	r24, Y+7	; 0x07
    1632:	98 85       	ldd	r25, Y+8	; 0x08
    1634:	08 96       	adiw	r24, 0x08	; 8
    1636:	fc 01       	movw	r30, r24
    1638:	80 81       	ld	r24, Z
    163a:	80 32       	cpi	r24, 0x20	; 32
    163c:	61 f1       	breq	.+88     	; 0x1696 <get_fileinfo+0xf4>
			*p++ = '.';
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	2e e2       	ldi	r18, 0x2E	; 46
    1644:	fc 01       	movw	r30, r24
    1646:	20 83       	st	Z, r18
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	9c 83       	std	Y+4, r25	; 0x04
    1650:	8b 83       	std	Y+3, r24	; 0x03
			for (i = 8; i < 11; i++) {
    1652:	88 e0       	ldi	r24, 0x08	; 8
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	1a c0       	rjmp	.+52     	; 0x168c <get_fileinfo+0xea>
				c = dir[i];
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	2f 81       	ldd	r18, Y+7	; 0x07
    1660:	38 85       	ldd	r19, Y+8	; 0x08
    1662:	82 0f       	add	r24, r18
    1664:	93 1f       	adc	r25, r19
    1666:	fc 01       	movw	r30, r24
    1668:	80 81       	ld	r24, Z
    166a:	8a 83       	std	Y+2, r24	; 0x02
				if (c == ' ') break;
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	80 32       	cpi	r24, 0x20	; 32
    1670:	89 f0       	breq	.+34     	; 0x1694 <get_fileinfo+0xf2>
				*p++ = c;
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	2a 81       	ldd	r18, Y+2	; 0x02
    1678:	fc 01       	movw	r30, r24
    167a:	20 83       	st	Z, r18
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	9c 83       	std	Y+4, r25	; 0x04
    1684:	8b 83       	std	Y+3, r24	; 0x03
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	8f 5f       	subi	r24, 0xFF	; 255
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	8b 30       	cpi	r24, 0x0B	; 11
    1690:	18 f3       	brcs	.-58     	; 0x1658 <get_fileinfo+0xb6>
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <get_fileinfo+0xf4>
				c = dir[i];
				if (c == ' ') break;
    1694:	00 00       	nop
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    1696:	8f 81       	ldd	r24, Y+7	; 0x07
    1698:	98 85       	ldd	r25, Y+8	; 0x08
    169a:	fc 01       	movw	r30, r24
    169c:	23 85       	ldd	r18, Z+11	; 0x0b
    169e:	89 85       	ldd	r24, Y+9	; 0x09
    16a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a2:	fc 01       	movw	r30, r24
    16a4:	20 87       	std	Z+8, r18	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    16a6:	8f 81       	ldd	r24, Y+7	; 0x07
    16a8:	98 85       	ldd	r25, Y+8	; 0x08
    16aa:	fc 01       	movw	r30, r24
    16ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    16ae:	95 8d       	ldd	r25, Z+29	; 0x1d
    16b0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    16b2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    16b4:	29 85       	ldd	r18, Y+9	; 0x09
    16b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    16b8:	f9 01       	movw	r30, r18
    16ba:	80 83       	st	Z, r24
    16bc:	91 83       	std	Z+1, r25	; 0x01
    16be:	a2 83       	std	Z+2, r26	; 0x02
    16c0:	b3 83       	std	Z+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    16c2:	8f 81       	ldd	r24, Y+7	; 0x07
    16c4:	98 85       	ldd	r25, Y+8	; 0x08
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 8d       	ldd	r18, Z+24	; 0x18
    16ca:	31 8d       	ldd	r19, Z+25	; 0x19
    16cc:	89 85       	ldd	r24, Y+9	; 0x09
    16ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d0:	fc 01       	movw	r30, r24
    16d2:	35 83       	std	Z+5, r19	; 0x05
    16d4:	24 83       	std	Z+4, r18	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    16d6:	8f 81       	ldd	r24, Y+7	; 0x07
    16d8:	98 85       	ldd	r25, Y+8	; 0x08
    16da:	fc 01       	movw	r30, r24
    16dc:	26 89       	ldd	r18, Z+22	; 0x16
    16de:	37 89       	ldd	r19, Z+23	; 0x17
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	fc 01       	movw	r30, r24
    16e6:	37 83       	std	Z+7, r19	; 0x07
    16e8:	26 83       	std	Z+6, r18	; 0x06
	}
	*p = 0;
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	9c 81       	ldd	r25, Y+4	; 0x04
    16ee:	fc 01       	movw	r30, r24
    16f0:	10 82       	st	Z, r1
}
    16f2:	2a 96       	adiw	r28, 0x0a	; 10
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	08 95       	ret

00001704 <follow_path>:
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	27 97       	sbiw	r28, 0x07	; 7
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	9b 83       	std	Y+3, r25	; 0x03
    171a:	8a 83       	std	Y+2, r24	; 0x02
    171c:	7d 83       	std	Y+5, r23	; 0x05
    171e:	6c 83       	std	Y+4, r22	; 0x04
    1720:	5f 83       	std	Y+7, r21	; 0x07
    1722:	4e 83       	std	Y+6, r20	; 0x06
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
    1724:	05 c0       	rjmp	.+10     	; 0x1730 <follow_path+0x2c>
    1726:	8e 81       	ldd	r24, Y+6	; 0x06
    1728:	9f 81       	ldd	r25, Y+7	; 0x07
    172a:	01 96       	adiw	r24, 0x01	; 1
    172c:	9f 83       	std	Y+7, r25	; 0x07
    172e:	8e 83       	std	Y+6, r24	; 0x06
    1730:	8e 81       	ldd	r24, Y+6	; 0x06
    1732:	9f 81       	ldd	r25, Y+7	; 0x07
    1734:	fc 01       	movw	r30, r24
    1736:	80 81       	ld	r24, Z
    1738:	80 32       	cpi	r24, 0x20	; 32
    173a:	a9 f3       	breq	.-22     	; 0x1726 <follow_path+0x22>
	if (*path == '/') path++;			/* Strip heading separator */
    173c:	8e 81       	ldd	r24, Y+6	; 0x06
    173e:	9f 81       	ldd	r25, Y+7	; 0x07
    1740:	fc 01       	movw	r30, r24
    1742:	80 81       	ld	r24, Z
    1744:	8f 32       	cpi	r24, 0x2F	; 47
    1746:	29 f4       	brne	.+10     	; 0x1752 <follow_path+0x4e>
    1748:	8e 81       	ldd	r24, Y+6	; 0x06
    174a:	9f 81       	ldd	r25, Y+7	; 0x07
    174c:	01 96       	adiw	r24, 0x01	; 1
    174e:	9f 83       	std	Y+7, r25	; 0x07
    1750:	8e 83       	std	Y+6, r24	; 0x06
	dj->sclust = 0;						/* Set start directory (always root dir) */
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	9b 81       	ldd	r25, Y+3	; 0x03
    1756:	fc 01       	movw	r30, r24
    1758:	14 82       	std	Z+4, r1	; 0x04
    175a:	15 82       	std	Z+5, r1	; 0x05
    175c:	16 82       	std	Z+6, r1	; 0x06
    175e:	17 82       	std	Z+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
    1760:	8e 81       	ldd	r24, Y+6	; 0x06
    1762:	9f 81       	ldd	r25, Y+7	; 0x07
    1764:	fc 01       	movw	r30, r24
    1766:	80 81       	ld	r24, Z
    1768:	81 32       	cpi	r24, 0x21	; 33
    176a:	50 f4       	brcc	.+20     	; 0x1780 <follow_path+0x7c>
		res = dir_rewind(dj);
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	9b 81       	ldd	r25, Y+3	; 0x03
    1770:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <dir_rewind>
    1774:	89 83       	std	Y+1, r24	; 0x01
		dir[0] = 0;
    1776:	8c 81       	ldd	r24, Y+4	; 0x04
    1778:	9d 81       	ldd	r25, Y+5	; 0x05
    177a:	fc 01       	movw	r30, r24
    177c:	10 82       	st	Z, r1
    177e:	68 c0       	rjmp	.+208    	; 0x1850 <follow_path+0x14c>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	9b 81       	ldd	r25, Y+3	; 0x03
    1784:	9e 01       	movw	r18, r28
    1786:	2a 5f       	subi	r18, 0xFA	; 250
    1788:	3f 4f       	sbci	r19, 0xFF	; 255
    178a:	b9 01       	movw	r22, r18
    178c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <create_name>
    1790:	89 83       	std	Y+1, r24	; 0x01
			if (res != FR_OK) break;
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	88 23       	and	r24, r24
    1796:	09 f0       	breq	.+2      	; 0x179a <follow_path+0x96>
    1798:	56 c0       	rjmp	.+172    	; 0x1846 <follow_path+0x142>
			res = dir_find(dj, dir);		/* Find it */
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	9b 81       	ldd	r25, Y+3	; 0x03
    179e:	2c 81       	ldd	r18, Y+4	; 0x04
    17a0:	3d 81       	ldd	r19, Y+5	; 0x05
    17a2:	b9 01       	movw	r22, r18
    17a4:	0e 94 43 09 	call	0x1286	; 0x1286 <dir_find>
    17a8:	89 83       	std	Y+1, r24	; 0x01
			if (res != FR_OK) {				/* Could not find the object */
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	88 23       	and	r24, r24
    17ae:	91 f0       	breq	.+36     	; 0x17d4 <follow_path+0xd0>
				if (res == FR_NO_FILE && !*(dj->fn+11))
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	83 30       	cpi	r24, 0x03	; 3
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <follow_path+0xb4>
    17b6:	49 c0       	rjmp	.+146    	; 0x184a <follow_path+0x146>
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	9b 81       	ldd	r25, Y+3	; 0x03
    17bc:	fc 01       	movw	r30, r24
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	0b 96       	adiw	r24, 0x0b	; 11
    17c4:	fc 01       	movw	r30, r24
    17c6:	80 81       	ld	r24, Z
    17c8:	88 23       	and	r24, r24
    17ca:	09 f0       	breq	.+2      	; 0x17ce <follow_path+0xca>
    17cc:	3e c0       	rjmp	.+124    	; 0x184a <follow_path+0x146>
					res = FR_NO_PATH;
    17ce:	84 e0       	ldi	r24, 0x04	; 4
    17d0:	89 83       	std	Y+1, r24	; 0x01
				break;
    17d2:	3b c0       	rjmp	.+118    	; 0x184a <follow_path+0x146>
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	9b 81       	ldd	r25, Y+3	; 0x03
    17d8:	fc 01       	movw	r30, r24
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	0b 96       	adiw	r24, 0x0b	; 11
    17e0:	fc 01       	movw	r30, r24
    17e2:	80 81       	ld	r24, Z
    17e4:	88 23       	and	r24, r24
    17e6:	99 f5       	brne	.+102    	; 0x184e <follow_path+0x14a>
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	9d 81       	ldd	r25, Y+5	; 0x05
    17ec:	0b 96       	adiw	r24, 0x0b	; 11
    17ee:	fc 01       	movw	r30, r24
    17f0:	80 81       	ld	r24, Z
    17f2:	88 2f       	mov	r24, r24
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	80 71       	andi	r24, 0x10	; 16
    17f8:	90 70       	andi	r25, 0x00	; 0
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	19 f4       	brne	.+6      	; 0x1804 <follow_path+0x100>
				res = FR_NO_PATH; break;
    17fe:	84 e0       	ldi	r24, 0x04	; 4
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	26 c0       	rjmp	.+76     	; 0x1850 <follow_path+0x14c>
			}
			dj->sclust = LD_CLUST(dir);
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	9d 81       	ldd	r25, Y+5	; 0x05
    1808:	44 96       	adiw	r24, 0x14	; 20
    180a:	fc 01       	movw	r30, r24
    180c:	80 81       	ld	r24, Z
    180e:	91 81       	ldd	r25, Z+1	; 0x01
    1810:	cc 01       	movw	r24, r24
    1812:	a0 e0       	ldi	r26, 0x00	; 0
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	ac 01       	movw	r20, r24
    1818:	33 27       	eor	r19, r19
    181a:	22 27       	eor	r18, r18
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	9d 81       	ldd	r25, Y+5	; 0x05
    1820:	4a 96       	adiw	r24, 0x1a	; 26
    1822:	fc 01       	movw	r30, r24
    1824:	80 81       	ld	r24, Z
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	cc 01       	movw	r24, r24
    182a:	a0 e0       	ldi	r26, 0x00	; 0
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	82 2b       	or	r24, r18
    1830:	93 2b       	or	r25, r19
    1832:	a4 2b       	or	r26, r20
    1834:	b5 2b       	or	r27, r21
    1836:	2a 81       	ldd	r18, Y+2	; 0x02
    1838:	3b 81       	ldd	r19, Y+3	; 0x03
    183a:	f9 01       	movw	r30, r18
    183c:	84 83       	std	Z+4, r24	; 0x04
    183e:	95 83       	std	Z+5, r25	; 0x05
    1840:	a6 83       	std	Z+6, r26	; 0x06
    1842:	b7 83       	std	Z+7, r27	; 0x07
		}
    1844:	9d cf       	rjmp	.-198    	; 0x1780 <follow_path+0x7c>
		dir[0] = 0;

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
    1846:	00 00       	nop
    1848:	03 c0       	rjmp	.+6      	; 0x1850 <follow_path+0x14c>
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
    184a:	00 00       	nop
    184c:	01 c0       	rjmp	.+2      	; 0x1850 <follow_path+0x14c>
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    184e:	00 00       	nop
			}
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
    1850:	89 81       	ldd	r24, Y+1	; 0x01
}
    1852:	27 96       	adiw	r28, 0x07	; 7
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	08 95       	ret

00001864 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	00 d0       	rcall	.+0      	; 0x186e <check_fs+0xa>
    186e:	00 d0       	rcall	.+0      	; 0x1870 <check_fs+0xc>
    1870:	00 d0       	rcall	.+0      	; 0x1872 <check_fs+0xe>
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	9a 83       	std	Y+2, r25	; 0x02
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	4b 83       	std	Y+3, r20	; 0x03
    187c:	5c 83       	std	Y+4, r21	; 0x04
    187e:	6d 83       	std	Y+5, r22	; 0x05
    1880:	7e 83       	std	Y+6, r23	; 0x06
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	2b 81       	ldd	r18, Y+3	; 0x03
    1888:	3c 81       	ldd	r19, Y+4	; 0x04
    188a:	4d 81       	ldd	r20, Y+5	; 0x05
    188c:	5e 81       	ldd	r21, Y+6	; 0x06
    188e:	ba 01       	movw	r22, r20
    1890:	a9 01       	movw	r20, r18
    1892:	2e ef       	ldi	r18, 0xFE	; 254
    1894:	31 e0       	ldi	r19, 0x01	; 1
    1896:	02 e0       	ldi	r16, 0x02	; 2
    1898:	10 e0       	ldi	r17, 0x00	; 0
    189a:	0e 94 1c 04 	call	0x838	; 0x838 <disk_readp>
    189e:	88 23       	and	r24, r24
    18a0:	11 f0       	breq	.+4      	; 0x18a6 <check_fs+0x42>
		return 3;
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	42 c0       	rjmp	.+132    	; 0x192a <check_fs+0xc6>
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	fc 01       	movw	r30, r24
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	fa ea       	ldi	r31, 0xAA	; 170
    18b2:	85 35       	cpi	r24, 0x55	; 85
    18b4:	9f 07       	cpc	r25, r31
    18b6:	11 f0       	breq	.+4      	; 0x18bc <check_fs+0x58>
		return 2;
    18b8:	82 e0       	ldi	r24, 0x02	; 2
    18ba:	37 c0       	rjmp	.+110    	; 0x192a <check_fs+0xc6>

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	9a 81       	ldd	r25, Y+2	; 0x02
    18c0:	2b 81       	ldd	r18, Y+3	; 0x03
    18c2:	3c 81       	ldd	r19, Y+4	; 0x04
    18c4:	4d 81       	ldd	r20, Y+5	; 0x05
    18c6:	5e 81       	ldd	r21, Y+6	; 0x06
    18c8:	ba 01       	movw	r22, r20
    18ca:	a9 01       	movw	r20, r18
    18cc:	26 e3       	ldi	r18, 0x36	; 54
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	02 e0       	ldi	r16, 0x02	; 2
    18d2:	10 e0       	ldi	r17, 0x00	; 0
    18d4:	0e 94 1c 04 	call	0x838	; 0x838 <disk_readp>
    18d8:	88 23       	and	r24, r24
    18da:	59 f4       	brne	.+22     	; 0x18f2 <check_fs+0x8e>
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	fc 01       	movw	r30, r24
    18e2:	80 81       	ld	r24, Z
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	f1 e4       	ldi	r31, 0x41	; 65
    18e8:	86 34       	cpi	r24, 0x46	; 70
    18ea:	9f 07       	cpc	r25, r31
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <check_fs+0x8e>
		return 0;
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	1c c0       	rjmp	.+56     	; 0x192a <check_fs+0xc6>
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	9a 81       	ldd	r25, Y+2	; 0x02
    18f6:	2b 81       	ldd	r18, Y+3	; 0x03
    18f8:	3c 81       	ldd	r19, Y+4	; 0x04
    18fa:	4d 81       	ldd	r20, Y+5	; 0x05
    18fc:	5e 81       	ldd	r21, Y+6	; 0x06
    18fe:	ba 01       	movw	r22, r20
    1900:	a9 01       	movw	r20, r18
    1902:	22 e5       	ldi	r18, 0x52	; 82
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	02 e0       	ldi	r16, 0x02	; 2
    1908:	10 e0       	ldi	r17, 0x00	; 0
    190a:	0e 94 1c 04 	call	0x838	; 0x838 <disk_readp>
    190e:	88 23       	and	r24, r24
    1910:	59 f4       	brne	.+22     	; 0x1928 <check_fs+0xc4>
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	fc 01       	movw	r30, r24
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	f1 e4       	ldi	r31, 0x41	; 65
    191e:	86 34       	cpi	r24, 0x46	; 70
    1920:	9f 07       	cpc	r25, r31
    1922:	11 f4       	brne	.+4      	; 0x1928 <check_fs+0xc4>
		return 0;
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	01 c0       	rjmp	.+2      	; 0x192a <check_fs+0xc6>
	return 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
}
    192a:	26 96       	adiw	r28, 0x06	; 6
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	08 95       	ret

00001940 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    1940:	ef 92       	push	r14
    1942:	ff 92       	push	r15
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	e7 97       	sbiw	r28, 0x37	; 55
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	9f ab       	sts	0x5f, r25
    195e:	8e ab       	sts	0x5e, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    1960:	10 92 08 01 	sts	0x0108, r1
    1964:	10 92 07 01 	sts	0x0107, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    1968:	8e a9       	sts	0x4e, r24
    196a:	9f a9       	sts	0x4f, r25
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	11 f4       	brne	.+4      	; 0x1974 <pf_mount+0x34>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	ab c1       	rjmp	.+854    	; 0x1cca <pf_mount+0x38a>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    1974:	0e 94 19 03 	call	0x632	; 0x632 <disk_initialize>
    1978:	88 2f       	mov	r24, r24
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	81 70       	andi	r24, 0x01	; 1
    197e:	90 70       	andi	r25, 0x00	; 0
    1980:	88 23       	and	r24, r24
    1982:	11 f0       	breq	.+4      	; 0x1988 <pf_mount+0x48>
		return FR_NOT_READY;
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	a1 c1       	rjmp	.+834    	; 0x1cca <pf_mount+0x38a>

	/* Search FAT partition on the drive */
	bsect = 0;
    1988:	1a 82       	std	Y+2, r1	; 0x02
    198a:	1b 82       	std	Y+3, r1	; 0x03
    198c:	1c 82       	std	Y+4, r1	; 0x04
    198e:	1d 82       	std	Y+5, r1	; 0x05
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    1990:	ce 01       	movw	r24, r28
    1992:	42 96       	adiw	r24, 0x12	; 18
    1994:	2a 81       	ldd	r18, Y+2	; 0x02
    1996:	3b 81       	ldd	r19, Y+3	; 0x03
    1998:	4c 81       	ldd	r20, Y+4	; 0x04
    199a:	5d 81       	ldd	r21, Y+5	; 0x05
    199c:	ba 01       	movw	r22, r20
    199e:	a9 01       	movw	r20, r18
    19a0:	0e 94 32 0c 	call	0x1864	; 0x1864 <check_fs>
    19a4:	89 83       	std	Y+1, r24	; 0x01
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	61 f5       	brne	.+88     	; 0x1a04 <pf_mount+0xc4>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    19ac:	ce 01       	movw	r24, r28
    19ae:	42 96       	adiw	r24, 0x12	; 18
    19b0:	2a 81       	ldd	r18, Y+2	; 0x02
    19b2:	3b 81       	ldd	r19, Y+3	; 0x03
    19b4:	4c 81       	ldd	r20, Y+4	; 0x04
    19b6:	5d 81       	ldd	r21, Y+5	; 0x05
    19b8:	ba 01       	movw	r22, r20
    19ba:	a9 01       	movw	r20, r18
    19bc:	2e eb       	ldi	r18, 0xBE	; 190
    19be:	31 e0       	ldi	r19, 0x01	; 1
    19c0:	00 e1       	ldi	r16, 0x10	; 16
    19c2:	10 e0       	ldi	r17, 0x00	; 0
    19c4:	0e 94 1c 04 	call	0x838	; 0x838 <disk_readp>
    19c8:	88 23       	and	r24, r24
    19ca:	19 f0       	breq	.+6      	; 0x19d2 <pf_mount+0x92>
			fmt = 3;
    19cc:	83 e0       	ldi	r24, 0x03	; 3
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	19 c0       	rjmp	.+50     	; 0x1a04 <pf_mount+0xc4>
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    19d2:	8e 89       	ldd	r24, Y+22	; 0x16
    19d4:	88 23       	and	r24, r24
    19d6:	b1 f0       	breq	.+44     	; 0x1a04 <pf_mount+0xc4>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    19d8:	ce 01       	movw	r24, r28
    19da:	42 96       	adiw	r24, 0x12	; 18
    19dc:	fc 01       	movw	r30, r24
    19de:	80 85       	ldd	r24, Z+8	; 0x08
    19e0:	91 85       	ldd	r25, Z+9	; 0x09
    19e2:	a2 85       	ldd	r26, Z+10	; 0x0a
    19e4:	b3 85       	ldd	r27, Z+11	; 0x0b
    19e6:	8a 83       	std	Y+2, r24	; 0x02
    19e8:	9b 83       	std	Y+3, r25	; 0x03
    19ea:	ac 83       	std	Y+4, r26	; 0x04
    19ec:	bd 83       	std	Y+5, r27	; 0x05
				fmt = check_fs(buf, bsect);	/* Check the partition */
    19ee:	ce 01       	movw	r24, r28
    19f0:	42 96       	adiw	r24, 0x12	; 18
    19f2:	2a 81       	ldd	r18, Y+2	; 0x02
    19f4:	3b 81       	ldd	r19, Y+3	; 0x03
    19f6:	4c 81       	ldd	r20, Y+4	; 0x04
    19f8:	5d 81       	ldd	r21, Y+5	; 0x05
    19fa:	ba 01       	movw	r22, r20
    19fc:	a9 01       	movw	r20, r18
    19fe:	0e 94 32 0c 	call	0x1864	; 0x1864 <check_fs>
    1a02:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	83 30       	cpi	r24, 0x03	; 3
    1a08:	11 f4       	brne	.+4      	; 0x1a0e <pf_mount+0xce>
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	5e c1       	rjmp	.+700    	; 0x1cca <pf_mount+0x38a>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	88 23       	and	r24, r24
    1a12:	11 f0       	breq	.+4      	; 0x1a18 <pf_mount+0xd8>
    1a14:	87 e0       	ldi	r24, 0x07	; 7
    1a16:	59 c1       	rjmp	.+690    	; 0x1cca <pf_mount+0x38a>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    1a18:	ce 01       	movw	r24, r28
    1a1a:	42 96       	adiw	r24, 0x12	; 18
    1a1c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a1e:	3b 81       	ldd	r19, Y+3	; 0x03
    1a20:	4c 81       	ldd	r20, Y+4	; 0x04
    1a22:	5d 81       	ldd	r21, Y+5	; 0x05
    1a24:	ba 01       	movw	r22, r20
    1a26:	a9 01       	movw	r20, r18
    1a28:	2d e0       	ldi	r18, 0x0D	; 13
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	04 e2       	ldi	r16, 0x24	; 36
    1a2e:	10 e0       	ldi	r17, 0x00	; 0
    1a30:	0e 94 1c 04 	call	0x838	; 0x838 <disk_readp>
    1a34:	88 23       	and	r24, r24
    1a36:	11 f0       	breq	.+4      	; 0x1a3c <pf_mount+0xfc>
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	47 c1       	rjmp	.+654    	; 0x1cca <pf_mount+0x38a>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	42 96       	adiw	r24, 0x12	; 18
    1a40:	09 96       	adiw	r24, 0x09	; 9
    1a42:	fc 01       	movw	r30, r24
    1a44:	80 81       	ld	r24, Z
    1a46:	91 81       	ldd	r25, Z+1	; 0x01
    1a48:	cc 01       	movw	r24, r24
    1a4a:	a0 e0       	ldi	r26, 0x00	; 0
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	8e 83       	std	Y+6, r24	; 0x06
    1a50:	9f 83       	std	Y+7, r25	; 0x07
    1a52:	a8 87       	std	Y+8, r26	; 0x08
    1a54:	b9 87       	std	Y+9, r27	; 0x09
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    1a56:	8e 81       	ldd	r24, Y+6	; 0x06
    1a58:	9f 81       	ldd	r25, Y+7	; 0x07
    1a5a:	a8 85       	ldd	r26, Y+8	; 0x08
    1a5c:	b9 85       	ldd	r27, Y+9	; 0x09
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	a1 05       	cpc	r26, r1
    1a62:	b1 05       	cpc	r27, r1
    1a64:	59 f4       	brne	.+22     	; 0x1a7c <pf_mount+0x13c>
    1a66:	ce 01       	movw	r24, r28
    1a68:	42 96       	adiw	r24, 0x12	; 18
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	87 89       	ldd	r24, Z+23	; 0x17
    1a6e:	90 8d       	ldd	r25, Z+24	; 0x18
    1a70:	a1 8d       	ldd	r26, Z+25	; 0x19
    1a72:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1a74:	8e 83       	std	Y+6, r24	; 0x06
    1a76:	9f 83       	std	Y+7, r25	; 0x07
    1a78:	a8 87       	std	Y+8, r26	; 0x08
    1a7a:	b9 87       	std	Y+9, r27	; 0x09

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    1a7c:	8d 89       	ldd	r24, Y+21	; 0x15
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	50 e0       	ldi	r21, 0x00	; 0
    1a86:	8e 81       	ldd	r24, Y+6	; 0x06
    1a88:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8a:	a8 85       	ldd	r26, Y+8	; 0x08
    1a8c:	b9 85       	ldd	r27, Y+9	; 0x09
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <__mulsi3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	8e 83       	std	Y+6, r24	; 0x06
    1a9c:	9f 83       	std	Y+7, r25	; 0x07
    1a9e:	a8 87       	std	Y+8, r26	; 0x08
    1aa0:	b9 87       	std	Y+9, r27	; 0x09
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	42 96       	adiw	r24, 0x12	; 18
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	80 81       	ld	r24, Z
    1aac:	91 81       	ldd	r25, Z+1	; 0x01
    1aae:	9c 01       	movw	r18, r24
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab8:	ac 81       	ldd	r26, Y+4	; 0x04
    1aba:	bd 81       	ldd	r27, Y+5	; 0x05
    1abc:	82 0f       	add	r24, r18
    1abe:	93 1f       	adc	r25, r19
    1ac0:	a4 1f       	adc	r26, r20
    1ac2:	b5 1f       	adc	r27, r21
    1ac4:	2e a9       	sts	0x4e, r18
    1ac6:	3f a9       	sts	0x4f, r19
    1ac8:	f9 01       	movw	r30, r18
    1aca:	82 87       	std	Z+10, r24	; 0x0a
    1acc:	93 87       	std	Z+11, r25	; 0x0b
    1ace:	a4 87       	std	Z+12, r26	; 0x0c
    1ad0:	b5 87       	std	Z+13, r27	; 0x0d
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    1ad2:	2a 89       	ldd	r18, Y+18	; 0x12
    1ad4:	8e a9       	sts	0x4e, r24
    1ad6:	9f a9       	sts	0x4f, r25
    1ad8:	fc 01       	movw	r30, r24
    1ada:	22 83       	std	Z+2, r18	; 0x02
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    1adc:	ce 01       	movw	r24, r28
    1ade:	42 96       	adiw	r24, 0x12	; 18
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	24 81       	ldd	r18, Z+4	; 0x04
    1ae4:	35 81       	ldd	r19, Z+5	; 0x05
    1ae6:	8e a9       	sts	0x4e, r24
    1ae8:	9f a9       	sts	0x4f, r25
    1aea:	fc 01       	movw	r30, r24
    1aec:	35 83       	std	Z+5, r19	; 0x05
    1aee:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    1af0:	ce 01       	movw	r24, r28
    1af2:	42 96       	adiw	r24, 0x12	; 18
    1af4:	06 96       	adiw	r24, 0x06	; 6
    1af6:	fc 01       	movw	r30, r24
    1af8:	80 81       	ld	r24, Z
    1afa:	91 81       	ldd	r25, Z+1	; 0x01
    1afc:	cc 01       	movw	r24, r24
    1afe:	a0 e0       	ldi	r26, 0x00	; 0
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	8a 87       	std	Y+10, r24	; 0x0a
    1b04:	9b 87       	std	Y+11, r25	; 0x0b
    1b06:	ac 87       	std	Y+12, r26	; 0x0c
    1b08:	bd 87       	std	Y+13, r27	; 0x0d
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    1b0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b0e:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b10:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	a1 05       	cpc	r26, r1
    1b16:	b1 05       	cpc	r27, r1
    1b18:	59 f4       	brne	.+22     	; 0x1b30 <pf_mount+0x1f0>
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	42 96       	adiw	r24, 0x12	; 18
    1b1e:	fc 01       	movw	r30, r24
    1b20:	83 89       	ldd	r24, Z+19	; 0x13
    1b22:	94 89       	ldd	r25, Z+20	; 0x14
    1b24:	a5 89       	ldd	r26, Z+21	; 0x15
    1b26:	b6 89       	ldd	r27, Z+22	; 0x16
    1b28:	8a 87       	std	Y+10, r24	; 0x0a
    1b2a:	9b 87       	std	Y+11, r25	; 0x0b
    1b2c:	ac 87       	std	Y+12, r26	; 0x0c
    1b2e:	bd 87       	std	Y+13, r27	; 0x0d
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
    1b30:	ce 01       	movw	r24, r28
    1b32:	42 96       	adiw	r24, 0x12	; 18
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	fc 01       	movw	r30, r24
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	cc 01       	movw	r24, r24
    1b3e:	a0 e0       	ldi	r26, 0x00	; 0
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b44:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b46:	4c 85       	ldd	r20, Y+12	; 0x0c
    1b48:	5d 85       	ldd	r21, Y+13	; 0x0d
    1b4a:	28 1b       	sub	r18, r24
    1b4c:	39 0b       	sbc	r19, r25
    1b4e:	4a 0b       	sbc	r20, r26
    1b50:	5b 0b       	sbc	r21, r27
    1b52:	8e 81       	ldd	r24, Y+6	; 0x06
    1b54:	9f 81       	ldd	r25, Y+7	; 0x07
    1b56:	a8 85       	ldd	r26, Y+8	; 0x08
    1b58:	b9 85       	ldd	r27, Y+9	; 0x09
    1b5a:	28 1b       	sub	r18, r24
    1b5c:	39 0b       	sbc	r19, r25
    1b5e:	4a 0b       	sbc	r20, r26
    1b60:	5b 0b       	sbc	r21, r27
    1b62:	8e a9       	sts	0x4e, r24
    1b64:	9f a9       	sts	0x4f, r25
    1b66:	fc 01       	movw	r30, r24
    1b68:	84 81       	ldd	r24, Z+4	; 0x04
    1b6a:	95 81       	ldd	r25, Z+5	; 0x05
    1b6c:	92 95       	swap	r25
    1b6e:	82 95       	swap	r24
    1b70:	8f 70       	andi	r24, 0x0F	; 15
    1b72:	89 27       	eor	r24, r25
    1b74:	9f 70       	andi	r25, 0x0F	; 15
    1b76:	89 27       	eor	r24, r25
    1b78:	cc 01       	movw	r24, r24
    1b7a:	a0 e0       	ldi	r26, 0x00	; 0
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	79 01       	movw	r14, r18
    1b80:	8a 01       	movw	r16, r20
    1b82:	e8 1a       	sub	r14, r24
    1b84:	f9 0a       	sbc	r15, r25
    1b86:	0a 0b       	sbc	r16, r26
    1b88:	1b 0b       	sbc	r17, r27
    1b8a:	d8 01       	movw	r26, r16
    1b8c:	c7 01       	movw	r24, r14
		) / fs->csize + 2;
    1b8e:	2e a9       	sts	0x4e, r18
    1b90:	3f a9       	sts	0x4f, r19
    1b92:	f9 01       	movw	r30, r18
    1b94:	22 81       	ldd	r18, Z+2	; 0x02
    1b96:	22 2f       	mov	r18, r18
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <__udivmodsi4>
    1ba6:	da 01       	movw	r26, r20
    1ba8:	c9 01       	movw	r24, r18
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
    1baa:	02 96       	adiw	r24, 0x02	; 2
    1bac:	a1 1d       	adc	r26, r1
    1bae:	b1 1d       	adc	r27, r1
    1bb0:	8e 87       	std	Y+14, r24	; 0x0e
    1bb2:	9f 87       	std	Y+15, r25	; 0x0f
    1bb4:	a8 8b       	std	Y+16, r26	; 0x10
    1bb6:	b9 8b       	std	Y+17, r27	; 0x11
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    1bb8:	2e a9       	sts	0x4e, r18
    1bba:	3f a9       	sts	0x4f, r19
    1bbc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bbe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bc0:	a8 89       	ldd	r26, Y+16	; 0x10
    1bc2:	b9 89       	ldd	r27, Y+17	; 0x11
    1bc4:	f9 01       	movw	r30, r18
    1bc6:	86 83       	std	Z+6, r24	; 0x06
    1bc8:	97 83       	std	Z+7, r25	; 0x07
    1bca:	a0 87       	std	Z+8, r26	; 0x08
    1bcc:	b1 87       	std	Z+9, r27	; 0x09

	fmt = FS_FAT16;							/* Determine the FAT sub type */
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	89 83       	std	Y+1, r24	; 0x01
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
    1bd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bd4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bd6:	a8 89       	ldd	r26, Y+16	; 0x10
    1bd8:	b9 89       	ldd	r27, Y+17	; 0x11
    1bda:	87 3f       	cpi	r24, 0xF7	; 247
    1bdc:	ff e0       	ldi	r31, 0x0F	; 15
    1bde:	9f 07       	cpc	r25, r31
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	af 07       	cpc	r26, r31
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	bf 07       	cpc	r27, r31
    1be8:	10 f4       	brcc	.+4      	; 0x1bee <pf_mount+0x2ae>
#if _FS_FAT12
		fmt = FS_FAT12;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	89 83       	std	Y+1, r24	; 0x01
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    1bee:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bf0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bf2:	a8 89       	ldd	r26, Y+16	; 0x10
    1bf4:	b9 89       	ldd	r27, Y+17	; 0x11
    1bf6:	87 3f       	cpi	r24, 0xF7	; 247
    1bf8:	0f ef       	ldi	r16, 0xFF	; 255
    1bfa:	90 07       	cpc	r25, r16
    1bfc:	00 e0       	ldi	r16, 0x00	; 0
    1bfe:	a0 07       	cpc	r26, r16
    1c00:	00 e0       	ldi	r16, 0x00	; 0
    1c02:	b0 07       	cpc	r27, r16
    1c04:	10 f0       	brcs	.+4      	; 0x1c0a <pf_mount+0x2ca>
#if _FS_FAT32
		fmt = FS_FAT32;
    1c06:	83 e0       	ldi	r24, 0x03	; 3
    1c08:	89 83       	std	Y+1, r24	; 0x01
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    1c0a:	8e a9       	sts	0x4e, r24
    1c0c:	9f a9       	sts	0x4f, r25
    1c0e:	29 81       	ldd	r18, Y+1	; 0x01
    1c10:	fc 01       	movw	r30, r24
    1c12:	20 83       	st	Z, r18
	if (_FS_FAT32 && fmt == FS_FAT32)
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	83 30       	cpi	r24, 0x03	; 3
    1c18:	79 f4       	brne	.+30     	; 0x1c38 <pf_mount+0x2f8>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	42 96       	adiw	r24, 0x12	; 18
    1c1e:	fc 01       	movw	r30, r24
    1c20:	87 8d       	ldd	r24, Z+31	; 0x1f
    1c22:	90 a1       	lds	r25, 0x40
    1c24:	a1 a1       	lds	r26, 0x41
    1c26:	b2 a1       	lds	r27, 0x42
    1c28:	2e a9       	sts	0x4e, r18
    1c2a:	3f a9       	sts	0x4f, r19
    1c2c:	f9 01       	movw	r30, r18
    1c2e:	86 87       	std	Z+14, r24	; 0x0e
    1c30:	97 87       	std	Z+15, r25	; 0x0f
    1c32:	a0 8b       	std	Z+16, r26	; 0x10
    1c34:	b1 8b       	std	Z+17, r27	; 0x11
    1c36:	16 c0       	rjmp	.+44     	; 0x1c64 <pf_mount+0x324>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    1c38:	8e a9       	sts	0x4e, r24
    1c3a:	9f a9       	sts	0x4f, r25
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	22 85       	ldd	r18, Z+10	; 0x0a
    1c40:	33 85       	ldd	r19, Z+11	; 0x0b
    1c42:	44 85       	ldd	r20, Z+12	; 0x0c
    1c44:	55 85       	ldd	r21, Z+13	; 0x0d
    1c46:	8e 81       	ldd	r24, Y+6	; 0x06
    1c48:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4a:	a8 85       	ldd	r26, Y+8	; 0x08
    1c4c:	b9 85       	ldd	r27, Y+9	; 0x09
    1c4e:	82 0f       	add	r24, r18
    1c50:	93 1f       	adc	r25, r19
    1c52:	a4 1f       	adc	r26, r20
    1c54:	b5 1f       	adc	r27, r21
    1c56:	2e a9       	sts	0x4e, r18
    1c58:	3f a9       	sts	0x4f, r19
    1c5a:	f9 01       	movw	r30, r18
    1c5c:	86 87       	std	Z+14, r24	; 0x0e
    1c5e:	97 87       	std	Z+15, r25	; 0x0f
    1c60:	a0 8b       	std	Z+16, r26	; 0x10
    1c62:	b1 8b       	std	Z+17, r27	; 0x11
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    1c64:	8e a9       	sts	0x4e, r24
    1c66:	9f a9       	sts	0x4f, r25
    1c68:	fc 01       	movw	r30, r24
    1c6a:	22 85       	ldd	r18, Z+10	; 0x0a
    1c6c:	33 85       	ldd	r19, Z+11	; 0x0b
    1c6e:	44 85       	ldd	r20, Z+12	; 0x0c
    1c70:	55 85       	ldd	r21, Z+13	; 0x0d
    1c72:	8e 81       	ldd	r24, Y+6	; 0x06
    1c74:	9f 81       	ldd	r25, Y+7	; 0x07
    1c76:	a8 85       	ldd	r26, Y+8	; 0x08
    1c78:	b9 85       	ldd	r27, Y+9	; 0x09
    1c7a:	28 0f       	add	r18, r24
    1c7c:	39 1f       	adc	r19, r25
    1c7e:	4a 1f       	adc	r20, r26
    1c80:	5b 1f       	adc	r21, r27
    1c82:	8e a9       	sts	0x4e, r24
    1c84:	9f a9       	sts	0x4f, r25
    1c86:	fc 01       	movw	r30, r24
    1c88:	84 81       	ldd	r24, Z+4	; 0x04
    1c8a:	95 81       	ldd	r25, Z+5	; 0x05
    1c8c:	92 95       	swap	r25
    1c8e:	82 95       	swap	r24
    1c90:	8f 70       	andi	r24, 0x0F	; 15
    1c92:	89 27       	eor	r24, r25
    1c94:	9f 70       	andi	r25, 0x0F	; 15
    1c96:	89 27       	eor	r24, r25
    1c98:	cc 01       	movw	r24, r24
    1c9a:	a0 e0       	ldi	r26, 0x00	; 0
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	82 0f       	add	r24, r18
    1ca0:	93 1f       	adc	r25, r19
    1ca2:	a4 1f       	adc	r26, r20
    1ca4:	b5 1f       	adc	r27, r21
    1ca6:	2e a9       	sts	0x4e, r18
    1ca8:	3f a9       	sts	0x4f, r19
    1caa:	f9 01       	movw	r30, r18
    1cac:	82 8b       	std	Z+18, r24	; 0x12
    1cae:	93 8b       	std	Z+19, r25	; 0x13
    1cb0:	a4 8b       	std	Z+20, r26	; 0x14
    1cb2:	b5 8b       	std	Z+21, r27	; 0x15

	fs->flag = 0;
    1cb4:	8e a9       	sts	0x4e, r24
    1cb6:	9f a9       	sts	0x4f, r25
    1cb8:	fc 01       	movw	r30, r24
    1cba:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
    1cbc:	8e a9       	sts	0x4e, r24
    1cbe:	9f a9       	sts	0x4f, r25
    1cc0:	90 93 08 01 	sts	0x0108, r25
    1cc4:	80 93 07 01 	sts	0x0107, r24

	return FR_OK;
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
}
    1cca:	e7 96       	adiw	r28, 0x37	; 55
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	1f 91       	pop	r17
    1cdc:	0f 91       	pop	r16
    1cde:	ff 90       	pop	r15
    1ce0:	ef 90       	pop	r14
    1ce2:	08 95       	ret

00001ce4 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	c1 54       	subi	r28, 0x41	; 65
    1cee:	d0 40       	sbci	r29, 0x00	; 0
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	9e 01       	movw	r18, r28
    1cfc:	20 5c       	subi	r18, 0xC0	; 192
    1cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1d00:	f9 01       	movw	r30, r18
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    1d06:	80 91 07 01 	lds	r24, 0x0107
    1d0a:	90 91 08 01 	lds	r25, 0x0108
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	89 83       	std	Y+1, r24	; 0x01


	if (!fs)						/* Check file system */
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	9a 81       	ldd	r25, Y+2	; 0x02
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	11 f4       	brne	.+4      	; 0x1d1e <pf_open+0x3a>
		return FR_NOT_ENABLED;
    1d1a:	86 e0       	ldi	r24, 0x06	; 6
    1d1c:	64 c0       	rjmp	.+200    	; 0x1de6 <pf_open+0x102>

	fs->flag = 0;
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	fc 01       	movw	r30, r24
    1d24:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
    1d26:	ce 01       	movw	r24, r28
    1d28:	44 96       	adiw	r24, 0x14	; 20
    1d2a:	9f 83       	std	Y+7, r25	; 0x07
    1d2c:	8e 83       	std	Y+6, r24	; 0x06
	res = follow_path(&dj, dir, path);	/* Follow the file path */
    1d2e:	ce 01       	movw	r24, r28
    1d30:	04 96       	adiw	r24, 0x04	; 4
    1d32:	ae 01       	movw	r20, r28
    1d34:	40 5e       	subi	r20, 0xE0	; 224
    1d36:	5f 4f       	sbci	r21, 0xFF	; 255
    1d38:	9e 01       	movw	r18, r28
    1d3a:	20 5c       	subi	r18, 0xC0	; 192
    1d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3e:	f9 01       	movw	r30, r18
    1d40:	20 81       	ld	r18, Z
    1d42:	31 81       	ldd	r19, Z+1	; 0x01
    1d44:	ba 01       	movw	r22, r20
    1d46:	a9 01       	movw	r20, r18
    1d48:	0e 94 82 0b 	call	0x1704	; 0x1704 <follow_path>
    1d4c:	8b 83       	std	Y+3, r24	; 0x03
	if (res != FR_OK) return res;		/* Follow failed */
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	88 23       	and	r24, r24
    1d52:	11 f0       	breq	.+4      	; 0x1d58 <pf_open+0x74>
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	47 c0       	rjmp	.+142    	; 0x1de6 <pf_open+0x102>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    1d58:	88 a1       	lds	r24, 0x48
    1d5a:	88 23       	and	r24, r24
    1d5c:	39 f0       	breq	.+14     	; 0x1d6c <pf_open+0x88>
    1d5e:	8b a5       	lds	r24, 0x6b
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	80 71       	andi	r24, 0x10	; 16
    1d66:	90 70       	andi	r25, 0x00	; 0
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	11 f0       	breq	.+4      	; 0x1d70 <pf_open+0x8c>
		return FR_NO_FILE;
    1d6c:	83 e0       	ldi	r24, 0x03	; 3
    1d6e:	3b c0       	rjmp	.+118    	; 0x1de6 <pf_open+0x102>

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
    1d70:	ce 01       	movw	r24, r28
    1d72:	80 96       	adiw	r24, 0x20	; 32
    1d74:	44 96       	adiw	r24, 0x14	; 20
    1d76:	fc 01       	movw	r30, r24
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	cc 01       	movw	r24, r24
    1d7e:	a0 e0       	ldi	r26, 0x00	; 0
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	ac 01       	movw	r20, r24
    1d84:	33 27       	eor	r19, r19
    1d86:	22 27       	eor	r18, r18
    1d88:	ce 01       	movw	r24, r28
    1d8a:	80 96       	adiw	r24, 0x20	; 32
    1d8c:	4a 96       	adiw	r24, 0x1a	; 26
    1d8e:	fc 01       	movw	r30, r24
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	cc 01       	movw	r24, r24
    1d96:	a0 e0       	ldi	r26, 0x00	; 0
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	82 2b       	or	r24, r18
    1d9c:	93 2b       	or	r25, r19
    1d9e:	a4 2b       	or	r26, r20
    1da0:	b5 2b       	or	r27, r21
    1da2:	29 81       	ldd	r18, Y+1	; 0x01
    1da4:	3a 81       	ldd	r19, Y+2	; 0x02
    1da6:	f9 01       	movw	r30, r18
    1da8:	86 8f       	std	Z+30, r24	; 0x1e
    1daa:	97 8f       	std	Z+31, r25	; 0x1f
    1dac:	a0 a3       	lds	r26, 0x50
    1dae:	b1 a3       	lds	r27, 0x51
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    1db0:	ce 01       	movw	r24, r28
    1db2:	80 96       	adiw	r24, 0x20	; 32
    1db4:	fc 01       	movw	r30, r24
    1db6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1db8:	95 8d       	ldd	r25, Z+29	; 0x1d
    1dba:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1dbc:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1dbe:	29 81       	ldd	r18, Y+1	; 0x01
    1dc0:	3a 81       	ldd	r19, Y+2	; 0x02
    1dc2:	f9 01       	movw	r30, r18
    1dc4:	82 8f       	std	Z+26, r24	; 0x1a
    1dc6:	93 8f       	std	Z+27, r25	; 0x1b
    1dc8:	a4 8f       	std	Z+28, r26	; 0x1c
    1dca:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	16 8a       	std	Z+22, r1	; 0x16
    1dd4:	17 8a       	std	Z+23, r1	; 0x17
    1dd6:	10 8e       	std	Z+24, r1	; 0x18
    1dd8:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	21 e0       	ldi	r18, 0x01	; 1
    1de0:	fc 01       	movw	r30, r24
    1de2:	21 83       	std	Z+1, r18	; 0x01

	return FR_OK;
    1de4:	80 e0       	ldi	r24, 0x00	; 0
}
    1de6:	cf 5b       	subi	r28, 0xBF	; 191
    1de8:	df 4f       	sbci	r29, 0xFF	; 255
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	08 95       	ret

00001dfa <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    1dfa:	ef 92       	push	r14
    1dfc:	ff 92       	push	r15
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	6a 97       	sbiw	r28, 0x1a	; 26
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	9e 8b       	std	Y+22, r25	; 0x16
    1e18:	8d 8b       	std	Y+21, r24	; 0x15
    1e1a:	78 8f       	std	Y+24, r23	; 0x18
    1e1c:	6f 8b       	std	Y+23, r22	; 0x17
    1e1e:	5a 8f       	std	Y+26, r21	; 0x1a
    1e20:	49 8f       	std	Y+25, r20	; 0x19
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
    1e22:	8d 89       	ldd	r24, Y+21	; 0x15
    1e24:	9e 89       	ldd	r25, Y+22	; 0x16
    1e26:	9c 83       	std	Y+4, r25	; 0x04
    1e28:	8b 83       	std	Y+3, r24	; 0x03
	FATFS *fs = FatFs;
    1e2a:	80 91 07 01 	lds	r24, 0x0107
    1e2e:	90 91 08 01 	lds	r25, 0x0108
    1e32:	9e 83       	std	Y+6, r25	; 0x06
    1e34:	8d 83       	std	Y+5, r24	; 0x05


	*br = 0;
    1e36:	89 8d       	ldd	r24, Y+25	; 0x19
    1e38:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	11 82       	std	Z+1, r1	; 0x01
    1e3e:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	11 f4       	brne	.+4      	; 0x1e4c <pf_read+0x52>
    1e48:	86 e0       	ldi	r24, 0x06	; 6
    1e4a:	55 c1       	rjmp	.+682    	; 0x20f6 <pf_read+0x2fc>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	fc 01       	movw	r30, r24
    1e52:	81 81       	ldd	r24, Z+1	; 0x01
    1e54:	88 2f       	mov	r24, r24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	81 70       	andi	r24, 0x01	; 1
    1e5a:	90 70       	andi	r25, 0x00	; 0
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	11 f4       	brne	.+4      	; 0x1e64 <pf_read+0x6a>
		return FR_NOT_OPENED;
    1e60:	85 e0       	ldi	r24, 0x05	; 5
    1e62:	49 c1       	rjmp	.+658    	; 0x20f6 <pf_read+0x2fc>

	remain = fs->fsize - fs->fptr;
    1e64:	8d 81       	ldd	r24, Y+5	; 0x05
    1e66:	9e 81       	ldd	r25, Y+6	; 0x06
    1e68:	fc 01       	movw	r30, r24
    1e6a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e6c:	33 8d       	ldd	r19, Z+27	; 0x1b
    1e6e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1e70:	55 8d       	ldd	r21, Z+29	; 0x1d
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	9e 81       	ldd	r25, Y+6	; 0x06
    1e76:	fc 01       	movw	r30, r24
    1e78:	86 89       	ldd	r24, Z+22	; 0x16
    1e7a:	97 89       	ldd	r25, Z+23	; 0x17
    1e7c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e7e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e80:	79 01       	movw	r14, r18
    1e82:	8a 01       	movw	r16, r20
    1e84:	e8 1a       	sub	r14, r24
    1e86:	f9 0a       	sbc	r15, r25
    1e88:	0a 0b       	sbc	r16, r26
    1e8a:	1b 0b       	sbc	r17, r27
    1e8c:	d8 01       	movw	r26, r16
    1e8e:	c7 01       	movw	r24, r14
    1e90:	8f 83       	std	Y+7, r24	; 0x07
    1e92:	98 87       	std	Y+8, r25	; 0x08
    1e94:	a9 87       	std	Y+9, r26	; 0x09
    1e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    1e98:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9c:	9c 01       	movw	r18, r24
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	50 e0       	ldi	r21, 0x00	; 0
    1ea2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ea4:	98 85       	ldd	r25, Y+8	; 0x08
    1ea6:	a9 85       	ldd	r26, Y+9	; 0x09
    1ea8:	ba 85       	ldd	r27, Y+10	; 0x0a
    1eaa:	82 17       	cp	r24, r18
    1eac:	93 07       	cpc	r25, r19
    1eae:	a4 07       	cpc	r26, r20
    1eb0:	b5 07       	cpc	r27, r21
    1eb2:	08 f0       	brcs	.+2      	; 0x1eb6 <pf_read+0xbc>
    1eb4:	0f c1       	rjmp	.+542    	; 0x20d4 <pf_read+0x2da>
    1eb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb8:	98 85       	ldd	r25, Y+8	; 0x08
    1eba:	98 8f       	std	Y+24, r25	; 0x18
    1ebc:	8f 8b       	std	Y+23, r24	; 0x17

	while (btr)	{									/* Repeat until all data transferred */
    1ebe:	0a c1       	rjmp	.+532    	; 0x20d4 <pf_read+0x2da>
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	86 89       	ldd	r24, Z+22	; 0x16
    1ec8:	97 89       	ldd	r25, Z+23	; 0x17
    1eca:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ecc:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ece:	91 70       	andi	r25, 0x01	; 1
    1ed0:	a0 70       	andi	r26, 0x00	; 0
    1ed2:	b0 70       	andi	r27, 0x00	; 0
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	a1 05       	cpc	r26, r1
    1ed8:	b1 05       	cpc	r27, r1
    1eda:	09 f0       	breq	.+2      	; 0x1ede <pf_read+0xe4>
    1edc:	82 c0       	rjmp	.+260    	; 0x1fe2 <pf_read+0x1e8>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	86 89       	ldd	r24, Z+22	; 0x16
    1ee6:	97 89       	ldd	r25, Z+23	; 0x17
    1ee8:	a0 8d       	ldd	r26, Z+24	; 0x18
    1eea:	b1 8d       	ldd	r27, Z+25	; 0x19
    1eec:	07 2e       	mov	r0, r23
    1eee:	79 e0       	ldi	r23, 0x09	; 9
    1ef0:	b6 95       	lsr	r27
    1ef2:	a7 95       	ror	r26
    1ef4:	97 95       	ror	r25
    1ef6:	87 95       	ror	r24
    1ef8:	7a 95       	dec	r23
    1efa:	d1 f7       	brne	.-12     	; 0x1ef0 <pf_read+0xf6>
    1efc:	70 2d       	mov	r23, r0
    1efe:	28 2f       	mov	r18, r24
    1f00:	8d 81       	ldd	r24, Y+5	; 0x05
    1f02:	9e 81       	ldd	r25, Y+6	; 0x06
    1f04:	fc 01       	movw	r30, r24
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	81 50       	subi	r24, 0x01	; 1
    1f0a:	82 23       	and	r24, r18
    1f0c:	8b 87       	std	Y+11, r24	; 0x0b
			if (!cs) {								/* On the cluster boundary? */
    1f0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f10:	88 23       	and	r24, r24
    1f12:	c9 f5       	brne	.+114    	; 0x1f86 <pf_read+0x18c>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    1f14:	8d 81       	ldd	r24, Y+5	; 0x05
    1f16:	9e 81       	ldd	r25, Y+6	; 0x06
    1f18:	fc 01       	movw	r30, r24
    1f1a:	86 89       	ldd	r24, Z+22	; 0x16
    1f1c:	97 89       	ldd	r25, Z+23	; 0x17
    1f1e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f20:	b1 8d       	ldd	r27, Z+25	; 0x19
					fs->org_clust : get_fat(fs->curr_clust);
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	a1 05       	cpc	r26, r1
    1f26:	b1 05       	cpc	r27, r1
    1f28:	41 f4       	brne	.+16     	; 0x1f3a <pf_read+0x140>
    1f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2e:	fc 01       	movw	r30, r24
    1f30:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f32:	97 8d       	ldd	r25, Z+31	; 0x1f
    1f34:	a0 a1       	lds	r26, 0x40
    1f36:	b1 a1       	lds	r27, 0x41
    1f38:	0d c0       	rjmp	.+26     	; 0x1f54 <pf_read+0x15a>
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3e:	fc 01       	movw	r30, r24
    1f40:	82 a1       	lds	r24, 0x42
    1f42:	93 a1       	lds	r25, 0x43
    1f44:	a4 a1       	lds	r26, 0x44
    1f46:	b5 a1       	lds	r27, 0x45
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 2c 06 	call	0xc58	; 0xc58 <get_fat>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
			if (!cs) {								/* On the cluster boundary? */
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    1f54:	8c 87       	std	Y+12, r24	; 0x0c
    1f56:	9d 87       	std	Y+13, r25	; 0x0d
    1f58:	ae 87       	std	Y+14, r26	; 0x0e
    1f5a:	bf 87       	std	Y+15, r27	; 0x0f
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    1f5c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f5e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f60:	ae 85       	ldd	r26, Y+14	; 0x0e
    1f62:	bf 85       	ldd	r27, Y+15	; 0x0f
    1f64:	82 30       	cpi	r24, 0x02	; 2
    1f66:	91 05       	cpc	r25, r1
    1f68:	a1 05       	cpc	r26, r1
    1f6a:	b1 05       	cpc	r27, r1
    1f6c:	08 f4       	brcc	.+2      	; 0x1f70 <pf_read+0x176>
    1f6e:	b9 c0       	rjmp	.+370    	; 0x20e2 <pf_read+0x2e8>
				fs->curr_clust = clst;				/* Update current cluster */
    1f70:	2d 81       	ldd	r18, Y+5	; 0x05
    1f72:	3e 81       	ldd	r19, Y+6	; 0x06
    1f74:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f76:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f78:	ae 85       	ldd	r26, Y+14	; 0x0e
    1f7a:	bf 85       	ldd	r27, Y+15	; 0x0f
    1f7c:	f9 01       	movw	r30, r18
    1f7e:	82 a3       	lds	r24, 0x52
    1f80:	93 a3       	lds	r25, 0x53
    1f82:	a4 a3       	lds	r26, 0x54
    1f84:	b5 a3       	lds	r27, 0x55
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    1f86:	8d 81       	ldd	r24, Y+5	; 0x05
    1f88:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	82 a1       	lds	r24, 0x42
    1f8e:	93 a1       	lds	r25, 0x43
    1f90:	a4 a1       	lds	r26, 0x44
    1f92:	b5 a1       	lds	r27, 0x45
    1f94:	bc 01       	movw	r22, r24
    1f96:	cd 01       	movw	r24, r26
    1f98:	0e 94 8e 07 	call	0xf1c	; 0xf1c <clust2sect>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	88 8b       	std	Y+16, r24	; 0x10
    1fa2:	99 8b       	std	Y+17, r25	; 0x11
    1fa4:	aa 8b       	std	Y+18, r26	; 0x12
    1fa6:	bb 8b       	std	Y+19, r27	; 0x13
			if (!sect) goto fr_abort;
    1fa8:	88 89       	ldd	r24, Y+16	; 0x10
    1faa:	99 89       	ldd	r25, Y+17	; 0x11
    1fac:	aa 89       	ldd	r26, Y+18	; 0x12
    1fae:	bb 89       	ldd	r27, Y+19	; 0x13
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	a1 05       	cpc	r26, r1
    1fb4:	b1 05       	cpc	r27, r1
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <pf_read+0x1c0>
    1fb8:	96 c0       	rjmp	.+300    	; 0x20e6 <pf_read+0x2ec>
			fs->dsect = sect + cs;
    1fba:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	88 89       	ldd	r24, Y+16	; 0x10
    1fc6:	99 89       	ldd	r25, Y+17	; 0x11
    1fc8:	aa 89       	ldd	r26, Y+18	; 0x12
    1fca:	bb 89       	ldd	r27, Y+19	; 0x13
    1fcc:	82 0f       	add	r24, r18
    1fce:	93 1f       	adc	r25, r19
    1fd0:	a4 1f       	adc	r26, r20
    1fd2:	b5 1f       	adc	r27, r21
    1fd4:	2d 81       	ldd	r18, Y+5	; 0x05
    1fd6:	3e 81       	ldd	r19, Y+6	; 0x06
    1fd8:	f9 01       	movw	r30, r18
    1fda:	86 a3       	lds	r24, 0x56
    1fdc:	97 a3       	lds	r25, 0x57
    1fde:	a0 a7       	lds	r26, 0x70
    1fe0:	b1 a7       	lds	r27, 0x71
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	86 89       	ldd	r24, Z+22	; 0x16
    1fea:	97 89       	ldd	r25, Z+23	; 0x17
    1fec:	a0 8d       	ldd	r26, Z+24	; 0x18
    1fee:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ff0:	91 70       	andi	r25, 0x01	; 1
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	32 e0       	ldi	r19, 0x02	; 2
    1ff6:	79 01       	movw	r14, r18
    1ff8:	e8 1a       	sub	r14, r24
    1ffa:	f9 0a       	sbc	r15, r25
    1ffc:	c7 01       	movw	r24, r14
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	89 83       	std	Y+1, r24	; 0x01
		if (rcnt > btr) rcnt = btr;
    2002:	29 81       	ldd	r18, Y+1	; 0x01
    2004:	3a 81       	ldd	r19, Y+2	; 0x02
    2006:	8f 89       	ldd	r24, Y+23	; 0x17
    2008:	98 8d       	ldd	r25, Y+24	; 0x18
    200a:	82 17       	cp	r24, r18
    200c:	93 07       	cpc	r25, r19
    200e:	20 f4       	brcc	.+8      	; 0x2018 <pf_read+0x21e>
    2010:	8f 89       	ldd	r24, Y+23	; 0x17
    2012:	98 8d       	ldd	r25, Y+24	; 0x18
    2014:	9a 83       	std	Y+2, r25	; 0x02
    2016:	89 83       	std	Y+1, r24	; 0x01
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    2018:	8d 89       	ldd	r24, Y+21	; 0x15
    201a:	9e 89       	ldd	r25, Y+22	; 0x16
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	19 f0       	breq	.+6      	; 0x2026 <pf_read+0x22c>
    2020:	6b 81       	ldd	r22, Y+3	; 0x03
    2022:	7c 81       	ldd	r23, Y+4	; 0x04
    2024:	02 c0       	rjmp	.+4      	; 0x202a <pf_read+0x230>
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	fc 01       	movw	r30, r24
    2030:	26 a1       	lds	r18, 0x46
    2032:	37 a1       	lds	r19, 0x47
    2034:	40 a5       	lds	r20, 0x60
    2036:	51 a5       	lds	r21, 0x61
    2038:	8d 81       	ldd	r24, Y+5	; 0x05
    203a:	9e 81       	ldd	r25, Y+6	; 0x06
    203c:	fc 01       	movw	r30, r24
    203e:	86 89       	ldd	r24, Z+22	; 0x16
    2040:	97 89       	ldd	r25, Z+23	; 0x17
    2042:	a0 8d       	ldd	r26, Z+24	; 0x18
    2044:	b1 8d       	ldd	r27, Z+25	; 0x19
    2046:	dc 01       	movw	r26, r24
    2048:	b1 70       	andi	r27, 0x01	; 1
    204a:	e9 81       	ldd	r30, Y+1	; 0x01
    204c:	fa 81       	ldd	r31, Y+2	; 0x02
    204e:	cb 01       	movw	r24, r22
    2050:	ba 01       	movw	r22, r20
    2052:	a9 01       	movw	r20, r18
    2054:	9d 01       	movw	r18, r26
    2056:	8f 01       	movw	r16, r30
    2058:	0e 94 1c 04 	call	0x838	; 0x838 <disk_readp>
    205c:	8c 8b       	std	Y+20, r24	; 0x14
		if (dr) goto fr_abort;
    205e:	8c 89       	ldd	r24, Y+20	; 0x14
    2060:	88 23       	and	r24, r24
    2062:	09 f0       	breq	.+2      	; 0x2066 <pf_read+0x26c>
    2064:	42 c0       	rjmp	.+132    	; 0x20ea <pf_read+0x2f0>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    2066:	8d 81       	ldd	r24, Y+5	; 0x05
    2068:	9e 81       	ldd	r25, Y+6	; 0x06
    206a:	fc 01       	movw	r30, r24
    206c:	26 89       	ldd	r18, Z+22	; 0x16
    206e:	37 89       	ldd	r19, Z+23	; 0x17
    2070:	40 8d       	ldd	r20, Z+24	; 0x18
    2072:	51 8d       	ldd	r21, Z+25	; 0x19
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	9a 81       	ldd	r25, Y+2	; 0x02
    2078:	cc 01       	movw	r24, r24
    207a:	a0 e0       	ldi	r26, 0x00	; 0
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	82 0f       	add	r24, r18
    2080:	93 1f       	adc	r25, r19
    2082:	a4 1f       	adc	r26, r20
    2084:	b5 1f       	adc	r27, r21
    2086:	2d 81       	ldd	r18, Y+5	; 0x05
    2088:	3e 81       	ldd	r19, Y+6	; 0x06
    208a:	f9 01       	movw	r30, r18
    208c:	86 8b       	std	Z+22, r24	; 0x16
    208e:	97 8b       	std	Z+23, r25	; 0x17
    2090:	a0 8f       	std	Z+24, r26	; 0x18
    2092:	b1 8f       	std	Z+25, r27	; 0x19
    2094:	2b 81       	ldd	r18, Y+3	; 0x03
    2096:	3c 81       	ldd	r19, Y+4	; 0x04
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	9a 81       	ldd	r25, Y+2	; 0x02
    209c:	82 0f       	add	r24, r18
    209e:	93 1f       	adc	r25, r19
    20a0:	9c 83       	std	Y+4, r25	; 0x04
    20a2:	8b 83       	std	Y+3, r24	; 0x03
		btr -= rcnt; *br += rcnt;
    20a4:	2f 89       	ldd	r18, Y+23	; 0x17
    20a6:	38 8d       	ldd	r19, Y+24	; 0x18
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	9a 81       	ldd	r25, Y+2	; 0x02
    20ac:	79 01       	movw	r14, r18
    20ae:	e8 1a       	sub	r14, r24
    20b0:	f9 0a       	sbc	r15, r25
    20b2:	c7 01       	movw	r24, r14
    20b4:	98 8f       	std	Y+24, r25	; 0x18
    20b6:	8f 8b       	std	Y+23, r24	; 0x17
    20b8:	89 8d       	ldd	r24, Y+25	; 0x19
    20ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20bc:	fc 01       	movw	r30, r24
    20be:	20 81       	ld	r18, Z
    20c0:	31 81       	ldd	r19, Z+1	; 0x01
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	28 0f       	add	r18, r24
    20c8:	39 1f       	adc	r19, r25
    20ca:	89 8d       	ldd	r24, Y+25	; 0x19
    20cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20ce:	fc 01       	movw	r30, r24
    20d0:	31 83       	std	Z+1, r19	; 0x01
    20d2:	20 83       	st	Z, r18
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    20d4:	8f 89       	ldd	r24, Y+23	; 0x17
    20d6:	98 8d       	ldd	r25, Y+24	; 0x18
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	09 f0       	breq	.+2      	; 0x20de <pf_read+0x2e4>
    20dc:	f1 ce       	rjmp	.-542    	; 0x1ec0 <pf_read+0xc6>
		if (dr) goto fr_abort;
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	0a c0       	rjmp	.+20     	; 0x20f6 <pf_read+0x2fc>
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
			if (!cs) {								/* On the cluster boundary? */
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    20e2:	00 00       	nop
    20e4:	03 c0       	rjmp	.+6      	; 0x20ec <pf_read+0x2f2>
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    20e6:	00 00       	nop
    20e8:	01 c0       	rjmp	.+2      	; 0x20ec <pf_read+0x2f2>
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
		if (dr) goto fr_abort;
    20ea:	00 00       	nop
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    20ec:	8d 81       	ldd	r24, Y+5	; 0x05
    20ee:	9e 81       	ldd	r25, Y+6	; 0x06
    20f0:	fc 01       	movw	r30, r24
    20f2:	11 82       	std	Z+1, r1	; 0x01
	return FR_DISK_ERR;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
}
    20f6:	6a 96       	adiw	r28, 0x1a	; 26
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	08 95       	ret

00002110 <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    2110:	ef 92       	push	r14
    2112:	ff 92       	push	r15
    2114:	0f 93       	push	r16
    2116:	1f 93       	push	r17
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	69 97       	sbiw	r28, 0x19	; 25
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	9d 8b       	std	Y+21, r25	; 0x15
    212e:	8c 8b       	std	Y+20, r24	; 0x14
    2130:	7f 8b       	std	Y+23, r23	; 0x17
    2132:	6e 8b       	std	Y+22, r22	; 0x16
    2134:	59 8f       	std	Y+25, r21	; 0x19
    2136:	48 8f       	std	Y+24, r20	; 0x18
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    2138:	8c 89       	ldd	r24, Y+20	; 0x14
    213a:	9d 89       	ldd	r25, Y+21	; 0x15
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
	BYTE cs;
	WORD wcnt;
	FATFS *fs = FatFs;
    2140:	80 91 07 01 	lds	r24, 0x0107
    2144:	90 91 08 01 	lds	r25, 0x0108
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05


	*bw = 0;
    214c:	88 8d       	ldd	r24, Y+24	; 0x18
    214e:	99 8d       	ldd	r25, Y+25	; 0x19
    2150:	fc 01       	movw	r30, r24
    2152:	11 82       	std	Z+1, r1	; 0x01
    2154:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	9e 81       	ldd	r25, Y+6	; 0x06
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	11 f4       	brne	.+4      	; 0x2162 <pf_write+0x52>
    215e:	86 e0       	ldi	r24, 0x06	; 6
    2160:	b3 c1       	rjmp	.+870    	; 0x24c8 <pf_write+0x3b8>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	fc 01       	movw	r30, r24
    2168:	81 81       	ldd	r24, Z+1	; 0x01
    216a:	88 2f       	mov	r24, r24
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	81 70       	andi	r24, 0x01	; 1
    2170:	90 70       	andi	r25, 0x00	; 0
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	11 f4       	brne	.+4      	; 0x217a <pf_write+0x6a>
		return FR_NOT_OPENED;
    2176:	85 e0       	ldi	r24, 0x05	; 5
    2178:	a7 c1       	rjmp	.+846    	; 0x24c8 <pf_write+0x3b8>

	if (!btw) {		/* Finalize request */
    217a:	8e 89       	ldd	r24, Y+22	; 0x16
    217c:	9f 89       	ldd	r25, Y+23	; 0x17
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	01 f5       	brne	.+64     	; 0x21c2 <pf_write+0xb2>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	9e 81       	ldd	r25, Y+6	; 0x06
    2186:	fc 01       	movw	r30, r24
    2188:	81 81       	ldd	r24, Z+1	; 0x01
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	80 74       	andi	r24, 0x40	; 64
    2190:	90 70       	andi	r25, 0x00	; 0
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	51 f0       	breq	.+20     	; 0x21aa <pf_write+0x9a>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	40 e0       	ldi	r20, 0x00	; 0
    219c:	50 e0       	ldi	r21, 0x00	; 0
    219e:	ba 01       	movw	r22, r20
    21a0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <disk_writep>
    21a4:	88 23       	and	r24, r24
    21a6:	09 f0       	breq	.+2      	; 0x21aa <pf_write+0x9a>
    21a8:	7f c1       	rjmp	.+766    	; 0x24a8 <pf_write+0x398>
		fs->flag &= ~FA__WIP;
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	fc 01       	movw	r30, r24
    21b0:	81 81       	ldd	r24, Z+1	; 0x01
    21b2:	28 2f       	mov	r18, r24
    21b4:	2f 7b       	andi	r18, 0xBF	; 191
    21b6:	8d 81       	ldd	r24, Y+5	; 0x05
    21b8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ba:	fc 01       	movw	r30, r24
    21bc:	21 83       	std	Z+1, r18	; 0x01
		return FR_OK;
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	83 c1       	rjmp	.+774    	; 0x24c8 <pf_write+0x3b8>
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round-down fptr to the sector boundary */
    21c2:	8d 81       	ldd	r24, Y+5	; 0x05
    21c4:	9e 81       	ldd	r25, Y+6	; 0x06
    21c6:	fc 01       	movw	r30, r24
    21c8:	81 81       	ldd	r24, Z+1	; 0x01
    21ca:	88 2f       	mov	r24, r24
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	80 74       	andi	r24, 0x40	; 64
    21d0:	90 70       	andi	r25, 0x00	; 0
    21d2:	00 97       	sbiw	r24, 0x00	; 0
    21d4:	81 f4       	brne	.+32     	; 0x21f6 <pf_write+0xe6>
			fs->fptr &= 0xFFFFFE00;
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	fc 01       	movw	r30, r24
    21dc:	86 89       	ldd	r24, Z+22	; 0x16
    21de:	97 89       	ldd	r25, Z+23	; 0x17
    21e0:	a0 8d       	ldd	r26, Z+24	; 0x18
    21e2:	b1 8d       	ldd	r27, Z+25	; 0x19
    21e4:	80 70       	andi	r24, 0x00	; 0
    21e6:	9e 7f       	andi	r25, 0xFE	; 254
    21e8:	2d 81       	ldd	r18, Y+5	; 0x05
    21ea:	3e 81       	ldd	r19, Y+6	; 0x06
    21ec:	f9 01       	movw	r30, r18
    21ee:	86 8b       	std	Z+22, r24	; 0x16
    21f0:	97 8b       	std	Z+23, r25	; 0x17
    21f2:	a0 8f       	std	Z+24, r26	; 0x18
    21f4:	b1 8f       	std	Z+25, r27	; 0x19
	}
	remain = fs->fsize - fs->fptr;
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	9e 81       	ldd	r25, Y+6	; 0x06
    21fa:	fc 01       	movw	r30, r24
    21fc:	22 8d       	ldd	r18, Z+26	; 0x1a
    21fe:	33 8d       	ldd	r19, Z+27	; 0x1b
    2200:	44 8d       	ldd	r20, Z+28	; 0x1c
    2202:	55 8d       	ldd	r21, Z+29	; 0x1d
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	fc 01       	movw	r30, r24
    220a:	86 89       	ldd	r24, Z+22	; 0x16
    220c:	97 89       	ldd	r25, Z+23	; 0x17
    220e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2210:	b1 8d       	ldd	r27, Z+25	; 0x19
    2212:	79 01       	movw	r14, r18
    2214:	8a 01       	movw	r16, r20
    2216:	e8 1a       	sub	r14, r24
    2218:	f9 0a       	sbc	r15, r25
    221a:	0a 0b       	sbc	r16, r26
    221c:	1b 0b       	sbc	r17, r27
    221e:	d8 01       	movw	r26, r16
    2220:	c7 01       	movw	r24, r14
    2222:	8f 83       	std	Y+7, r24	; 0x07
    2224:	98 87       	std	Y+8, r25	; 0x08
    2226:	a9 87       	std	Y+9, r26	; 0x09
    2228:	ba 87       	std	Y+10, r27	; 0x0a
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    222a:	8e 89       	ldd	r24, Y+22	; 0x16
    222c:	9f 89       	ldd	r25, Y+23	; 0x17
    222e:	9c 01       	movw	r18, r24
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	50 e0       	ldi	r21, 0x00	; 0
    2234:	8f 81       	ldd	r24, Y+7	; 0x07
    2236:	98 85       	ldd	r25, Y+8	; 0x08
    2238:	a9 85       	ldd	r26, Y+9	; 0x09
    223a:	ba 85       	ldd	r27, Y+10	; 0x0a
    223c:	82 17       	cp	r24, r18
    223e:	93 07       	cpc	r25, r19
    2240:	a4 07       	cpc	r26, r20
    2242:	b5 07       	cpc	r27, r21
    2244:	08 f0       	brcs	.+2      	; 0x2248 <pf_write+0x138>
    2246:	29 c1       	rjmp	.+594    	; 0x249a <pf_write+0x38a>
    2248:	8f 81       	ldd	r24, Y+7	; 0x07
    224a:	98 85       	ldd	r25, Y+8	; 0x08
    224c:	9f 8b       	std	Y+23, r25	; 0x17
    224e:	8e 8b       	std	Y+22, r24	; 0x16

	while (btw)	{									/* Repeat until all data transferred */
    2250:	24 c1       	rjmp	.+584    	; 0x249a <pf_write+0x38a>
		if (((WORD)fs->fptr % 512) == 0) {			/* On the sector boundary? */
    2252:	8d 81       	ldd	r24, Y+5	; 0x05
    2254:	9e 81       	ldd	r25, Y+6	; 0x06
    2256:	fc 01       	movw	r30, r24
    2258:	86 89       	ldd	r24, Z+22	; 0x16
    225a:	97 89       	ldd	r25, Z+23	; 0x17
    225c:	a0 8d       	ldd	r26, Z+24	; 0x18
    225e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2260:	91 70       	andi	r25, 0x01	; 1
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	09 f0       	breq	.+2      	; 0x2268 <pf_write+0x158>
    2266:	9c c0       	rjmp	.+312    	; 0x23a0 <pf_write+0x290>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	9e 81       	ldd	r25, Y+6	; 0x06
    226c:	fc 01       	movw	r30, r24
    226e:	86 89       	ldd	r24, Z+22	; 0x16
    2270:	97 89       	ldd	r25, Z+23	; 0x17
    2272:	a0 8d       	ldd	r26, Z+24	; 0x18
    2274:	b1 8d       	ldd	r27, Z+25	; 0x19
    2276:	07 2e       	mov	r0, r23
    2278:	79 e0       	ldi	r23, 0x09	; 9
    227a:	b6 95       	lsr	r27
    227c:	a7 95       	ror	r26
    227e:	97 95       	ror	r25
    2280:	87 95       	ror	r24
    2282:	7a 95       	dec	r23
    2284:	d1 f7       	brne	.-12     	; 0x227a <pf_write+0x16a>
    2286:	70 2d       	mov	r23, r0
    2288:	28 2f       	mov	r18, r24
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	fc 01       	movw	r30, r24
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	81 50       	subi	r24, 0x01	; 1
    2294:	82 23       	and	r24, r18
    2296:	8b 87       	std	Y+11, r24	; 0x0b
			if (!cs) {								/* On the cluster boundary? */
    2298:	8b 85       	ldd	r24, Y+11	; 0x0b
    229a:	88 23       	and	r24, r24
    229c:	c9 f5       	brne	.+114    	; 0x2310 <pf_write+0x200>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    229e:	8d 81       	ldd	r24, Y+5	; 0x05
    22a0:	9e 81       	ldd	r25, Y+6	; 0x06
    22a2:	fc 01       	movw	r30, r24
    22a4:	86 89       	ldd	r24, Z+22	; 0x16
    22a6:	97 89       	ldd	r25, Z+23	; 0x17
    22a8:	a0 8d       	ldd	r26, Z+24	; 0x18
    22aa:	b1 8d       	ldd	r27, Z+25	; 0x19
					fs->org_clust : get_fat(fs->curr_clust);
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	a1 05       	cpc	r26, r1
    22b0:	b1 05       	cpc	r27, r1
    22b2:	41 f4       	brne	.+16     	; 0x22c4 <pf_write+0x1b4>
    22b4:	8d 81       	ldd	r24, Y+5	; 0x05
    22b6:	9e 81       	ldd	r25, Y+6	; 0x06
    22b8:	fc 01       	movw	r30, r24
    22ba:	86 8d       	ldd	r24, Z+30	; 0x1e
    22bc:	97 8d       	ldd	r25, Z+31	; 0x1f
    22be:	a0 a1       	lds	r26, 0x40
    22c0:	b1 a1       	lds	r27, 0x41
    22c2:	0d c0       	rjmp	.+26     	; 0x22de <pf_write+0x1ce>
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	fc 01       	movw	r30, r24
    22ca:	82 a1       	lds	r24, 0x42
    22cc:	93 a1       	lds	r25, 0x43
    22ce:	a4 a1       	lds	r26, 0x44
    22d0:	b5 a1       	lds	r27, 0x45
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	0e 94 2c 06 	call	0xc58	; 0xc58 <get_fat>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {			/* On the sector boundary? */
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
			if (!cs) {								/* On the cluster boundary? */
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    22de:	8c 87       	std	Y+12, r24	; 0x0c
    22e0:	9d 87       	std	Y+13, r25	; 0x0d
    22e2:	ae 87       	std	Y+14, r26	; 0x0e
    22e4:	bf 87       	std	Y+15, r27	; 0x0f
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    22e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    22e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    22ea:	ae 85       	ldd	r26, Y+14	; 0x0e
    22ec:	bf 85       	ldd	r27, Y+15	; 0x0f
    22ee:	82 30       	cpi	r24, 0x02	; 2
    22f0:	91 05       	cpc	r25, r1
    22f2:	a1 05       	cpc	r26, r1
    22f4:	b1 05       	cpc	r27, r1
    22f6:	08 f4       	brcc	.+2      	; 0x22fa <pf_write+0x1ea>
    22f8:	d9 c0       	rjmp	.+434    	; 0x24ac <pf_write+0x39c>
				fs->curr_clust = clst;				/* Update current cluster */
    22fa:	2d 81       	ldd	r18, Y+5	; 0x05
    22fc:	3e 81       	ldd	r19, Y+6	; 0x06
    22fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2300:	9d 85       	ldd	r25, Y+13	; 0x0d
    2302:	ae 85       	ldd	r26, Y+14	; 0x0e
    2304:	bf 85       	ldd	r27, Y+15	; 0x0f
    2306:	f9 01       	movw	r30, r18
    2308:	82 a3       	lds	r24, 0x52
    230a:	93 a3       	lds	r25, 0x53
    230c:	a4 a3       	lds	r26, 0x54
    230e:	b5 a3       	lds	r27, 0x55
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	fc 01       	movw	r30, r24
    2316:	82 a1       	lds	r24, 0x42
    2318:	93 a1       	lds	r25, 0x43
    231a:	a4 a1       	lds	r26, 0x44
    231c:	b5 a1       	lds	r27, 0x45
    231e:	bc 01       	movw	r22, r24
    2320:	cd 01       	movw	r24, r26
    2322:	0e 94 8e 07 	call	0xf1c	; 0xf1c <clust2sect>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	88 8b       	std	Y+16, r24	; 0x10
    232c:	99 8b       	std	Y+17, r25	; 0x11
    232e:	aa 8b       	std	Y+18, r26	; 0x12
    2330:	bb 8b       	std	Y+19, r27	; 0x13
			if (!sect) goto fw_abort;
    2332:	88 89       	ldd	r24, Y+16	; 0x10
    2334:	99 89       	ldd	r25, Y+17	; 0x11
    2336:	aa 89       	ldd	r26, Y+18	; 0x12
    2338:	bb 89       	ldd	r27, Y+19	; 0x13
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	a1 05       	cpc	r26, r1
    233e:	b1 05       	cpc	r27, r1
    2340:	09 f4       	brne	.+2      	; 0x2344 <pf_write+0x234>
    2342:	b6 c0       	rjmp	.+364    	; 0x24b0 <pf_write+0x3a0>
			fs->dsect = sect + cs;
    2344:	8b 85       	ldd	r24, Y+11	; 0x0b
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e0       	ldi	r20, 0x00	; 0
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	88 89       	ldd	r24, Y+16	; 0x10
    2350:	99 89       	ldd	r25, Y+17	; 0x11
    2352:	aa 89       	ldd	r26, Y+18	; 0x12
    2354:	bb 89       	ldd	r27, Y+19	; 0x13
    2356:	82 0f       	add	r24, r18
    2358:	93 1f       	adc	r25, r19
    235a:	a4 1f       	adc	r26, r20
    235c:	b5 1f       	adc	r27, r21
    235e:	2d 81       	ldd	r18, Y+5	; 0x05
    2360:	3e 81       	ldd	r19, Y+6	; 0x06
    2362:	f9 01       	movw	r30, r18
    2364:	86 a3       	lds	r24, 0x56
    2366:	97 a3       	lds	r25, 0x57
    2368:	a0 a7       	lds	r26, 0x70
    236a:	b1 a7       	lds	r27, 0x71
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	fc 01       	movw	r30, r24
    2372:	26 a1       	lds	r18, 0x46
    2374:	37 a1       	lds	r19, 0x47
    2376:	40 a5       	lds	r20, 0x60
    2378:	51 a5       	lds	r21, 0x61
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	ba 01       	movw	r22, r20
    2380:	a9 01       	movw	r20, r18
    2382:	0e 94 d5 04 	call	0x9aa	; 0x9aa <disk_writep>
    2386:	88 23       	and	r24, r24
    2388:	09 f0       	breq	.+2      	; 0x238c <pf_write+0x27c>
    238a:	94 c0       	rjmp	.+296    	; 0x24b4 <pf_write+0x3a4>
			fs->flag |= FA__WIP;
    238c:	8d 81       	ldd	r24, Y+5	; 0x05
    238e:	9e 81       	ldd	r25, Y+6	; 0x06
    2390:	fc 01       	movw	r30, r24
    2392:	81 81       	ldd	r24, Z+1	; 0x01
    2394:	28 2f       	mov	r18, r24
    2396:	20 64       	ori	r18, 0x40	; 64
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	fc 01       	movw	r30, r24
    239e:	21 83       	std	Z+1, r18	; 0x01
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    23a0:	8d 81       	ldd	r24, Y+5	; 0x05
    23a2:	9e 81       	ldd	r25, Y+6	; 0x06
    23a4:	fc 01       	movw	r30, r24
    23a6:	86 89       	ldd	r24, Z+22	; 0x16
    23a8:	97 89       	ldd	r25, Z+23	; 0x17
    23aa:	a0 8d       	ldd	r26, Z+24	; 0x18
    23ac:	b1 8d       	ldd	r27, Z+25	; 0x19
    23ae:	91 70       	andi	r25, 0x01	; 1
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	32 e0       	ldi	r19, 0x02	; 2
    23b4:	79 01       	movw	r14, r18
    23b6:	e8 1a       	sub	r14, r24
    23b8:	f9 0a       	sbc	r15, r25
    23ba:	c7 01       	movw	r24, r14
    23bc:	9c 83       	std	Y+4, r25	; 0x04
    23be:	8b 83       	std	Y+3, r24	; 0x03
		if (wcnt > btw) wcnt = btw;
    23c0:	2b 81       	ldd	r18, Y+3	; 0x03
    23c2:	3c 81       	ldd	r19, Y+4	; 0x04
    23c4:	8e 89       	ldd	r24, Y+22	; 0x16
    23c6:	9f 89       	ldd	r25, Y+23	; 0x17
    23c8:	82 17       	cp	r24, r18
    23ca:	93 07       	cpc	r25, r19
    23cc:	20 f4       	brcc	.+8      	; 0x23d6 <pf_write+0x2c6>
    23ce:	8e 89       	ldd	r24, Y+22	; 0x16
    23d0:	9f 89       	ldd	r25, Y+23	; 0x17
    23d2:	9c 83       	std	Y+4, r25	; 0x04
    23d4:	8b 83       	std	Y+3, r24	; 0x03
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	9c 01       	movw	r18, r24
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	9a 81       	ldd	r25, Y+2	; 0x02
    23e4:	ba 01       	movw	r22, r20
    23e6:	a9 01       	movw	r20, r18
    23e8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <disk_writep>
    23ec:	88 23       	and	r24, r24
    23ee:	09 f0       	breq	.+2      	; 0x23f2 <pf_write+0x2e2>
    23f0:	63 c0       	rjmp	.+198    	; 0x24b8 <pf_write+0x3a8>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	fc 01       	movw	r30, r24
    23f8:	26 89       	ldd	r18, Z+22	; 0x16
    23fa:	37 89       	ldd	r19, Z+23	; 0x17
    23fc:	40 8d       	ldd	r20, Z+24	; 0x18
    23fe:	51 8d       	ldd	r21, Z+25	; 0x19
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	9c 81       	ldd	r25, Y+4	; 0x04
    2404:	cc 01       	movw	r24, r24
    2406:	a0 e0       	ldi	r26, 0x00	; 0
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	82 0f       	add	r24, r18
    240c:	93 1f       	adc	r25, r19
    240e:	a4 1f       	adc	r26, r20
    2410:	b5 1f       	adc	r27, r21
    2412:	2d 81       	ldd	r18, Y+5	; 0x05
    2414:	3e 81       	ldd	r19, Y+6	; 0x06
    2416:	f9 01       	movw	r30, r18
    2418:	86 8b       	std	Z+22, r24	; 0x16
    241a:	97 8b       	std	Z+23, r25	; 0x17
    241c:	a0 8f       	std	Z+24, r26	; 0x18
    241e:	b1 8f       	std	Z+25, r27	; 0x19
    2420:	29 81       	ldd	r18, Y+1	; 0x01
    2422:	3a 81       	ldd	r19, Y+2	; 0x02
    2424:	8b 81       	ldd	r24, Y+3	; 0x03
    2426:	9c 81       	ldd	r25, Y+4	; 0x04
    2428:	82 0f       	add	r24, r18
    242a:	93 1f       	adc	r25, r19
    242c:	9a 83       	std	Y+2, r25	; 0x02
    242e:	89 83       	std	Y+1, r24	; 0x01
		btw -= wcnt; *bw += wcnt;
    2430:	2e 89       	ldd	r18, Y+22	; 0x16
    2432:	3f 89       	ldd	r19, Y+23	; 0x17
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	79 01       	movw	r14, r18
    243a:	e8 1a       	sub	r14, r24
    243c:	f9 0a       	sbc	r15, r25
    243e:	c7 01       	movw	r24, r14
    2440:	9f 8b       	std	Y+23, r25	; 0x17
    2442:	8e 8b       	std	Y+22, r24	; 0x16
    2444:	88 8d       	ldd	r24, Y+24	; 0x18
    2446:	99 8d       	ldd	r25, Y+25	; 0x19
    2448:	fc 01       	movw	r30, r24
    244a:	20 81       	ld	r18, Z
    244c:	31 81       	ldd	r19, Z+1	; 0x01
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	28 0f       	add	r18, r24
    2454:	39 1f       	adc	r19, r25
    2456:	88 8d       	ldd	r24, Y+24	; 0x18
    2458:	99 8d       	ldd	r25, Y+25	; 0x19
    245a:	fc 01       	movw	r30, r24
    245c:	31 83       	std	Z+1, r19	; 0x01
    245e:	20 83       	st	Z, r18
		if (((WORD)fs->fptr % 512) == 0) {
    2460:	8d 81       	ldd	r24, Y+5	; 0x05
    2462:	9e 81       	ldd	r25, Y+6	; 0x06
    2464:	fc 01       	movw	r30, r24
    2466:	86 89       	ldd	r24, Z+22	; 0x16
    2468:	97 89       	ldd	r25, Z+23	; 0x17
    246a:	a0 8d       	ldd	r26, Z+24	; 0x18
    246c:	b1 8d       	ldd	r27, Z+25	; 0x19
    246e:	91 70       	andi	r25, 0x01	; 1
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	99 f4       	brne	.+38     	; 0x249a <pf_write+0x38a>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	ba 01       	movw	r22, r20
    247e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <disk_writep>
    2482:	88 23       	and	r24, r24
    2484:	d9 f4       	brne	.+54     	; 0x24bc <pf_write+0x3ac>
			fs->flag &= ~FA__WIP;
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	9e 81       	ldd	r25, Y+6	; 0x06
    248a:	fc 01       	movw	r30, r24
    248c:	81 81       	ldd	r24, Z+1	; 0x01
    248e:	28 2f       	mov	r18, r24
    2490:	2f 7b       	andi	r18, 0xBF	; 191
    2492:	8d 81       	ldd	r24, Y+5	; 0x05
    2494:	9e 81       	ldd	r25, Y+6	; 0x06
    2496:	fc 01       	movw	r30, r24
    2498:	21 83       	std	Z+1, r18	; 0x01
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    249a:	8e 89       	ldd	r24, Y+22	; 0x16
    249c:	9f 89       	ldd	r25, Y+23	; 0x17
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	09 f0       	breq	.+2      	; 0x24a4 <pf_write+0x394>
    24a2:	d7 ce       	rjmp	.-594    	; 0x2252 <pf_write+0x142>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	10 c0       	rjmp	.+32     	; 0x24c8 <pf_write+0x3b8>
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    24a8:	00 00       	nop
    24aa:	09 c0       	rjmp	.+18     	; 0x24be <pf_write+0x3ae>
		if (((WORD)fs->fptr % 512) == 0) {			/* On the sector boundary? */
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
			if (!cs) {								/* On the cluster boundary? */
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    24ac:	00 00       	nop
    24ae:	07 c0       	rjmp	.+14     	; 0x24be <pf_write+0x3ae>
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fw_abort;
    24b0:	00 00       	nop
    24b2:	05 c0       	rjmp	.+10     	; 0x24be <pf_write+0x3ae>
			fs->dsect = sect + cs;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    24b4:	00 00       	nop
    24b6:	03 c0       	rjmp	.+6      	; 0x24be <pf_write+0x3ae>
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    24b8:	00 00       	nop
    24ba:	01 c0       	rjmp	.+2      	; 0x24be <pf_write+0x3ae>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
		btw -= wcnt; *bw += wcnt;
		if (((WORD)fs->fptr % 512) == 0) {
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    24bc:	00 00       	nop
	}

	return FR_OK;

fw_abort:
	fs->flag = 0;
    24be:	8d 81       	ldd	r24, Y+5	; 0x05
    24c0:	9e 81       	ldd	r25, Y+6	; 0x06
    24c2:	fc 01       	movw	r30, r24
    24c4:	11 82       	std	Z+1, r1	; 0x01
	return FR_DISK_ERR;
    24c6:	81 e0       	ldi	r24, 0x01	; 1
}
    24c8:	69 96       	adiw	r28, 0x19	; 25
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	1f 91       	pop	r17
    24da:	0f 91       	pop	r16
    24dc:	ff 90       	pop	r15
    24de:	ef 90       	pop	r14
    24e0:	08 95       	ret

000024e2 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
    24e2:	ef 92       	push	r14
    24e4:	ff 92       	push	r15
    24e6:	0f 93       	push	r16
    24e8:	1f 93       	push	r17
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	66 97       	sbiw	r28, 0x16	; 22
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	6b 8b       	std	Y+19, r22	; 0x13
    2500:	7c 8b       	std	Y+20, r23	; 0x14
    2502:	8d 8b       	std	Y+21, r24	; 0x15
    2504:	9e 8b       	std	Y+22, r25	; 0x16
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    2506:	80 91 07 01 	lds	r24, 0x0107
    250a:	90 91 08 01 	lds	r25, 0x0108
    250e:	9e 83       	std	Y+6, r25	; 0x06
    2510:	8d 83       	std	Y+5, r24	; 0x05


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    2512:	8d 81       	ldd	r24, Y+5	; 0x05
    2514:	9e 81       	ldd	r25, Y+6	; 0x06
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	11 f4       	brne	.+4      	; 0x251e <pf_lseek+0x3c>
    251a:	86 e0       	ldi	r24, 0x06	; 6
    251c:	b2 c1       	rjmp	.+868    	; 0x2882 <pf_lseek+0x3a0>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    251e:	8d 81       	ldd	r24, Y+5	; 0x05
    2520:	9e 81       	ldd	r25, Y+6	; 0x06
    2522:	fc 01       	movw	r30, r24
    2524:	81 81       	ldd	r24, Z+1	; 0x01
    2526:	88 2f       	mov	r24, r24
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	81 70       	andi	r24, 0x01	; 1
    252c:	90 70       	andi	r25, 0x00	; 0
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	11 f4       	brne	.+4      	; 0x2536 <pf_lseek+0x54>
			return FR_NOT_OPENED;
    2532:	85 e0       	ldi	r24, 0x05	; 5
    2534:	a6 c1       	rjmp	.+844    	; 0x2882 <pf_lseek+0x3a0>

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
    2536:	8d 81       	ldd	r24, Y+5	; 0x05
    2538:	9e 81       	ldd	r25, Y+6	; 0x06
    253a:	fc 01       	movw	r30, r24
    253c:	22 8d       	ldd	r18, Z+26	; 0x1a
    253e:	33 8d       	ldd	r19, Z+27	; 0x1b
    2540:	44 8d       	ldd	r20, Z+28	; 0x1c
    2542:	55 8d       	ldd	r21, Z+29	; 0x1d
    2544:	8b 89       	ldd	r24, Y+19	; 0x13
    2546:	9c 89       	ldd	r25, Y+20	; 0x14
    2548:	ad 89       	ldd	r26, Y+21	; 0x15
    254a:	be 89       	ldd	r27, Y+22	; 0x16
    254c:	28 17       	cp	r18, r24
    254e:	39 07       	cpc	r19, r25
    2550:	4a 07       	cpc	r20, r26
    2552:	5b 07       	cpc	r21, r27
    2554:	58 f4       	brcc	.+22     	; 0x256c <pf_lseek+0x8a>
    2556:	8d 81       	ldd	r24, Y+5	; 0x05
    2558:	9e 81       	ldd	r25, Y+6	; 0x06
    255a:	fc 01       	movw	r30, r24
    255c:	82 8d       	ldd	r24, Z+26	; 0x1a
    255e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2560:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2562:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2564:	8b 8b       	std	Y+19, r24	; 0x13
    2566:	9c 8b       	std	Y+20, r25	; 0x14
    2568:	ad 8b       	std	Y+21, r26	; 0x15
    256a:	be 8b       	std	Y+22, r27	; 0x16
	ifptr = fs->fptr;
    256c:	8d 81       	ldd	r24, Y+5	; 0x05
    256e:	9e 81       	ldd	r25, Y+6	; 0x06
    2570:	fc 01       	movw	r30, r24
    2572:	86 89       	ldd	r24, Z+22	; 0x16
    2574:	97 89       	ldd	r25, Z+23	; 0x17
    2576:	a0 8d       	ldd	r26, Z+24	; 0x18
    2578:	b1 8d       	ldd	r27, Z+25	; 0x19
    257a:	8f 83       	std	Y+7, r24	; 0x07
    257c:	98 87       	std	Y+8, r25	; 0x08
    257e:	a9 87       	std	Y+9, r26	; 0x09
    2580:	ba 87       	std	Y+10, r27	; 0x0a
	fs->fptr = 0;
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	9e 81       	ldd	r25, Y+6	; 0x06
    2586:	fc 01       	movw	r30, r24
    2588:	16 8a       	std	Z+22, r1	; 0x16
    258a:	17 8a       	std	Z+23, r1	; 0x17
    258c:	10 8e       	std	Z+24, r1	; 0x18
    258e:	11 8e       	std	Z+25, r1	; 0x19
	if (ofs > 0) {
    2590:	8b 89       	ldd	r24, Y+19	; 0x13
    2592:	9c 89       	ldd	r25, Y+20	; 0x14
    2594:	ad 89       	ldd	r26, Y+21	; 0x15
    2596:	be 89       	ldd	r27, Y+22	; 0x16
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	a1 05       	cpc	r26, r1
    259c:	b1 05       	cpc	r27, r1
    259e:	09 f4       	brne	.+2      	; 0x25a2 <pf_lseek+0xc0>
    25a0:	68 c1       	rjmp	.+720    	; 0x2872 <pf_lseek+0x390>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
    25a2:	8d 81       	ldd	r24, Y+5	; 0x05
    25a4:	9e 81       	ldd	r25, Y+6	; 0x06
    25a6:	fc 01       	movw	r30, r24
    25a8:	82 81       	ldd	r24, Z+2	; 0x02
    25aa:	88 2f       	mov	r24, r24
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	a0 e0       	ldi	r26, 0x00	; 0
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	07 2e       	mov	r0, r23
    25b4:	79 e0       	ldi	r23, 0x09	; 9
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	aa 1f       	adc	r26, r26
    25bc:	bb 1f       	adc	r27, r27
    25be:	7a 95       	dec	r23
    25c0:	d1 f7       	brne	.-12     	; 0x25b6 <pf_lseek+0xd4>
    25c2:	70 2d       	mov	r23, r0
    25c4:	8b 87       	std	Y+11, r24	; 0x0b
    25c6:	9c 87       	std	Y+12, r25	; 0x0c
    25c8:	ad 87       	std	Y+13, r26	; 0x0d
    25ca:	be 87       	std	Y+14, r27	; 0x0e
		if (ifptr > 0 &&
    25cc:	8f 81       	ldd	r24, Y+7	; 0x07
    25ce:	98 85       	ldd	r25, Y+8	; 0x08
    25d0:	a9 85       	ldd	r26, Y+9	; 0x09
    25d2:	ba 85       	ldd	r27, Y+10	; 0x0a
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	a1 05       	cpc	r26, r1
    25d8:	b1 05       	cpc	r27, r1
    25da:	09 f4       	brne	.+2      	; 0x25de <pf_lseek+0xfc>
    25dc:	6b c0       	rjmp	.+214    	; 0x26b4 <pf_lseek+0x1d2>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    25de:	8b 89       	ldd	r24, Y+19	; 0x13
    25e0:	9c 89       	ldd	r25, Y+20	; 0x14
    25e2:	ad 89       	ldd	r26, Y+21	; 0x15
    25e4:	be 89       	ldd	r27, Y+22	; 0x16
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	a1 09       	sbc	r26, r1
    25ea:	b1 09       	sbc	r27, r1
    25ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    25ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    25f0:	4d 85       	ldd	r20, Y+13	; 0x0d
    25f2:	5e 85       	ldd	r21, Y+14	; 0x0e
    25f4:	bc 01       	movw	r22, r24
    25f6:	cd 01       	movw	r24, r26
    25f8:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <__udivmodsi4>
    25fc:	79 01       	movw	r14, r18
    25fe:	8a 01       	movw	r16, r20
    2600:	8f 81       	ldd	r24, Y+7	; 0x07
    2602:	98 85       	ldd	r25, Y+8	; 0x08
    2604:	a9 85       	ldd	r26, Y+9	; 0x09
    2606:	ba 85       	ldd	r27, Y+10	; 0x0a
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	a1 09       	sbc	r26, r1
    260c:	b1 09       	sbc	r27, r1
    260e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2610:	3c 85       	ldd	r19, Y+12	; 0x0c
    2612:	4d 85       	ldd	r20, Y+13	; 0x0d
    2614:	5e 85       	ldd	r21, Y+14	; 0x0e
    2616:	bc 01       	movw	r22, r24
    2618:	cd 01       	movw	r24, r26
    261a:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <__udivmodsi4>
    261e:	da 01       	movw	r26, r20
    2620:	c9 01       	movw	r24, r18
	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
	fs->fptr = 0;
	if (ofs > 0) {
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
		if (ifptr > 0 &&
    2622:	e8 16       	cp	r14, r24
    2624:	f9 06       	cpc	r15, r25
    2626:	0a 07       	cpc	r16, r26
    2628:	1b 07       	cpc	r17, r27
    262a:	08 f4       	brcc	.+2      	; 0x262e <pf_lseek+0x14c>
    262c:	43 c0       	rjmp	.+134    	; 0x26b4 <pf_lseek+0x1d2>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    262e:	8f 81       	ldd	r24, Y+7	; 0x07
    2630:	98 85       	ldd	r25, Y+8	; 0x08
    2632:	a9 85       	ldd	r26, Y+9	; 0x09
    2634:	ba 85       	ldd	r27, Y+10	; 0x0a
    2636:	9c 01       	movw	r18, r24
    2638:	ad 01       	movw	r20, r26
    263a:	21 50       	subi	r18, 0x01	; 1
    263c:	30 40       	sbci	r19, 0x00	; 0
    263e:	40 40       	sbci	r20, 0x00	; 0
    2640:	50 40       	sbci	r21, 0x00	; 0
    2642:	8b 85       	ldd	r24, Y+11	; 0x0b
    2644:	9c 85       	ldd	r25, Y+12	; 0x0c
    2646:	ad 85       	ldd	r26, Y+13	; 0x0d
    2648:	be 85       	ldd	r27, Y+14	; 0x0e
    264a:	b0 95       	com	r27
    264c:	a0 95       	com	r26
    264e:	90 95       	com	r25
    2650:	81 95       	neg	r24
    2652:	9f 4f       	sbci	r25, 0xFF	; 255
    2654:	af 4f       	sbci	r26, 0xFF	; 255
    2656:	bf 4f       	sbci	r27, 0xFF	; 255
    2658:	82 23       	and	r24, r18
    265a:	93 23       	and	r25, r19
    265c:	a4 23       	and	r26, r20
    265e:	b5 23       	and	r27, r21
    2660:	2d 81       	ldd	r18, Y+5	; 0x05
    2662:	3e 81       	ldd	r19, Y+6	; 0x06
    2664:	f9 01       	movw	r30, r18
    2666:	86 8b       	std	Z+22, r24	; 0x16
    2668:	97 8b       	std	Z+23, r25	; 0x17
    266a:	a0 8f       	std	Z+24, r26	; 0x18
    266c:	b1 8f       	std	Z+25, r27	; 0x19
			ofs -= fs->fptr;
    266e:	8d 81       	ldd	r24, Y+5	; 0x05
    2670:	9e 81       	ldd	r25, Y+6	; 0x06
    2672:	fc 01       	movw	r30, r24
    2674:	86 89       	ldd	r24, Z+22	; 0x16
    2676:	97 89       	ldd	r25, Z+23	; 0x17
    2678:	a0 8d       	ldd	r26, Z+24	; 0x18
    267a:	b1 8d       	ldd	r27, Z+25	; 0x19
    267c:	2b 89       	ldd	r18, Y+19	; 0x13
    267e:	3c 89       	ldd	r19, Y+20	; 0x14
    2680:	4d 89       	ldd	r20, Y+21	; 0x15
    2682:	5e 89       	ldd	r21, Y+22	; 0x16
    2684:	79 01       	movw	r14, r18
    2686:	8a 01       	movw	r16, r20
    2688:	e8 1a       	sub	r14, r24
    268a:	f9 0a       	sbc	r15, r25
    268c:	0a 0b       	sbc	r16, r26
    268e:	1b 0b       	sbc	r17, r27
    2690:	d8 01       	movw	r26, r16
    2692:	c7 01       	movw	r24, r14
    2694:	8b 8b       	std	Y+19, r24	; 0x13
    2696:	9c 8b       	std	Y+20, r25	; 0x14
    2698:	ad 8b       	std	Y+21, r26	; 0x15
    269a:	be 8b       	std	Y+22, r27	; 0x16
			clst = fs->curr_clust;
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	fc 01       	movw	r30, r24
    26a2:	82 a1       	lds	r24, 0x42
    26a4:	93 a1       	lds	r25, 0x43
    26a6:	a4 a1       	lds	r26, 0x44
    26a8:	b5 a1       	lds	r27, 0x45
    26aa:	89 83       	std	Y+1, r24	; 0x01
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	ab 83       	std	Y+3, r26	; 0x03
    26b0:	bc 83       	std	Y+4, r27	; 0x04
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    26b2:	75 c0       	rjmp	.+234    	; 0x279e <pf_lseek+0x2bc>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
			ofs -= fs->fptr;
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
    26b4:	8d 81       	ldd	r24, Y+5	; 0x05
    26b6:	9e 81       	ldd	r25, Y+6	; 0x06
    26b8:	fc 01       	movw	r30, r24
    26ba:	86 8d       	ldd	r24, Z+30	; 0x1e
    26bc:	97 8d       	ldd	r25, Z+31	; 0x1f
    26be:	a0 a1       	lds	r26, 0x40
    26c0:	b1 a1       	lds	r27, 0x41
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	ab 83       	std	Y+3, r26	; 0x03
    26c8:	bc 83       	std	Y+4, r27	; 0x04
			fs->curr_clust = clst;
    26ca:	2d 81       	ldd	r18, Y+5	; 0x05
    26cc:	3e 81       	ldd	r19, Y+6	; 0x06
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	9a 81       	ldd	r25, Y+2	; 0x02
    26d2:	ab 81       	ldd	r26, Y+3	; 0x03
    26d4:	bc 81       	ldd	r27, Y+4	; 0x04
    26d6:	f9 01       	movw	r30, r18
    26d8:	82 a3       	lds	r24, 0x52
    26da:	93 a3       	lds	r25, 0x53
    26dc:	a4 a3       	lds	r26, 0x54
    26de:	b5 a3       	lds	r27, 0x55
		}
		while (ofs > bcs) {				/* Cluster following loop */
    26e0:	5e c0       	rjmp	.+188    	; 0x279e <pf_lseek+0x2bc>
			clst = get_fat(clst);		/* Follow cluster chain */
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	9a 81       	ldd	r25, Y+2	; 0x02
    26e6:	ab 81       	ldd	r26, Y+3	; 0x03
    26e8:	bc 81       	ldd	r27, Y+4	; 0x04
    26ea:	bc 01       	movw	r22, r24
    26ec:	cd 01       	movw	r24, r26
    26ee:	0e 94 2c 06 	call	0xc58	; 0xc58 <get_fat>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	ab 83       	std	Y+3, r26	; 0x03
    26fc:	bc 83       	std	Y+4, r27	; 0x04
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	9a 81       	ldd	r25, Y+2	; 0x02
    2702:	ab 81       	ldd	r26, Y+3	; 0x03
    2704:	bc 81       	ldd	r27, Y+4	; 0x04
    2706:	82 30       	cpi	r24, 0x02	; 2
    2708:	91 05       	cpc	r25, r1
    270a:	a1 05       	cpc	r26, r1
    270c:	b1 05       	cpc	r27, r1
    270e:	08 f4       	brcc	.+2      	; 0x2712 <pf_lseek+0x230>
    2710:	b3 c0       	rjmp	.+358    	; 0x2878 <pf_lseek+0x396>
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	fc 01       	movw	r30, r24
    2718:	26 81       	ldd	r18, Z+6	; 0x06
    271a:	37 81       	ldd	r19, Z+7	; 0x07
    271c:	40 85       	ldd	r20, Z+8	; 0x08
    271e:	51 85       	ldd	r21, Z+9	; 0x09
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	ab 81       	ldd	r26, Y+3	; 0x03
    2726:	bc 81       	ldd	r27, Y+4	; 0x04
    2728:	82 17       	cp	r24, r18
    272a:	93 07       	cpc	r25, r19
    272c:	a4 07       	cpc	r26, r20
    272e:	b5 07       	cpc	r27, r21
    2730:	08 f0       	brcs	.+2      	; 0x2734 <pf_lseek+0x252>
    2732:	a2 c0       	rjmp	.+324    	; 0x2878 <pf_lseek+0x396>
			fs->curr_clust = clst;
    2734:	2d 81       	ldd	r18, Y+5	; 0x05
    2736:	3e 81       	ldd	r19, Y+6	; 0x06
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	9a 81       	ldd	r25, Y+2	; 0x02
    273c:	ab 81       	ldd	r26, Y+3	; 0x03
    273e:	bc 81       	ldd	r27, Y+4	; 0x04
    2740:	f9 01       	movw	r30, r18
    2742:	82 a3       	lds	r24, 0x52
    2744:	93 a3       	lds	r25, 0x53
    2746:	a4 a3       	lds	r26, 0x54
    2748:	b5 a3       	lds	r27, 0x55
			fs->fptr += bcs;
    274a:	8d 81       	ldd	r24, Y+5	; 0x05
    274c:	9e 81       	ldd	r25, Y+6	; 0x06
    274e:	fc 01       	movw	r30, r24
    2750:	26 89       	ldd	r18, Z+22	; 0x16
    2752:	37 89       	ldd	r19, Z+23	; 0x17
    2754:	40 8d       	ldd	r20, Z+24	; 0x18
    2756:	51 8d       	ldd	r21, Z+25	; 0x19
    2758:	8b 85       	ldd	r24, Y+11	; 0x0b
    275a:	9c 85       	ldd	r25, Y+12	; 0x0c
    275c:	ad 85       	ldd	r26, Y+13	; 0x0d
    275e:	be 85       	ldd	r27, Y+14	; 0x0e
    2760:	82 0f       	add	r24, r18
    2762:	93 1f       	adc	r25, r19
    2764:	a4 1f       	adc	r26, r20
    2766:	b5 1f       	adc	r27, r21
    2768:	2d 81       	ldd	r18, Y+5	; 0x05
    276a:	3e 81       	ldd	r19, Y+6	; 0x06
    276c:	f9 01       	movw	r30, r18
    276e:	86 8b       	std	Z+22, r24	; 0x16
    2770:	97 8b       	std	Z+23, r25	; 0x17
    2772:	a0 8f       	std	Z+24, r26	; 0x18
    2774:	b1 8f       	std	Z+25, r27	; 0x19
			ofs -= bcs;
    2776:	2b 89       	ldd	r18, Y+19	; 0x13
    2778:	3c 89       	ldd	r19, Y+20	; 0x14
    277a:	4d 89       	ldd	r20, Y+21	; 0x15
    277c:	5e 89       	ldd	r21, Y+22	; 0x16
    277e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2780:	9c 85       	ldd	r25, Y+12	; 0x0c
    2782:	ad 85       	ldd	r26, Y+13	; 0x0d
    2784:	be 85       	ldd	r27, Y+14	; 0x0e
    2786:	79 01       	movw	r14, r18
    2788:	8a 01       	movw	r16, r20
    278a:	e8 1a       	sub	r14, r24
    278c:	f9 0a       	sbc	r15, r25
    278e:	0a 0b       	sbc	r16, r26
    2790:	1b 0b       	sbc	r17, r27
    2792:	d8 01       	movw	r26, r16
    2794:	c7 01       	movw	r24, r14
    2796:	8b 8b       	std	Y+19, r24	; 0x13
    2798:	9c 8b       	std	Y+20, r25	; 0x14
    279a:	ad 8b       	std	Y+21, r26	; 0x15
    279c:	be 8b       	std	Y+22, r27	; 0x16
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    279e:	2b 89       	ldd	r18, Y+19	; 0x13
    27a0:	3c 89       	ldd	r19, Y+20	; 0x14
    27a2:	4d 89       	ldd	r20, Y+21	; 0x15
    27a4:	5e 89       	ldd	r21, Y+22	; 0x16
    27a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    27a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    27aa:	ad 85       	ldd	r26, Y+13	; 0x0d
    27ac:	be 85       	ldd	r27, Y+14	; 0x0e
    27ae:	82 17       	cp	r24, r18
    27b0:	93 07       	cpc	r25, r19
    27b2:	a4 07       	cpc	r26, r20
    27b4:	b5 07       	cpc	r27, r21
    27b6:	08 f4       	brcc	.+2      	; 0x27ba <pf_lseek+0x2d8>
    27b8:	94 cf       	rjmp	.-216    	; 0x26e2 <pf_lseek+0x200>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
    27bc:	9e 81       	ldd	r25, Y+6	; 0x06
    27be:	fc 01       	movw	r30, r24
    27c0:	26 89       	ldd	r18, Z+22	; 0x16
    27c2:	37 89       	ldd	r19, Z+23	; 0x17
    27c4:	40 8d       	ldd	r20, Z+24	; 0x18
    27c6:	51 8d       	ldd	r21, Z+25	; 0x19
    27c8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ca:	9c 89       	ldd	r25, Y+20	; 0x14
    27cc:	ad 89       	ldd	r26, Y+21	; 0x15
    27ce:	be 89       	ldd	r27, Y+22	; 0x16
    27d0:	82 0f       	add	r24, r18
    27d2:	93 1f       	adc	r25, r19
    27d4:	a4 1f       	adc	r26, r20
    27d6:	b5 1f       	adc	r27, r21
    27d8:	2d 81       	ldd	r18, Y+5	; 0x05
    27da:	3e 81       	ldd	r19, Y+6	; 0x06
    27dc:	f9 01       	movw	r30, r18
    27de:	86 8b       	std	Z+22, r24	; 0x16
    27e0:	97 8b       	std	Z+23, r25	; 0x17
    27e2:	a0 8f       	std	Z+24, r26	; 0x18
    27e4:	b1 8f       	std	Z+25, r27	; 0x19
		sect = clust2sect(clst);		/* Current sector */
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ea:	ab 81       	ldd	r26, Y+3	; 0x03
    27ec:	bc 81       	ldd	r27, Y+4	; 0x04
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <clust2sect>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	8f 87       	std	Y+15, r24	; 0x0f
    27fc:	98 8b       	std	Y+16, r25	; 0x10
    27fe:	a9 8b       	std	Y+17, r26	; 0x11
    2800:	ba 8b       	std	Y+18, r27	; 0x12
		if (!sect) goto fe_abort;
    2802:	8f 85       	ldd	r24, Y+15	; 0x0f
    2804:	98 89       	ldd	r25, Y+16	; 0x10
    2806:	a9 89       	ldd	r26, Y+17	; 0x11
    2808:	ba 89       	ldd	r27, Y+18	; 0x12
    280a:	00 97       	sbiw	r24, 0x00	; 0
    280c:	a1 05       	cpc	r26, r1
    280e:	b1 05       	cpc	r27, r1
    2810:	91 f1       	breq	.+100    	; 0x2876 <pf_lseek+0x394>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
    2812:	8d 81       	ldd	r24, Y+5	; 0x05
    2814:	9e 81       	ldd	r25, Y+6	; 0x06
    2816:	fc 01       	movw	r30, r24
    2818:	86 89       	ldd	r24, Z+22	; 0x16
    281a:	97 89       	ldd	r25, Z+23	; 0x17
    281c:	a0 8d       	ldd	r26, Z+24	; 0x18
    281e:	b1 8d       	ldd	r27, Z+25	; 0x19
    2820:	9c 01       	movw	r18, r24
    2822:	ad 01       	movw	r20, r26
    2824:	01 2e       	mov	r0, r17
    2826:	19 e0       	ldi	r17, 0x09	; 9
    2828:	56 95       	lsr	r21
    282a:	47 95       	ror	r20
    282c:	37 95       	ror	r19
    282e:	27 95       	ror	r18
    2830:	1a 95       	dec	r17
    2832:	d1 f7       	brne	.-12     	; 0x2828 <pf_lseek+0x346>
    2834:	10 2d       	mov	r17, r0
    2836:	8d 81       	ldd	r24, Y+5	; 0x05
    2838:	9e 81       	ldd	r25, Y+6	; 0x06
    283a:	fc 01       	movw	r30, r24
    283c:	82 81       	ldd	r24, Z+2	; 0x02
    283e:	88 2f       	mov	r24, r24
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	aa 27       	eor	r26, r26
    2846:	97 fd       	sbrc	r25, 7
    2848:	a0 95       	com	r26
    284a:	ba 2f       	mov	r27, r26
    284c:	28 23       	and	r18, r24
    284e:	39 23       	and	r19, r25
    2850:	4a 23       	and	r20, r26
    2852:	5b 23       	and	r21, r27
    2854:	8f 85       	ldd	r24, Y+15	; 0x0f
    2856:	98 89       	ldd	r25, Y+16	; 0x10
    2858:	a9 89       	ldd	r26, Y+17	; 0x11
    285a:	ba 89       	ldd	r27, Y+18	; 0x12
    285c:	82 0f       	add	r24, r18
    285e:	93 1f       	adc	r25, r19
    2860:	a4 1f       	adc	r26, r20
    2862:	b5 1f       	adc	r27, r21
    2864:	2d 81       	ldd	r18, Y+5	; 0x05
    2866:	3e 81       	ldd	r19, Y+6	; 0x06
    2868:	f9 01       	movw	r30, r18
    286a:	86 a3       	lds	r24, 0x56
    286c:	97 a3       	lds	r25, 0x57
    286e:	a0 a7       	lds	r26, 0x70
    2870:	b1 a7       	lds	r27, 0x71
	}

	return FR_OK;
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	06 c0       	rjmp	.+12     	; 0x2882 <pf_lseek+0x3a0>
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
    2876:	00 00       	nop
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
    2878:	8d 81       	ldd	r24, Y+5	; 0x05
    287a:	9e 81       	ldd	r25, Y+6	; 0x06
    287c:	fc 01       	movw	r30, r24
    287e:	11 82       	std	Z+1, r1	; 0x01
	return FR_DISK_ERR;
    2880:	81 e0       	ldi	r24, 0x01	; 1
}
    2882:	66 96       	adiw	r28, 0x16	; 22
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	f8 94       	cli
    2888:	de bf       	out	0x3e, r29	; 62
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	cd bf       	out	0x3d, r28	; 61
    288e:	df 91       	pop	r29
    2890:	cf 91       	pop	r28
    2892:	1f 91       	pop	r17
    2894:	0f 91       	pop	r16
    2896:	ff 90       	pop	r15
    2898:	ef 90       	pop	r14
    289a:	08 95       	ret

0000289c <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	e3 97       	sbiw	r28, 0x33	; 51
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	99 ab       	sts	0x59, r25
    28b2:	88 ab       	sts	0x58, r24
    28b4:	7b ab       	sts	0x5b, r23
    28b6:	6a ab       	sts	0x5a, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    28b8:	80 91 07 01 	lds	r24, 0x0107
    28bc:	90 91 08 01 	lds	r25, 0x0108
    28c0:	9b 83       	std	Y+3, r25	; 0x03
    28c2:	8a 83       	std	Y+2, r24	; 0x02


	if (!fs) {				/* Check file system */
    28c4:	8a 81       	ldd	r24, Y+2	; 0x02
    28c6:	9b 81       	ldd	r25, Y+3	; 0x03
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	19 f4       	brne	.+6      	; 0x28d2 <pf_opendir+0x36>
		res = FR_NOT_ENABLED;
    28cc:	86 e0       	ldi	r24, 0x06	; 6
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	51 c0       	rjmp	.+162    	; 0x2974 <pf_opendir+0xd8>
	} else {
		dj->fn = sp;
    28d2:	88 a9       	sts	0x48, r24
    28d4:	99 a9       	sts	0x49, r25
    28d6:	9e 01       	movw	r18, r28
    28d8:	2c 5f       	subi	r18, 0xFC	; 252
    28da:	3f 4f       	sbci	r19, 0xFF	; 255
    28dc:	fc 01       	movw	r30, r24
    28de:	33 83       	std	Z+3, r19	; 0x03
    28e0:	22 83       	std	Z+2, r18	; 0x02
		res = follow_path(dj, dir, path);		/* Follow the path to the directory */
    28e2:	88 a9       	sts	0x48, r24
    28e4:	99 a9       	sts	0x49, r25
    28e6:	ae 01       	movw	r20, r28
    28e8:	40 5f       	subi	r20, 0xF0	; 240
    28ea:	5f 4f       	sbci	r21, 0xFF	; 255
    28ec:	2a a9       	sts	0x4a, r18
    28ee:	3b a9       	sts	0x4b, r19
    28f0:	ba 01       	movw	r22, r20
    28f2:	a9 01       	movw	r20, r18
    28f4:	0e 94 82 0b 	call	0x1704	; 0x1704 <follow_path>
    28f8:	89 83       	std	Y+1, r24	; 0x01
		if (res == FR_OK) {						/* Follow completed */
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	88 23       	and	r24, r24
    28fe:	a9 f5       	brne	.+106    	; 0x296a <pf_opendir+0xce>
			if (dir[0]) {						/* It is not the root dir */
    2900:	88 89       	ldd	r24, Y+16	; 0x10
    2902:	88 23       	and	r24, r24
    2904:	51 f1       	breq	.+84     	; 0x295a <pf_opendir+0xbe>
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
    2906:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2908:	88 2f       	mov	r24, r24
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	80 71       	andi	r24, 0x10	; 16
    290e:	90 70       	andi	r25, 0x00	; 0
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	09 f1       	breq	.+66     	; 0x2956 <pf_opendir+0xba>
					dj->sclust = LD_CLUST(dir);
    2914:	ce 01       	movw	r24, r28
    2916:	40 96       	adiw	r24, 0x10	; 16
    2918:	44 96       	adiw	r24, 0x14	; 20
    291a:	fc 01       	movw	r30, r24
    291c:	80 81       	ld	r24, Z
    291e:	91 81       	ldd	r25, Z+1	; 0x01
    2920:	cc 01       	movw	r24, r24
    2922:	a0 e0       	ldi	r26, 0x00	; 0
    2924:	b0 e0       	ldi	r27, 0x00	; 0
    2926:	ac 01       	movw	r20, r24
    2928:	33 27       	eor	r19, r19
    292a:	22 27       	eor	r18, r18
    292c:	ce 01       	movw	r24, r28
    292e:	40 96       	adiw	r24, 0x10	; 16
    2930:	4a 96       	adiw	r24, 0x1a	; 26
    2932:	fc 01       	movw	r30, r24
    2934:	80 81       	ld	r24, Z
    2936:	91 81       	ldd	r25, Z+1	; 0x01
    2938:	cc 01       	movw	r24, r24
    293a:	a0 e0       	ldi	r26, 0x00	; 0
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	82 2b       	or	r24, r18
    2940:	93 2b       	or	r25, r19
    2942:	a4 2b       	or	r26, r20
    2944:	b5 2b       	or	r27, r21
    2946:	28 a9       	sts	0x48, r18
    2948:	39 a9       	sts	0x49, r19
    294a:	f9 01       	movw	r30, r18
    294c:	84 83       	std	Z+4, r24	; 0x04
    294e:	95 83       	std	Z+5, r25	; 0x05
    2950:	a6 83       	std	Z+6, r26	; 0x06
    2952:	b7 83       	std	Z+7, r27	; 0x07
    2954:	02 c0       	rjmp	.+4      	; 0x295a <pf_opendir+0xbe>
				else							/* The object is not a directory */
					res = FR_NO_PATH;
    2956:	84 e0       	ldi	r24, 0x04	; 4
    2958:	89 83       	std	Y+1, r24	; 0x01
			}
			if (res == FR_OK)
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	88 23       	and	r24, r24
    295e:	29 f4       	brne	.+10     	; 0x296a <pf_opendir+0xce>
				res = dir_rewind(dj);			/* Rewind dir */
    2960:	88 a9       	sts	0x48, r24
    2962:	99 a9       	sts	0x49, r25
    2964:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <dir_rewind>
    2968:	89 83       	std	Y+1, r24	; 0x01
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	83 30       	cpi	r24, 0x03	; 3
    296e:	11 f4       	brne	.+4      	; 0x2974 <pf_opendir+0xd8>
    2970:	84 e0       	ldi	r24, 0x04	; 4
    2972:	89 83       	std	Y+1, r24	; 0x01
	}

	return res;
    2974:	89 81       	ldd	r24, Y+1	; 0x01
}
    2976:	e3 96       	adiw	r28, 0x33	; 51
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	08 95       	ret

00002988 <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	e3 97       	sbiw	r28, 0x33	; 51
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	99 ab       	sts	0x59, r25
    299e:	88 ab       	sts	0x58, r24
    29a0:	7b ab       	sts	0x5b, r23
    29a2:	6a ab       	sts	0x5a, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    29a4:	80 91 07 01 	lds	r24, 0x0107
    29a8:	90 91 08 01 	lds	r25, 0x0108
    29ac:	9b 83       	std	Y+3, r25	; 0x03
    29ae:	8a 83       	std	Y+2, r24	; 0x02


	if (!fs) {				/* Check file system */
    29b0:	8a 81       	ldd	r24, Y+2	; 0x02
    29b2:	9b 81       	ldd	r25, Y+3	; 0x03
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	19 f4       	brne	.+6      	; 0x29be <pf_readdir+0x36>
		res = FR_NOT_ENABLED;
    29b8:	86 e0       	ldi	r24, 0x06	; 6
    29ba:	89 83       	std	Y+1, r24	; 0x01
    29bc:	44 c0       	rjmp	.+136    	; 0x2a46 <pf_readdir+0xbe>
	} else {
		dj->fn = sp;
    29be:	88 a9       	sts	0x48, r24
    29c0:	99 a9       	sts	0x49, r25
    29c2:	9e 01       	movw	r18, r28
    29c4:	2c 5f       	subi	r18, 0xFC	; 252
    29c6:	3f 4f       	sbci	r19, 0xFF	; 255
    29c8:	fc 01       	movw	r30, r24
    29ca:	33 83       	std	Z+3, r19	; 0x03
    29cc:	22 83       	std	Z+2, r18	; 0x02
		if (!fno) {
    29ce:	8a a9       	sts	0x4a, r24
    29d0:	9b a9       	sts	0x4b, r25
    29d2:	00 97       	sbiw	r24, 0x00	; 0
    29d4:	31 f4       	brne	.+12     	; 0x29e2 <pf_readdir+0x5a>
			res = dir_rewind(dj);
    29d6:	88 a9       	sts	0x48, r24
    29d8:	99 a9       	sts	0x49, r25
    29da:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <dir_rewind>
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	32 c0       	rjmp	.+100    	; 0x2a46 <pf_readdir+0xbe>
		} else {
			res = dir_read(dj, dir);
    29e2:	88 a9       	sts	0x48, r24
    29e4:	99 a9       	sts	0x49, r25
    29e6:	9e 01       	movw	r18, r28
    29e8:	20 5f       	subi	r18, 0xF0	; 240
    29ea:	3f 4f       	sbci	r19, 0xFF	; 255
    29ec:	b9 01       	movw	r22, r18
    29ee:	0e 94 c0 09 	call	0x1380	; 0x1380 <dir_read>
    29f2:	89 83       	std	Y+1, r24	; 0x01
			if (res == FR_NO_FILE) {
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	83 30       	cpi	r24, 0x03	; 3
    29f8:	41 f4       	brne	.+16     	; 0x2a0a <pf_readdir+0x82>
				dj->sect = 0;
    29fa:	88 a9       	sts	0x48, r24
    29fc:	99 a9       	sts	0x49, r25
    29fe:	fc 01       	movw	r30, r24
    2a00:	14 86       	std	Z+12, r1	; 0x0c
    2a02:	15 86       	std	Z+13, r1	; 0x0d
    2a04:	16 86       	std	Z+14, r1	; 0x0e
    2a06:	17 86       	std	Z+15, r1	; 0x0f
				res = FR_OK;
    2a08:	19 82       	std	Y+1, r1	; 0x01
			}
			if (res == FR_OK) {				/* A valid entry is found */
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	88 23       	and	r24, r24
    2a0e:	d9 f4       	brne	.+54     	; 0x2a46 <pf_readdir+0xbe>
				get_fileinfo(dj, dir, fno);	/* Get the object information */
    2a10:	88 a9       	sts	0x48, r24
    2a12:	99 a9       	sts	0x49, r25
    2a14:	ae 01       	movw	r20, r28
    2a16:	40 5f       	subi	r20, 0xF0	; 240
    2a18:	5f 4f       	sbci	r21, 0xFF	; 255
    2a1a:	2a a9       	sts	0x4a, r18
    2a1c:	3b a9       	sts	0x4b, r19
    2a1e:	ba 01       	movw	r22, r20
    2a20:	a9 01       	movw	r20, r18
    2a22:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <get_fileinfo>
				res = dir_next(dj);			/* Increment index for next */
    2a26:	88 a9       	sts	0x48, r24
    2a28:	99 a9       	sts	0x49, r25
    2a2a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <dir_next>
    2a2e:	89 83       	std	Y+1, r24	; 0x01
				if (res == FR_NO_FILE) {
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
    2a32:	83 30       	cpi	r24, 0x03	; 3
    2a34:	41 f4       	brne	.+16     	; 0x2a46 <pf_readdir+0xbe>
					dj->sect = 0;
    2a36:	88 a9       	sts	0x48, r24
    2a38:	99 a9       	sts	0x49, r25
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	14 86       	std	Z+12, r1	; 0x0c
    2a3e:	15 86       	std	Z+13, r1	; 0x0d
    2a40:	16 86       	std	Z+14, r1	; 0x0e
    2a42:	17 86       	std	Z+15, r1	; 0x0f
					res = FR_OK;
    2a44:	19 82       	std	Y+1, r1	; 0x01
				}
			}
		}
	}

	return res;
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a48:	e3 96       	adiw	r28, 0x33	; 51
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	df 91       	pop	r29
    2a56:	cf 91       	pop	r28
    2a58:	08 95       	ret

00002a5a <Test>:
#define BACK	1
#define PLAY	2
#define FORWARD 3

void Test()
{
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
	
}
    2a62:	df 91       	pop	r29
    2a64:	cf 91       	pop	r28
    2a66:	08 95       	ret

00002a68 <InitKeyboard>:

void InitKeyboard()
{
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
	DDRD = ~((1<<KEY_PLAY) | (1<<KEY_BACK) | (1<<KEY_FORWARD));// | (1<<PD2));
    2a70:	8a e2       	ldi	r24, 0x2A	; 42
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	28 ef       	ldi	r18, 0xF8	; 248
    2a76:	fc 01       	movw	r30, r24
    2a78:	20 83       	st	Z, r18
	// the CS for the card is also in PORTD but this PIN is initialized in spi.c->init_spi
	// therefore it is important that InitKeyboard is called before init_spi
}
    2a7a:	df 91       	pop	r29
    2a7c:	cf 91       	pop	r28
    2a7e:	08 95       	ret

00002a80 <KeyPressed>:

int KeyPressed()
{
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	61 97       	sbiw	r28, 0x11	; 17
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
	uint8_t portD = 0x00;
    2a94:	19 82       	std	Y+1, r1	; 0x01
	
	portD = PIND;
    2a96:	89 e2       	ldi	r24, 0x29	; 41
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	80 81       	ld	r24, Z
    2a9e:	89 83       	std	Y+1, r24	; 0x01
	portD &= 0xE0;
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	80 7e       	andi	r24, 0xE0	; 224
    2aa4:	89 83       	std	Y+1, r24	; 0x01
char cTemp[16] = {0};
    2aa6:	20 e1       	ldi	r18, 0x10	; 16
    2aa8:	ce 01       	movw	r24, r28
    2aaa:	02 96       	adiw	r24, 0x02	; 2
    2aac:	fc 01       	movw	r30, r24
    2aae:	32 2f       	mov	r19, r18
    2ab0:	11 92       	st	Z+, r1
    2ab2:	3a 95       	dec	r19
    2ab4:	e9 f7       	brne	.-6      	; 0x2ab0 <KeyPressed+0x30>
sprintf(cTemp, "%x", portD);
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	00 d0       	rcall	.+0      	; 0x2abe <KeyPressed+0x3e>
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <KeyPressed+0x40>
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <KeyPressed+0x42>
    2ac2:	8d b7       	in	r24, 0x3d	; 61
    2ac4:	9e b7       	in	r25, 0x3e	; 62
    2ac6:	01 96       	adiw	r24, 0x01	; 1
    2ac8:	ae 01       	movw	r20, r28
    2aca:	4e 5f       	subi	r20, 0xFE	; 254
    2acc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ace:	fc 01       	movw	r30, r24
    2ad0:	51 83       	std	Z+1, r21	; 0x01
    2ad2:	40 83       	st	Z, r20
    2ad4:	40 e0       	ldi	r20, 0x00	; 0
    2ad6:	51 e0       	ldi	r21, 0x01	; 1
    2ad8:	fc 01       	movw	r30, r24
    2ada:	53 83       	std	Z+3, r21	; 0x03
    2adc:	42 83       	std	Z+2, r20	; 0x02
    2ade:	fc 01       	movw	r30, r24
    2ae0:	35 83       	std	Z+5, r19	; 0x05
    2ae2:	24 83       	std	Z+4, r18	; 0x04
    2ae4:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <sprintf>
    2ae8:	8d b7       	in	r24, 0x3d	; 61
    2aea:	9e b7       	in	r25, 0x3e	; 62
    2aec:	06 96       	adiw	r24, 0x06	; 6
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	9e bf       	out	0x3e, r25	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	8d bf       	out	0x3d, r24	; 61

lcd_clrscr();
    2af8:	0e 94 ae 01 	call	0x35c	; 0x35c <lcd_clrscr>
lcd_puts(cTemp);
    2afc:	ce 01       	movw	r24, r28
    2afe:	02 96       	adiw	r24, 0x02	; 2
    2b00:	0e 94 db 01 	call	0x3b6	; 0x3b6 <lcd_puts>
return 1;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	90 e0       	ldi	r25, 0x00	; 0
	lcd_clrscr();
	lcd_puts("---");
}

return 0;
}
    2b08:	61 96       	adiw	r28, 0x11	; 17
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	de bf       	out	0x3e, r29	; 62
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	df 91       	pop	r29
    2b16:	cf 91       	pop	r28
    2b18:	08 95       	ret

00002b1a <DisplayText>:
	
void DisplayText(const char* pText)
{
    2b1a:	1f 93       	push	r17
    2b1c:	cf 93       	push	r28
    2b1e:	df 93       	push	r29
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <DisplayText+0x8>
    2b22:	0f 92       	push	r0
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    2b28:	9b 83       	std	Y+3, r25	; 0x03
    2b2a:	8a 83       	std	Y+2, r24	; 0x02
    lcd_clrscr();
    2b2c:	0e 94 ae 01 	call	0x35c	; 0x35c <lcd_clrscr>

    register char c;

	uint8_t ctr = 0;
    2b30:	19 82       	std	Y+1, r1	; 0x01
    while ( (c = *pText++) ) {
    2b32:	0c c0       	rjmp	.+24     	; 0x2b4c <DisplayText+0x32>
        lcd_putc(c);
    2b34:	81 2f       	mov	r24, r17
    2b36:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_putc>
		ctr++;
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	8f 5f       	subi	r24, 0xFF	; 255
    2b3e:	89 83       	std	Y+1, r24	; 0x01
		if (ctr == 8)
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	88 30       	cpi	r24, 0x08	; 8
    2b44:	19 f4       	brne	.+6      	; 0x2b4c <DisplayText+0x32>
			lcd_putc('\n');
    2b46:	8a e0       	ldi	r24, 0x0A	; 10
    2b48:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_putc>
    lcd_clrscr();

    register char c;

	uint8_t ctr = 0;
    while ( (c = *pText++) ) {
    2b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b50:	fc 01       	movw	r30, r24
    2b52:	10 81       	ld	r17, Z
    2b54:	21 e0       	ldi	r18, 0x01	; 1
    2b56:	11 23       	and	r17, r17
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <DisplayText+0x42>
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b60:	01 96       	adiw	r24, 0x01	; 1
    2b62:	9b 83       	std	Y+3, r25	; 0x03
    2b64:	8a 83       	std	Y+2, r24	; 0x02
    2b66:	22 23       	and	r18, r18
    2b68:	29 f7       	brne	.-54     	; 0x2b34 <DisplayText+0x1a>
        lcd_putc(c);
		ctr++;
		if (ctr == 8)
			lcd_putc('\n');
    }	
}
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	df 91       	pop	r29
    2b72:	cf 91       	pop	r28
    2b74:	1f 91       	pop	r17
    2b76:	08 95       	ret

00002b78 <TestMP3>:

void TestMP3()
{
    2b78:	0f 93       	push	r16
    2b7a:	1f 93       	push	r17
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
    2b84:	6c 97       	sbiw	r28, 0x1c	; 28
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	a0 ea       	ldi	r26, 0xA0	; 160
    2b96:	b0 e4       	ldi	r27, 0x40	; 64
    2b98:	89 83       	std	Y+1, r24	; 0x01
    2b9a:	9a 83       	std	Y+2, r25	; 0x02
    2b9c:	ab 83       	std	Y+3, r26	; 0x03
    2b9e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ba0:	69 81       	ldd	r22, Y+1	; 0x01
    2ba2:	7a 81       	ldd	r23, Y+2	; 0x02
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	4a e7       	ldi	r20, 0x7A	; 122
    2bae:	53 e4       	ldi	r21, 0x43	; 67
    2bb0:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	8d 83       	std	Y+5, r24	; 0x05
    2bba:	9e 83       	std	Y+6, r25	; 0x06
    2bbc:	af 83       	std	Y+7, r26	; 0x07
    2bbe:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2bc0:	11 e0       	ldi	r17, 0x01	; 1
    2bc2:	6d 81       	ldd	r22, Y+5	; 0x05
    2bc4:	7e 81       	ldd	r23, Y+6	; 0x06
    2bc6:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc8:	98 85       	ldd	r25, Y+8	; 0x08
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e8       	ldi	r20, 0x80	; 128
    2bd0:	5f e3       	ldi	r21, 0x3F	; 63
    2bd2:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    2bd6:	88 23       	and	r24, r24
    2bd8:	0c f0       	brlt	.+2      	; 0x2bdc <TestMP3+0x64>
    2bda:	10 e0       	ldi	r17, 0x00	; 0
    2bdc:	11 23       	and	r17, r17
    2bde:	29 f0       	breq	.+10     	; 0x2bea <TestMP3+0x72>
		__ticks = 1;
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	9a 87       	std	Y+10, r25	; 0x0a
    2be6:	89 87       	std	Y+9, r24	; 0x09
    2be8:	46 c0       	rjmp	.+140    	; 0x2c76 <TestMP3+0xfe>
	else if (__tmp > 65535)
    2bea:	11 e0       	ldi	r17, 0x01	; 1
    2bec:	6d 81       	ldd	r22, Y+5	; 0x05
    2bee:	7e 81       	ldd	r23, Y+6	; 0x06
    2bf0:	8f 81       	ldd	r24, Y+7	; 0x07
    2bf2:	98 85       	ldd	r25, Y+8	; 0x08
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	3f ef       	ldi	r19, 0xFF	; 255
    2bf8:	4f e7       	ldi	r20, 0x7F	; 127
    2bfa:	57 e4       	ldi	r21, 0x47	; 71
    2bfc:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    2c00:	18 16       	cp	r1, r24
    2c02:	0c f0       	brlt	.+2      	; 0x2c06 <TestMP3+0x8e>
    2c04:	10 e0       	ldi	r17, 0x00	; 0
    2c06:	11 23       	and	r17, r17
    2c08:	61 f1       	breq	.+88     	; 0x2c62 <TestMP3+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0a:	69 81       	ldd	r22, Y+1	; 0x01
    2c0c:	7a 81       	ldd	r23, Y+2	; 0x02
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c10:	9c 81       	ldd	r25, Y+4	; 0x04
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e2       	ldi	r20, 0x20	; 32
    2c18:	51 e4       	ldi	r21, 0x41	; 65
    2c1a:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	bc 01       	movw	r22, r24
    2c24:	cd 01       	movw	r24, r26
    2c26:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	9a 87       	std	Y+10, r25	; 0x0a
    2c30:	89 87       	std	Y+9, r24	; 0x09
    2c32:	12 c0       	rjmp	.+36     	; 0x2c58 <TestMP3+0xe0>
    2c34:	89 e1       	ldi	r24, 0x19	; 25
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	9c 87       	std	Y+12, r25	; 0x0c
    2c3a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c40:	8c 01       	movw	r16, r24
    2c42:	c8 01       	movw	r24, r16
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <TestMP3+0xcc>
    2c48:	8c 01       	movw	r16, r24
    2c4a:	1c 87       	std	Y+12, r17	; 0x0c
    2c4c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4e:	89 85       	ldd	r24, Y+9	; 0x09
    2c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	9a 87       	std	Y+10, r25	; 0x0a
    2c56:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c58:	89 85       	ldd	r24, Y+9	; 0x09
    2c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5c:	00 97       	sbiw	r24, 0x00	; 0
    2c5e:	51 f7       	brne	.-44     	; 0x2c34 <TestMP3+0xbc>
    2c60:	17 c0       	rjmp	.+46     	; 0x2c90 <TestMP3+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c62:	6d 81       	ldd	r22, Y+5	; 0x05
    2c64:	7e 81       	ldd	r23, Y+6	; 0x06
    2c66:	8f 81       	ldd	r24, Y+7	; 0x07
    2c68:	98 85       	ldd	r25, Y+8	; 0x08
    2c6a:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	9a 87       	std	Y+10, r25	; 0x0a
    2c74:	89 87       	std	Y+9, r24	; 0x09
    2c76:	89 85       	ldd	r24, Y+9	; 0x09
    2c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7a:	9e 87       	std	Y+14, r25	; 0x0e
    2c7c:	8d 87       	std	Y+13, r24	; 0x0d
    2c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c82:	8c 01       	movw	r16, r24
    2c84:	f8 01       	movw	r30, r16
    2c86:	31 97       	sbiw	r30, 0x01	; 1
    2c88:	f1 f7       	brne	.-4      	; 0x2c86 <TestMP3+0x10e>
    2c8a:	8f 01       	movw	r16, r30
    2c8c:	1e 87       	std	Y+14, r17	; 0x0e
    2c8e:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(5);

	StartSineTest();
    2c90:	0e 94 bc 23 	call	0x4778	; 0x4778 <StartSineTest>
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	aa ef       	ldi	r26, 0xFA	; 250
    2c9a:	b3 e4       	ldi	r27, 0x43	; 67
    2c9c:	8f 87       	std	Y+15, r24	; 0x0f
    2c9e:	98 8b       	std	Y+16, r25	; 0x10
    2ca0:	a9 8b       	std	Y+17, r26	; 0x11
    2ca2:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ca4:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ca6:	78 89       	ldd	r23, Y+16	; 0x10
    2ca8:	89 89       	ldd	r24, Y+17	; 0x11
    2caa:	9a 89       	ldd	r25, Y+18	; 0x12
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	4a e7       	ldi	r20, 0x7A	; 122
    2cb2:	53 e4       	ldi	r21, 0x43	; 67
    2cb4:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	8b 8b       	std	Y+19, r24	; 0x13
    2cbe:	9c 8b       	std	Y+20, r25	; 0x14
    2cc0:	ad 8b       	std	Y+21, r26	; 0x15
    2cc2:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2cc4:	11 e0       	ldi	r17, 0x01	; 1
    2cc6:	6b 89       	ldd	r22, Y+19	; 0x13
    2cc8:	7c 89       	ldd	r23, Y+20	; 0x14
    2cca:	8d 89       	ldd	r24, Y+21	; 0x15
    2ccc:	9e 89       	ldd	r25, Y+22	; 0x16
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	40 e8       	ldi	r20, 0x80	; 128
    2cd4:	5f e3       	ldi	r21, 0x3F	; 63
    2cd6:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    2cda:	88 23       	and	r24, r24
    2cdc:	0c f0       	brlt	.+2      	; 0x2ce0 <TestMP3+0x168>
    2cde:	10 e0       	ldi	r17, 0x00	; 0
    2ce0:	11 23       	and	r17, r17
    2ce2:	29 f0       	breq	.+10     	; 0x2cee <TestMP3+0x176>
		__ticks = 1;
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	98 8f       	std	Y+24, r25	; 0x18
    2cea:	8f 8b       	std	Y+23, r24	; 0x17
    2cec:	46 c0       	rjmp	.+140    	; 0x2d7a <TestMP3+0x202>
	else if (__tmp > 65535)
    2cee:	11 e0       	ldi	r17, 0x01	; 1
    2cf0:	6b 89       	ldd	r22, Y+19	; 0x13
    2cf2:	7c 89       	ldd	r23, Y+20	; 0x14
    2cf4:	8d 89       	ldd	r24, Y+21	; 0x15
    2cf6:	9e 89       	ldd	r25, Y+22	; 0x16
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	3f ef       	ldi	r19, 0xFF	; 255
    2cfc:	4f e7       	ldi	r20, 0x7F	; 127
    2cfe:	57 e4       	ldi	r21, 0x47	; 71
    2d00:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    2d04:	18 16       	cp	r1, r24
    2d06:	0c f0       	brlt	.+2      	; 0x2d0a <TestMP3+0x192>
    2d08:	10 e0       	ldi	r17, 0x00	; 0
    2d0a:	11 23       	and	r17, r17
    2d0c:	61 f1       	breq	.+88     	; 0x2d66 <TestMP3+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d0e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d10:	78 89       	ldd	r23, Y+16	; 0x10
    2d12:	89 89       	ldd	r24, Y+17	; 0x11
    2d14:	9a 89       	ldd	r25, Y+18	; 0x12
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e2       	ldi	r20, 0x20	; 32
    2d1c:	51 e4       	ldi	r21, 0x41	; 65
    2d1e:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	bc 01       	movw	r22, r24
    2d28:	cd 01       	movw	r24, r26
    2d2a:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	98 8f       	std	Y+24, r25	; 0x18
    2d34:	8f 8b       	std	Y+23, r24	; 0x17
    2d36:	12 c0       	rjmp	.+36     	; 0x2d5c <TestMP3+0x1e4>
    2d38:	89 e1       	ldi	r24, 0x19	; 25
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	9a 8f       	std	Y+26, r25	; 0x1a
    2d3e:	89 8f       	std	Y+25, r24	; 0x19
    2d40:	89 8d       	ldd	r24, Y+25	; 0x19
    2d42:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d44:	8c 01       	movw	r16, r24
    2d46:	c8 01       	movw	r24, r16
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	f1 f7       	brne	.-4      	; 0x2d48 <TestMP3+0x1d0>
    2d4c:	8c 01       	movw	r16, r24
    2d4e:	1a 8f       	std	Y+26, r17	; 0x1a
    2d50:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d52:	8f 89       	ldd	r24, Y+23	; 0x17
    2d54:	98 8d       	ldd	r25, Y+24	; 0x18
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	98 8f       	std	Y+24, r25	; 0x18
    2d5a:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	51 f7       	brne	.-44     	; 0x2d38 <TestMP3+0x1c0>
    2d64:	17 c0       	rjmp	.+46     	; 0x2d94 <TestMP3+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d66:	6b 89       	ldd	r22, Y+19	; 0x13
    2d68:	7c 89       	ldd	r23, Y+20	; 0x14
    2d6a:	8d 89       	ldd	r24, Y+21	; 0x15
    2d6c:	9e 89       	ldd	r25, Y+22	; 0x16
    2d6e:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	98 8f       	std	Y+24, r25	; 0x18
    2d78:	8f 8b       	std	Y+23, r24	; 0x17
    2d7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d7e:	9c 8f       	std	Y+28, r25	; 0x1c
    2d80:	8b 8f       	std	Y+27, r24	; 0x1b
    2d82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d86:	8c 01       	movw	r16, r24
    2d88:	f8 01       	movw	r30, r16
    2d8a:	31 97       	sbiw	r30, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <TestMP3+0x212>
    2d8e:	8f 01       	movw	r16, r30
    2d90:	1c 8f       	std	Y+28, r17	; 0x1c
    2d92:	0b 8f       	std	Y+27, r16	; 0x1b

	_delay_ms(500);
	loop_until_bit_is_set(PIND, PD0);
    2d94:	89 e2       	ldi	r24, 0x29	; 41
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	fc 01       	movw	r30, r24
    2d9a:	80 81       	ld	r24, Z
    2d9c:	88 2f       	mov	r24, r24
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	81 70       	andi	r24, 0x01	; 1
    2da2:	90 70       	andi	r25, 0x00	; 0
    2da4:	00 97       	sbiw	r24, 0x00	; 0
    2da6:	b1 f3       	breq	.-20     	; 0x2d94 <TestMP3+0x21c>
	
	StopSineTest();
    2da8:	0e 94 db 23 	call	0x47b6	; 0x47b6 <StopSineTest>
	
	while(1)
	{
	}
    2dac:	ff cf       	rjmp	.-2      	; 0x2dac <TestMP3+0x234>

00002dae <InitDebugPin>:
	//DisplayText(cTemp);
	//_delay_ms(100);
}

void InitDebugPin()
{
    2dae:	cf 93       	push	r28
    2db0:	df 93       	push	r29
    2db2:	cd b7       	in	r28, 0x3d	; 61
    2db4:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<PB0);	
    2db6:	84 e2       	ldi	r24, 0x24	; 36
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	24 e2       	ldi	r18, 0x24	; 36
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	f9 01       	movw	r30, r18
    2dc0:	20 81       	ld	r18, Z
    2dc2:	21 60       	ori	r18, 0x01	; 1
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	20 83       	st	Z, r18
}
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	08 95       	ret

00002dce <ToggleDebugPin>:

void ToggleDebugPin()
{
    2dce:	cf 93       	push	r28
    2dd0:	df 93       	push	r29
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
//	sbi(PORTB, 0);
//	cbi(PORTB, 0);
	PORTB |= 0x01;
    2dd6:	85 e2       	ldi	r24, 0x25	; 37
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	25 e2       	ldi	r18, 0x25	; 37
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	f9 01       	movw	r30, r18
    2de0:	20 81       	ld	r18, Z
    2de2:	21 60       	ori	r18, 0x01	; 1
    2de4:	fc 01       	movw	r30, r24
    2de6:	20 83       	st	Z, r18
	PORTB &= 0xFE;	
    2de8:	85 e2       	ldi	r24, 0x25	; 37
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	25 e2       	ldi	r18, 0x25	; 37
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	f9 01       	movw	r30, r18
    2df2:	20 81       	ld	r18, Z
    2df4:	2e 7f       	andi	r18, 0xFE	; 254
    2df6:	fc 01       	movw	r30, r24
    2df8:	20 83       	st	Z, r18
}
    2dfa:	df 91       	pop	r29
    2dfc:	cf 91       	pop	r28
    2dfe:	08 95       	ret

00002e00 <TestX>:

void TestX()
{
    2e00:	0f 93       	push	r16
    2e02:	1f 93       	push	r17
    2e04:	cf 93       	push	r28
    2e06:	df 93       	push	r29
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	6c 97       	sbiw	r28, 0x1c	; 28
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF;
    2e18:	87 e2       	ldi	r24, 0x27	; 39
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	2f ef       	ldi	r18, 0xFF	; 255
    2e1e:	fc 01       	movw	r30, r24
    2e20:	20 83       	st	Z, r18
//	PORTB = 0x05;
	while(1)
	{
		PORTC = 0x07;
    2e22:	88 e2       	ldi	r24, 0x28	; 40
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	27 e0       	ldi	r18, 0x07	; 7
    2e28:	fc 01       	movw	r30, r24
    2e2a:	20 83       	st	Z, r18
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	a0 e8       	ldi	r26, 0x80	; 128
    2e32:	bf e3       	ldi	r27, 0x3F	; 63
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	ab 83       	std	Y+3, r26	; 0x03
    2e3a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2e3c:	69 81       	ldd	r22, Y+1	; 0x01
    2e3e:	7a 81       	ldd	r23, Y+2	; 0x02
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	9c 81       	ldd	r25, Y+4	; 0x04
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	4a e7       	ldi	r20, 0x7A	; 122
    2e4a:	53 e4       	ldi	r21, 0x43	; 67
    2e4c:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	8d 83       	std	Y+5, r24	; 0x05
    2e56:	9e 83       	std	Y+6, r25	; 0x06
    2e58:	af 83       	std	Y+7, r26	; 0x07
    2e5a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2e5c:	11 e0       	ldi	r17, 0x01	; 1
    2e5e:	6d 81       	ldd	r22, Y+5	; 0x05
    2e60:	7e 81       	ldd	r23, Y+6	; 0x06
    2e62:	8f 81       	ldd	r24, Y+7	; 0x07
    2e64:	98 85       	ldd	r25, Y+8	; 0x08
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e8       	ldi	r20, 0x80	; 128
    2e6c:	5f e3       	ldi	r21, 0x3F	; 63
    2e6e:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    2e72:	88 23       	and	r24, r24
    2e74:	0c f0       	brlt	.+2      	; 0x2e78 <TestX+0x78>
    2e76:	10 e0       	ldi	r17, 0x00	; 0
    2e78:	11 23       	and	r17, r17
    2e7a:	29 f0       	breq	.+10     	; 0x2e86 <TestX+0x86>
		__ticks = 1;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	9a 87       	std	Y+10, r25	; 0x0a
    2e82:	89 87       	std	Y+9, r24	; 0x09
    2e84:	46 c0       	rjmp	.+140    	; 0x2f12 <TestX+0x112>
	else if (__tmp > 65535)
    2e86:	11 e0       	ldi	r17, 0x01	; 1
    2e88:	6d 81       	ldd	r22, Y+5	; 0x05
    2e8a:	7e 81       	ldd	r23, Y+6	; 0x06
    2e8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e8e:	98 85       	ldd	r25, Y+8	; 0x08
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	3f ef       	ldi	r19, 0xFF	; 255
    2e94:	4f e7       	ldi	r20, 0x7F	; 127
    2e96:	57 e4       	ldi	r21, 0x47	; 71
    2e98:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    2e9c:	18 16       	cp	r1, r24
    2e9e:	0c f0       	brlt	.+2      	; 0x2ea2 <TestX+0xa2>
    2ea0:	10 e0       	ldi	r17, 0x00	; 0
    2ea2:	11 23       	and	r17, r17
    2ea4:	61 f1       	breq	.+88     	; 0x2efe <TestX+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea6:	69 81       	ldd	r22, Y+1	; 0x01
    2ea8:	7a 81       	ldd	r23, Y+2	; 0x02
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	9c 81       	ldd	r25, Y+4	; 0x04
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e2       	ldi	r20, 0x20	; 32
    2eb4:	51 e4       	ldi	r21, 0x41	; 65
    2eb6:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	bc 01       	movw	r22, r24
    2ec0:	cd 01       	movw	r24, r26
    2ec2:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	9a 87       	std	Y+10, r25	; 0x0a
    2ecc:	89 87       	std	Y+9, r24	; 0x09
    2ece:	12 c0       	rjmp	.+36     	; 0x2ef4 <TestX+0xf4>
    2ed0:	89 e1       	ldi	r24, 0x19	; 25
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	9c 87       	std	Y+12, r25	; 0x0c
    2ed6:	8b 87       	std	Y+11, r24	; 0x0b
    2ed8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2eda:	9c 85       	ldd	r25, Y+12	; 0x0c
    2edc:	8c 01       	movw	r16, r24
    2ede:	c8 01       	movw	r24, r16
    2ee0:	01 97       	sbiw	r24, 0x01	; 1
    2ee2:	f1 f7       	brne	.-4      	; 0x2ee0 <TestX+0xe0>
    2ee4:	8c 01       	movw	r16, r24
    2ee6:	1c 87       	std	Y+12, r17	; 0x0c
    2ee8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eea:	89 85       	ldd	r24, Y+9	; 0x09
    2eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	9a 87       	std	Y+10, r25	; 0x0a
    2ef2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef4:	89 85       	ldd	r24, Y+9	; 0x09
    2ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	51 f7       	brne	.-44     	; 0x2ed0 <TestX+0xd0>
    2efc:	17 c0       	rjmp	.+46     	; 0x2f2c <TestX+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2efe:	6d 81       	ldd	r22, Y+5	; 0x05
    2f00:	7e 81       	ldd	r23, Y+6	; 0x06
    2f02:	8f 81       	ldd	r24, Y+7	; 0x07
    2f04:	98 85       	ldd	r25, Y+8	; 0x08
    2f06:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	9a 87       	std	Y+10, r25	; 0x0a
    2f10:	89 87       	std	Y+9, r24	; 0x09
    2f12:	89 85       	ldd	r24, Y+9	; 0x09
    2f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f16:	9e 87       	std	Y+14, r25	; 0x0e
    2f18:	8d 87       	std	Y+13, r24	; 0x0d
    2f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f1e:	8c 01       	movw	r16, r24
    2f20:	f8 01       	movw	r30, r16
    2f22:	31 97       	sbiw	r30, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <TestX+0x122>
    2f26:	8f 01       	movw	r16, r30
    2f28:	1e 87       	std	Y+14, r17	; 0x0e
    2f2a:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(1);
		PORTC = 0x00;
    2f2c:	88 e2       	ldi	r24, 0x28	; 40
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	fc 01       	movw	r30, r24
    2f32:	10 82       	st	Z, r1
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	a0 e8       	ldi	r26, 0x80	; 128
    2f3a:	bf e3       	ldi	r27, 0x3F	; 63
    2f3c:	8f 87       	std	Y+15, r24	; 0x0f
    2f3e:	98 8b       	std	Y+16, r25	; 0x10
    2f40:	a9 8b       	std	Y+17, r26	; 0x11
    2f42:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f44:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f46:	78 89       	ldd	r23, Y+16	; 0x10
    2f48:	89 89       	ldd	r24, Y+17	; 0x11
    2f4a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	4a e7       	ldi	r20, 0x7A	; 122
    2f52:	53 e4       	ldi	r21, 0x43	; 67
    2f54:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	8b 8b       	std	Y+19, r24	; 0x13
    2f5e:	9c 8b       	std	Y+20, r25	; 0x14
    2f60:	ad 8b       	std	Y+21, r26	; 0x15
    2f62:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    2f64:	11 e0       	ldi	r17, 0x01	; 1
    2f66:	6b 89       	ldd	r22, Y+19	; 0x13
    2f68:	7c 89       	ldd	r23, Y+20	; 0x14
    2f6a:	8d 89       	ldd	r24, Y+21	; 0x15
    2f6c:	9e 89       	ldd	r25, Y+22	; 0x16
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e8       	ldi	r20, 0x80	; 128
    2f74:	5f e3       	ldi	r21, 0x3F	; 63
    2f76:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    2f7a:	88 23       	and	r24, r24
    2f7c:	0c f0       	brlt	.+2      	; 0x2f80 <TestX+0x180>
    2f7e:	10 e0       	ldi	r17, 0x00	; 0
    2f80:	11 23       	and	r17, r17
    2f82:	29 f0       	breq	.+10     	; 0x2f8e <TestX+0x18e>
		__ticks = 1;
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	98 8f       	std	Y+24, r25	; 0x18
    2f8a:	8f 8b       	std	Y+23, r24	; 0x17
    2f8c:	46 c0       	rjmp	.+140    	; 0x301a <TestX+0x21a>
	else if (__tmp > 65535)
    2f8e:	11 e0       	ldi	r17, 0x01	; 1
    2f90:	6b 89       	ldd	r22, Y+19	; 0x13
    2f92:	7c 89       	ldd	r23, Y+20	; 0x14
    2f94:	8d 89       	ldd	r24, Y+21	; 0x15
    2f96:	9e 89       	ldd	r25, Y+22	; 0x16
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	3f ef       	ldi	r19, 0xFF	; 255
    2f9c:	4f e7       	ldi	r20, 0x7F	; 127
    2f9e:	57 e4       	ldi	r21, 0x47	; 71
    2fa0:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    2fa4:	18 16       	cp	r1, r24
    2fa6:	0c f0       	brlt	.+2      	; 0x2faa <TestX+0x1aa>
    2fa8:	10 e0       	ldi	r17, 0x00	; 0
    2faa:	11 23       	and	r17, r17
    2fac:	61 f1       	breq	.+88     	; 0x3006 <TestX+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fae:	6f 85       	ldd	r22, Y+15	; 0x0f
    2fb0:	78 89       	ldd	r23, Y+16	; 0x10
    2fb2:	89 89       	ldd	r24, Y+17	; 0x11
    2fb4:	9a 89       	ldd	r25, Y+18	; 0x12
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e2       	ldi	r20, 0x20	; 32
    2fbc:	51 e4       	ldi	r21, 0x41	; 65
    2fbe:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	98 8f       	std	Y+24, r25	; 0x18
    2fd4:	8f 8b       	std	Y+23, r24	; 0x17
    2fd6:	12 c0       	rjmp	.+36     	; 0x2ffc <TestX+0x1fc>
    2fd8:	89 e1       	ldi	r24, 0x19	; 25
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	9a 8f       	std	Y+26, r25	; 0x1a
    2fde:	89 8f       	std	Y+25, r24	; 0x19
    2fe0:	89 8d       	ldd	r24, Y+25	; 0x19
    2fe2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fe4:	8c 01       	movw	r16, r24
    2fe6:	c8 01       	movw	r24, r16
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <TestX+0x1e8>
    2fec:	8c 01       	movw	r16, r24
    2fee:	1a 8f       	std	Y+26, r17	; 0x1a
    2ff0:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	98 8f       	std	Y+24, r25	; 0x18
    2ffa:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    3000:	00 97       	sbiw	r24, 0x00	; 0
    3002:	51 f7       	brne	.-44     	; 0x2fd8 <TestX+0x1d8>
    3004:	18 c0       	rjmp	.+48     	; 0x3036 <TestX+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3006:	6b 89       	ldd	r22, Y+19	; 0x13
    3008:	7c 89       	ldd	r23, Y+20	; 0x14
    300a:	8d 89       	ldd	r24, Y+21	; 0x15
    300c:	9e 89       	ldd	r25, Y+22	; 0x16
    300e:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	98 8f       	std	Y+24, r25	; 0x18
    3018:	8f 8b       	std	Y+23, r24	; 0x17
    301a:	8f 89       	ldd	r24, Y+23	; 0x17
    301c:	98 8d       	ldd	r25, Y+24	; 0x18
    301e:	9c 8f       	std	Y+28, r25	; 0x1c
    3020:	8b 8f       	std	Y+27, r24	; 0x1b
    3022:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3024:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3026:	8c 01       	movw	r16, r24
    3028:	f8 01       	movw	r30, r16
    302a:	31 97       	sbiw	r30, 0x01	; 1
    302c:	f1 f7       	brne	.-4      	; 0x302a <TestX+0x22a>
    302e:	8f 01       	movw	r16, r30
    3030:	1c 8f       	std	Y+28, r17	; 0x1c
    3032:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(1);
	}	
    3034:	f6 ce       	rjmp	.-532    	; 0x2e22 <TestX+0x22>
    3036:	f5 ce       	rjmp	.-534    	; 0x2e22 <TestX+0x22>

00003038 <GetKey>:
}

uint8_t GetKey()
{
    3038:	cf 93       	push	r28
    303a:	df 93       	push	r29
    303c:	0f 92       	push	r0
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
	uint8_t portD = PIND;
    3042:	89 e2       	ldi	r24, 0x29	; 41
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	fc 01       	movw	r30, r24
    3048:	80 81       	ld	r24, Z
    304a:	89 83       	std	Y+1, r24	; 0x01
	if (portD & 0x01)
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	88 2f       	mov	r24, r24
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	81 70       	andi	r24, 0x01	; 1
    3054:	90 70       	andi	r25, 0x00	; 0
    3056:	88 23       	and	r24, r24
    3058:	11 f0       	breq	.+4      	; 0x305e <GetKey+0x26>
		return 1;
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	13 c0       	rjmp	.+38     	; 0x3084 <GetKey+0x4c>
		
	if (portD & 0x02)
    305e:	89 81       	ldd	r24, Y+1	; 0x01
    3060:	88 2f       	mov	r24, r24
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	82 70       	andi	r24, 0x02	; 2
    3066:	90 70       	andi	r25, 0x00	; 0
    3068:	00 97       	sbiw	r24, 0x00	; 0
    306a:	11 f0       	breq	.+4      	; 0x3070 <GetKey+0x38>
		return 2;
    306c:	82 e0       	ldi	r24, 0x02	; 2
    306e:	0a c0       	rjmp	.+20     	; 0x3084 <GetKey+0x4c>

	if (portD & 0x04)
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	88 2f       	mov	r24, r24
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	84 70       	andi	r24, 0x04	; 4
    3078:	90 70       	andi	r25, 0x00	; 0
    307a:	00 97       	sbiw	r24, 0x00	; 0
    307c:	11 f0       	breq	.+4      	; 0x3082 <GetKey+0x4a>
		return 3;
    307e:	83 e0       	ldi	r24, 0x03	; 3
    3080:	01 c0       	rjmp	.+2      	; 0x3084 <GetKey+0x4c>
		
	return 0;	
    3082:	80 e0       	ldi	r24, 0x00	; 0
}
    3084:	0f 90       	pop	r0
    3086:	df 91       	pop	r29
    3088:	cf 91       	pop	r28
    308a:	08 95       	ret

0000308c <PlayFile>:

void PlayFile()
{
    308c:	cf 92       	push	r12
    308e:	df 92       	push	r13
    3090:	ef 92       	push	r14
    3092:	ff 92       	push	r15
    3094:	0f 93       	push	r16
    3096:	1f 93       	push	r17
    3098:	cf 93       	push	r28
    309a:	df 93       	push	r29
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
    30a0:	ab 97       	sbiw	r28, 0x2b	; 43
    30a2:	0f b6       	in	r0, 0x3f	; 63
    30a4:	f8 94       	cli
    30a6:	de bf       	out	0x3e, r29	; 62
    30a8:	0f be       	out	0x3f, r0	; 63
    30aa:	cd bf       	out	0x3d, r28	; 61
				_delay_ms(100);
				break;
			}
		}
	}	
}
    30ac:	ed b6       	in	r14, 0x3d	; 61
    30ae:	fe b6       	in	r15, 0x3e	; 62
		
	return 0;	
}

void PlayFile()
{
    30b0:	8d b7       	in	r24, 0x3d	; 61
    30b2:	9e b7       	in	r25, 0x3e	; 62
    30b4:	6c 01       	movw	r12, r24
	BYTE res = 0;
    30b6:	1f 82       	std	Y+7, r1	; 0x07
	const uint16_t sizeBlock = 512;
    30b8:	80 e0       	ldi	r24, 0x00	; 0
    30ba:	92 e0       	ldi	r25, 0x02	; 2
    30bc:	99 87       	std	Y+9, r25	; 0x09
    30be:	88 87       	std	Y+8, r24	; 0x08
	BYTE buff[sizeBlock];
    30c0:	88 85       	ldd	r24, Y+8	; 0x08
    30c2:	99 85       	ldd	r25, Y+9	; 0x09
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	9b 87       	std	Y+11, r25	; 0x0b
    30c8:	8a 87       	std	Y+10, r24	; 0x0a
    30ca:	88 85       	ldd	r24, Y+8	; 0x08
    30cc:	99 85       	ldd	r25, Y+9	; 0x09
    30ce:	2d b7       	in	r18, 0x3d	; 61
    30d0:	3e b7       	in	r19, 0x3e	; 62
    30d2:	28 1b       	sub	r18, r24
    30d4:	39 0b       	sbc	r19, r25
    30d6:	0f b6       	in	r0, 0x3f	; 63
    30d8:	f8 94       	cli
    30da:	3e bf       	out	0x3e, r19	; 62
    30dc:	0f be       	out	0x3f, r0	; 63
    30de:	2d bf       	out	0x3d, r18	; 61
    30e0:	8d b7       	in	r24, 0x3d	; 61
    30e2:	9e b7       	in	r25, 0x3e	; 62
    30e4:	01 96       	adiw	r24, 0x01	; 1
    30e6:	00 96       	adiw	r24, 0x00	; 0
    30e8:	9d 87       	std	Y+13, r25	; 0x0d
    30ea:	8c 87       	std	Y+12, r24	; 0x0c
	WORD br=0;
    30ec:	1b a6       	lds	r17, 0xbb
    30ee:	1a a6       	lds	r17, 0xba
    30f0:	01 c0       	rjmp	.+2      	; 0x30f4 <PlayFile+0x68>
			{
				_delay_ms(100);
				break;
			}
		}
	}	
    30f2:	00 00       	nop
	BYTE buff[sizeBlock];
	WORD br=0;

	while(1)
	{
		res = pf_read(buff, sizeBlock, &br);    // Read data to the buff[]
    30f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    30f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    30f8:	48 85       	ldd	r20, Y+8	; 0x08
    30fa:	59 85       	ldd	r21, Y+9	; 0x09
    30fc:	9e 01       	movw	r18, r28
    30fe:	26 5d       	subi	r18, 0xD6	; 214
    3100:	3f 4f       	sbci	r19, 0xFF	; 255
    3102:	ba 01       	movw	r22, r20
    3104:	a9 01       	movw	r20, r18
    3106:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <pf_read>
    310a:	8f 83       	std	Y+7, r24	; 0x07
		if (res != 0)
    310c:	8f 81       	ldd	r24, Y+7	; 0x07
    310e:	88 23       	and	r24, r24
    3110:	09 f0       	breq	.+2      	; 0x3114 <PlayFile+0x88>
    3112:	6b c1       	rjmp	.+726    	; 0x33ea <PlayFile+0x35e>
			break;
		}
		else
		{
							
			if (br == 0)
    3114:	8a a5       	lds	r24, 0x6a
    3116:	9b a5       	lds	r25, 0x6b
    3118:	00 97       	sbiw	r24, 0x00	; 0
    311a:	09 f4       	brne	.+2      	; 0x311e <PlayFile+0x92>
    311c:	68 c1       	rjmp	.+720    	; 0x33ee <PlayFile+0x362>
			{
				break;
			}
							
			uint16_t bytesWritten = 0;
    311e:	1a 82       	std	Y+2, r1	; 0x02
    3120:	19 82       	std	Y+1, r1	; 0x01
			do
			{
				uint16_t bytes2Write = 0;
    3122:	1c 82       	std	Y+4, r1	; 0x04
    3124:	1b 82       	std	Y+3, r1	; 0x03
				if ((br - bytesWritten) > 32)
    3126:	2a a5       	lds	r18, 0x6a
    3128:	3b a5       	lds	r19, 0x6b
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	9a 81       	ldd	r25, Y+2	; 0x02
    312e:	a9 01       	movw	r20, r18
    3130:	48 1b       	sub	r20, r24
    3132:	59 0b       	sbc	r21, r25
    3134:	ca 01       	movw	r24, r20
    3136:	81 32       	cpi	r24, 0x21	; 33
    3138:	91 05       	cpc	r25, r1
    313a:	28 f0       	brcs	.+10     	; 0x3146 <PlayFile+0xba>
				bytes2Write = 32;
    313c:	80 e2       	ldi	r24, 0x20	; 32
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	9c 83       	std	Y+4, r25	; 0x04
    3142:	8b 83       	std	Y+3, r24	; 0x03
    3144:	0a c0       	rjmp	.+20     	; 0x315a <PlayFile+0xce>
				else
				bytes2Write = br - bytesWritten;
    3146:	2a a5       	lds	r18, 0x6a
    3148:	3b a5       	lds	r19, 0x6b
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	9a 81       	ldd	r25, Y+2	; 0x02
    314e:	f9 01       	movw	r30, r18
    3150:	e8 1b       	sub	r30, r24
    3152:	f9 0b       	sbc	r31, r25
    3154:	cf 01       	movw	r24, r30
    3156:	9c 83       	std	Y+4, r25	; 0x04
    3158:	8b 83       	std	Y+3, r24	; 0x03
								
				for(int i=0; i<32; i++)
    315a:	1e 82       	std	Y+6, r1	; 0x06
    315c:	1d 82       	std	Y+5, r1	; 0x05
    315e:	13 c0       	rjmp	.+38     	; 0x3186 <PlayFile+0xfa>
				{
					WriteMP3DataByte(buff[bytesWritten+i]);
    3160:	2d 81       	ldd	r18, Y+5	; 0x05
    3162:	3e 81       	ldd	r19, Y+6	; 0x06
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	9a 81       	ldd	r25, Y+2	; 0x02
    3168:	82 0f       	add	r24, r18
    316a:	93 1f       	adc	r25, r19
    316c:	2c 85       	ldd	r18, Y+12	; 0x0c
    316e:	3d 85       	ldd	r19, Y+13	; 0x0d
    3170:	82 0f       	add	r24, r18
    3172:	93 1f       	adc	r25, r19
    3174:	fc 01       	movw	r30, r24
    3176:	80 81       	ld	r24, Z
    3178:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
				if ((br - bytesWritten) > 32)
				bytes2Write = 32;
				else
				bytes2Write = br - bytesWritten;
								
				for(int i=0; i<32; i++)
    317c:	8d 81       	ldd	r24, Y+5	; 0x05
    317e:	9e 81       	ldd	r25, Y+6	; 0x06
    3180:	01 96       	adiw	r24, 0x01	; 1
    3182:	9e 83       	std	Y+6, r25	; 0x06
    3184:	8d 83       	std	Y+5, r24	; 0x05
    3186:	8d 81       	ldd	r24, Y+5	; 0x05
    3188:	9e 81       	ldd	r25, Y+6	; 0x06
    318a:	80 32       	cpi	r24, 0x20	; 32
    318c:	91 05       	cpc	r25, r1
    318e:	44 f3       	brlt	.-48     	; 0x3160 <PlayFile+0xd4>
				{
					WriteMP3DataByte(buff[bytesWritten+i]);
				}
								
				bytesWritten += bytes2Write;
    3190:	29 81       	ldd	r18, Y+1	; 0x01
    3192:	3a 81       	ldd	r19, Y+2	; 0x02
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	9c 81       	ldd	r25, Y+4	; 0x04
    3198:	82 0f       	add	r24, r18
    319a:	93 1f       	adc	r25, r19
    319c:	9a 83       	std	Y+2, r25	; 0x02
    319e:	89 83       	std	Y+1, r24	; 0x01
								
				loop_until_bit_is_set(PINB, PB1);
    31a0:	83 e2       	ldi	r24, 0x23	; 35
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	fc 01       	movw	r30, r24
    31a6:	80 81       	ld	r24, Z
    31a8:	88 2f       	mov	r24, r24
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	82 70       	andi	r24, 0x02	; 2
    31ae:	90 70       	andi	r25, 0x00	; 0
    31b0:	00 97       	sbiw	r24, 0x00	; 0
    31b2:	b1 f3       	breq	.-20     	; 0x31a0 <PlayFile+0x114>
				//do
				//{	// wait until we can send 32 more bytes
				//portB = PINB;
				//portB &= 0x02;
				//} while (portB == 0);
			} while (bytesWritten < br);
    31b4:	8a a5       	lds	r24, 0x6a
    31b6:	9b a5       	lds	r25, 0x6b
    31b8:	29 81       	ldd	r18, Y+1	; 0x01
    31ba:	3a 81       	ldd	r19, Y+2	; 0x02
    31bc:	28 17       	cp	r18, r24
    31be:	39 07       	cpc	r19, r25
    31c0:	08 f4       	brcc	.+2      	; 0x31c4 <PlayFile+0x138>
    31c2:	af cf       	rjmp	.-162    	; 0x3122 <PlayFile+0x96>
						
			if (GetKey() == PLAY)
    31c4:	0e 94 1c 18 	call	0x3038	; 0x3038 <GetKey>
    31c8:	82 30       	cpi	r24, 0x02	; 2
    31ca:	09 f0       	breq	.+2      	; 0x31ce <PlayFile+0x142>
    31cc:	84 c0       	rjmp	.+264    	; 0x32d6 <PlayFile+0x24a>
			{
				StartSineTest();
    31ce:	0e 94 bc 23 	call	0x4778	; 0x4778 <StartSineTest>
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	aa ef       	ldi	r26, 0xFA	; 250
    31d8:	b3 e4       	ldi	r27, 0x43	; 67
    31da:	8e 87       	std	Y+14, r24	; 0x0e
    31dc:	9f 87       	std	Y+15, r25	; 0x0f
    31de:	a8 8b       	std	Y+16, r26	; 0x10
    31e0:	b9 8b       	std	Y+17, r27	; 0x11
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    31e2:	6e 85       	ldd	r22, Y+14	; 0x0e
    31e4:	7f 85       	ldd	r23, Y+15	; 0x0f
    31e6:	88 89       	ldd	r24, Y+16	; 0x10
    31e8:	99 89       	ldd	r25, Y+17	; 0x11
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	4a e7       	ldi	r20, 0x7A	; 122
    31f0:	53 e4       	ldi	r21, 0x43	; 67
    31f2:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	8a 8b       	std	Y+18, r24	; 0x12
    31fc:	9b 8b       	std	Y+19, r25	; 0x13
    31fe:	ac 8b       	std	Y+20, r26	; 0x14
    3200:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
    3202:	11 e0       	ldi	r17, 0x01	; 1
    3204:	6a 89       	ldd	r22, Y+18	; 0x12
    3206:	7b 89       	ldd	r23, Y+19	; 0x13
    3208:	8c 89       	ldd	r24, Y+20	; 0x14
    320a:	9d 89       	ldd	r25, Y+21	; 0x15
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	40 e8       	ldi	r20, 0x80	; 128
    3212:	5f e3       	ldi	r21, 0x3F	; 63
    3214:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    3218:	88 23       	and	r24, r24
    321a:	0c f0       	brlt	.+2      	; 0x321e <PlayFile+0x192>
    321c:	10 e0       	ldi	r17, 0x00	; 0
    321e:	11 23       	and	r17, r17
    3220:	29 f0       	breq	.+10     	; 0x322c <PlayFile+0x1a0>
		__ticks = 1;
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	9f 8b       	std	Y+23, r25	; 0x17
    3228:	8e 8b       	std	Y+22, r24	; 0x16
    322a:	46 c0       	rjmp	.+140    	; 0x32b8 <PlayFile+0x22c>
	else if (__tmp > 65535)
    322c:	11 e0       	ldi	r17, 0x01	; 1
    322e:	6a 89       	ldd	r22, Y+18	; 0x12
    3230:	7b 89       	ldd	r23, Y+19	; 0x13
    3232:	8c 89       	ldd	r24, Y+20	; 0x14
    3234:	9d 89       	ldd	r25, Y+21	; 0x15
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	3f ef       	ldi	r19, 0xFF	; 255
    323a:	4f e7       	ldi	r20, 0x7F	; 127
    323c:	57 e4       	ldi	r21, 0x47	; 71
    323e:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    3242:	18 16       	cp	r1, r24
    3244:	0c f0       	brlt	.+2      	; 0x3248 <PlayFile+0x1bc>
    3246:	10 e0       	ldi	r17, 0x00	; 0
    3248:	11 23       	and	r17, r17
    324a:	61 f1       	breq	.+88     	; 0x32a4 <PlayFile+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    324c:	6e 85       	ldd	r22, Y+14	; 0x0e
    324e:	7f 85       	ldd	r23, Y+15	; 0x0f
    3250:	88 89       	ldd	r24, Y+16	; 0x10
    3252:	99 89       	ldd	r25, Y+17	; 0x11
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	40 e2       	ldi	r20, 0x20	; 32
    325a:	51 e4       	ldi	r21, 0x41	; 65
    325c:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	bc 01       	movw	r22, r24
    3266:	cd 01       	movw	r24, r26
    3268:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	9f 8b       	std	Y+23, r25	; 0x17
    3272:	8e 8b       	std	Y+22, r24	; 0x16
    3274:	12 c0       	rjmp	.+36     	; 0x329a <PlayFile+0x20e>
    3276:	89 e1       	ldi	r24, 0x19	; 25
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	99 8f       	std	Y+25, r25	; 0x19
    327c:	88 8f       	std	Y+24, r24	; 0x18
    327e:	88 8d       	ldd	r24, Y+24	; 0x18
    3280:	99 8d       	ldd	r25, Y+25	; 0x19
    3282:	8c 01       	movw	r16, r24
    3284:	c8 01       	movw	r24, r16
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	f1 f7       	brne	.-4      	; 0x3286 <PlayFile+0x1fa>
    328a:	8c 01       	movw	r16, r24
    328c:	19 8f       	std	Y+25, r17	; 0x19
    328e:	08 8f       	std	Y+24, r16	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3290:	8e 89       	ldd	r24, Y+22	; 0x16
    3292:	9f 89       	ldd	r25, Y+23	; 0x17
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	9f 8b       	std	Y+23, r25	; 0x17
    3298:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329a:	8e 89       	ldd	r24, Y+22	; 0x16
    329c:	9f 89       	ldd	r25, Y+23	; 0x17
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	51 f7       	brne	.-44     	; 0x3276 <PlayFile+0x1ea>
    32a2:	18 c0       	rjmp	.+48     	; 0x32d4 <PlayFile+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a4:	6a 89       	ldd	r22, Y+18	; 0x12
    32a6:	7b 89       	ldd	r23, Y+19	; 0x13
    32a8:	8c 89       	ldd	r24, Y+20	; 0x14
    32aa:	9d 89       	ldd	r25, Y+21	; 0x15
    32ac:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	9f 8b       	std	Y+23, r25	; 0x17
    32b6:	8e 8b       	std	Y+22, r24	; 0x16
    32b8:	8e 89       	ldd	r24, Y+22	; 0x16
    32ba:	9f 89       	ldd	r25, Y+23	; 0x17
    32bc:	9b 8f       	std	Y+27, r25	; 0x1b
    32be:	8a 8f       	std	Y+26, r24	; 0x1a
    32c0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32c2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    32c4:	8c 01       	movw	r16, r24
    32c6:	f8 01       	movw	r30, r16
    32c8:	31 97       	sbiw	r30, 0x01	; 1
    32ca:	f1 f7       	brne	.-4      	; 0x32c8 <PlayFile+0x23c>
    32cc:	8f 01       	movw	r16, r30
    32ce:	1b 8f       	std	Y+27, r17	; 0x1b
    32d0:	0a 8f       	std	Y+26, r16	; 0x1a
				_delay_ms(500);
				break;
    32d2:	8e c0       	rjmp	.+284    	; 0x33f0 <PlayFile+0x364>
    32d4:	8d c0       	rjmp	.+282    	; 0x33f0 <PlayFile+0x364>
			}
						
			if (br < sizeBlock)
    32d6:	2a a5       	lds	r18, 0x6a
    32d8:	3b a5       	lds	r19, 0x6b
    32da:	88 85       	ldd	r24, Y+8	; 0x08
    32dc:	99 85       	ldd	r25, Y+9	; 0x09
    32de:	28 17       	cp	r18, r24
    32e0:	39 07       	cpc	r19, r25
    32e2:	08 f0       	brcs	.+2      	; 0x32e6 <PlayFile+0x25a>
    32e4:	06 cf       	rjmp	.-500    	; 0x30f2 <PlayFile+0x66>
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	a8 ec       	ldi	r26, 0xC8	; 200
    32ec:	b2 e4       	ldi	r27, 0x42	; 66
    32ee:	8c 8f       	std	Y+28, r24	; 0x1c
    32f0:	9d 8f       	std	Y+29, r25	; 0x1d
    32f2:	ae 8f       	std	Y+30, r26	; 0x1e
    32f4:	bf 8f       	std	Y+31, r27	; 0x1f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    32f6:	6c 8d       	ldd	r22, Y+28	; 0x1c
    32f8:	7d 8d       	ldd	r23, Y+29	; 0x1d
    32fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	4a e7       	ldi	r20, 0x7A	; 122
    3304:	53 e4       	ldi	r21, 0x43	; 67
    3306:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	88 a3       	lds	r24, 0x58
    3310:	99 a3       	lds	r25, 0x59
    3312:	aa a3       	lds	r26, 0x5a
    3314:	bb a3       	lds	r27, 0x5b
	if (__tmp < 1.0)
    3316:	11 e0       	ldi	r17, 0x01	; 1
    3318:	68 a1       	lds	r22, 0x48
    331a:	79 a1       	lds	r23, 0x49
    331c:	8a a1       	lds	r24, 0x4a
    331e:	9b a1       	lds	r25, 0x4b
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	40 e8       	ldi	r20, 0x80	; 128
    3326:	5f e3       	ldi	r21, 0x3F	; 63
    3328:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    332c:	88 23       	and	r24, r24
    332e:	0c f0       	brlt	.+2      	; 0x3332 <PlayFile+0x2a6>
    3330:	10 e0       	ldi	r17, 0x00	; 0
    3332:	11 23       	and	r17, r17
    3334:	29 f0       	breq	.+10     	; 0x3340 <PlayFile+0x2b4>
		__ticks = 1;
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	9d a3       	lds	r25, 0x5d
    333c:	8c a3       	lds	r24, 0x5c
    333e:	46 c0       	rjmp	.+140    	; 0x33cc <PlayFile+0x340>
	else if (__tmp > 65535)
    3340:	11 e0       	ldi	r17, 0x01	; 1
    3342:	68 a1       	lds	r22, 0x48
    3344:	79 a1       	lds	r23, 0x49
    3346:	8a a1       	lds	r24, 0x4a
    3348:	9b a1       	lds	r25, 0x4b
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	3f ef       	ldi	r19, 0xFF	; 255
    334e:	4f e7       	ldi	r20, 0x7F	; 127
    3350:	57 e4       	ldi	r21, 0x47	; 71
    3352:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    3356:	18 16       	cp	r1, r24
    3358:	0c f0       	brlt	.+2      	; 0x335c <PlayFile+0x2d0>
    335a:	10 e0       	ldi	r17, 0x00	; 0
    335c:	11 23       	and	r17, r17
    335e:	61 f1       	breq	.+88     	; 0x33b8 <PlayFile+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3360:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3362:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3364:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3366:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e2       	ldi	r20, 0x20	; 32
    336e:	51 e4       	ldi	r21, 0x41	; 65
    3370:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	bc 01       	movw	r22, r24
    337a:	cd 01       	movw	r24, r26
    337c:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	9d a3       	lds	r25, 0x5d
    3386:	8c a3       	lds	r24, 0x5c
    3388:	12 c0       	rjmp	.+36     	; 0x33ae <PlayFile+0x322>
    338a:	89 e1       	ldi	r24, 0x19	; 25
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	9f a3       	lds	r25, 0x5f
    3390:	8e a3       	lds	r24, 0x5e
    3392:	8e a1       	lds	r24, 0x4e
    3394:	9f a1       	lds	r25, 0x4f
    3396:	8c 01       	movw	r16, r24
    3398:	c8 01       	movw	r24, r16
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	f1 f7       	brne	.-4      	; 0x339a <PlayFile+0x30e>
    339e:	8c 01       	movw	r16, r24
    33a0:	1f a3       	lds	r17, 0x5f
    33a2:	0e a3       	lds	r16, 0x5e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33a4:	8c a1       	lds	r24, 0x4c
    33a6:	9d a1       	lds	r25, 0x4d
    33a8:	01 97       	sbiw	r24, 0x01	; 1
    33aa:	9d a3       	lds	r25, 0x5d
    33ac:	8c a3       	lds	r24, 0x5c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ae:	8c a1       	lds	r24, 0x4c
    33b0:	9d a1       	lds	r25, 0x4d
    33b2:	00 97       	sbiw	r24, 0x00	; 0
    33b4:	51 f7       	brne	.-44     	; 0x338a <PlayFile+0x2fe>
    33b6:	18 c0       	rjmp	.+48     	; 0x33e8 <PlayFile+0x35c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33b8:	68 a1       	lds	r22, 0x48
    33ba:	79 a1       	lds	r23, 0x49
    33bc:	8a a1       	lds	r24, 0x4a
    33be:	9b a1       	lds	r25, 0x4b
    33c0:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	9d a3       	lds	r25, 0x5d
    33ca:	8c a3       	lds	r24, 0x5c
    33cc:	8c a1       	lds	r24, 0x4c
    33ce:	9d a1       	lds	r25, 0x4d
    33d0:	99 a7       	lds	r25, 0x79
    33d2:	88 a7       	lds	r24, 0x78
    33d4:	88 a5       	lds	r24, 0x68
    33d6:	99 a5       	lds	r25, 0x69
    33d8:	8c 01       	movw	r16, r24
    33da:	f8 01       	movw	r30, r16
    33dc:	31 97       	sbiw	r30, 0x01	; 1
    33de:	f1 f7       	brne	.-4      	; 0x33dc <PlayFile+0x350>
    33e0:	8f 01       	movw	r16, r30
    33e2:	19 a7       	lds	r17, 0x79
    33e4:	08 a7       	lds	r16, 0x78
			{
				_delay_ms(100);
				break;
    33e6:	04 c0       	rjmp	.+8      	; 0x33f0 <PlayFile+0x364>
    33e8:	03 c0       	rjmp	.+6      	; 0x33f0 <PlayFile+0x364>
	{
		res = pf_read(buff, sizeBlock, &br);    // Read data to the buff[]
		if (res != 0)
		{
			//	StartSineTest();
			break;
    33ea:	00 00       	nop
    33ec:	01 c0       	rjmp	.+2      	; 0x33f0 <PlayFile+0x364>
		else
		{
							
			if (br == 0)
			{
				break;
    33ee:	00 00       	nop
			{
				_delay_ms(100);
				break;
			}
		}
	}	
    33f0:	0f b6       	in	r0, 0x3f	; 63
    33f2:	f8 94       	cli
    33f4:	de be       	out	0x3e, r13	; 62
    33f6:	0f be       	out	0x3f, r0	; 63
    33f8:	cd be       	out	0x3d, r12	; 61
}
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	fe be       	out	0x3e, r15	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	ed be       	out	0x3d, r14	; 61
    3404:	ab 96       	adiw	r28, 0x2b	; 43
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	de bf       	out	0x3e, r29	; 62
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	cd bf       	out	0x3d, r28	; 61
    3410:	df 91       	pop	r29
    3412:	cf 91       	pop	r28
    3414:	1f 91       	pop	r17
    3416:	0f 91       	pop	r16
    3418:	ff 90       	pop	r15
    341a:	ef 90       	pop	r14
    341c:	df 90       	pop	r13
    341e:	cf 90       	pop	r12
    3420:	08 95       	ret

00003422 <main>:


int main(void)
{
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
    342e:	c8 5c       	subi	r28, 0xC8	; 200
    3430:	d0 40       	sbci	r29, 0x00	; 0
    3432:	0f b6       	in	r0, 0x3f	; 63
    3434:	f8 94       	cli
    3436:	de bf       	out	0x3e, r29	; 62
    3438:	0f be       	out	0x3f, r0	; 63
    343a:	cd bf       	out	0x3d, r28	; 61
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	a0 e2       	ldi	r26, 0x20	; 32
    3442:	b1 e4       	ldi	r27, 0x41	; 65
    3444:	89 87       	std	Y+9, r24	; 0x09
    3446:	9a 87       	std	Y+10, r25	; 0x0a
    3448:	ab 87       	std	Y+11, r26	; 0x0b
    344a:	bc 87       	std	Y+12, r27	; 0x0c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    344c:	69 85       	ldd	r22, Y+9	; 0x09
    344e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3450:	8b 85       	ldd	r24, Y+11	; 0x0b
    3452:	9c 85       	ldd	r25, Y+12	; 0x0c
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	4a e7       	ldi	r20, 0x7A	; 122
    345a:	53 e4       	ldi	r21, 0x43	; 67
    345c:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	8d 87       	std	Y+13, r24	; 0x0d
    3466:	9e 87       	std	Y+14, r25	; 0x0e
    3468:	af 87       	std	Y+15, r26	; 0x0f
    346a:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    346c:	11 e0       	ldi	r17, 0x01	; 1
    346e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3470:	7e 85       	ldd	r23, Y+14	; 0x0e
    3472:	8f 85       	ldd	r24, Y+15	; 0x0f
    3474:	98 89       	ldd	r25, Y+16	; 0x10
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	40 e8       	ldi	r20, 0x80	; 128
    347c:	5f e3       	ldi	r21, 0x3F	; 63
    347e:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    3482:	88 23       	and	r24, r24
    3484:	0c f0       	brlt	.+2      	; 0x3488 <main+0x66>
    3486:	10 e0       	ldi	r17, 0x00	; 0
    3488:	11 23       	and	r17, r17
    348a:	29 f0       	breq	.+10     	; 0x3496 <main+0x74>
		__ticks = 1;
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	9a 8b       	std	Y+18, r25	; 0x12
    3492:	89 8b       	std	Y+17, r24	; 0x11
    3494:	46 c0       	rjmp	.+140    	; 0x3522 <main+0x100>
	else if (__tmp > 65535)
    3496:	11 e0       	ldi	r17, 0x01	; 1
    3498:	6d 85       	ldd	r22, Y+13	; 0x0d
    349a:	7e 85       	ldd	r23, Y+14	; 0x0e
    349c:	8f 85       	ldd	r24, Y+15	; 0x0f
    349e:	98 89       	ldd	r25, Y+16	; 0x10
    34a0:	20 e0       	ldi	r18, 0x00	; 0
    34a2:	3f ef       	ldi	r19, 0xFF	; 255
    34a4:	4f e7       	ldi	r20, 0x7F	; 127
    34a6:	57 e4       	ldi	r21, 0x47	; 71
    34a8:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    34ac:	18 16       	cp	r1, r24
    34ae:	0c f0       	brlt	.+2      	; 0x34b2 <main+0x90>
    34b0:	10 e0       	ldi	r17, 0x00	; 0
    34b2:	11 23       	and	r17, r17
    34b4:	61 f1       	breq	.+88     	; 0x350e <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b6:	69 85       	ldd	r22, Y+9	; 0x09
    34b8:	7a 85       	ldd	r23, Y+10	; 0x0a
    34ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    34bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	40 e2       	ldi	r20, 0x20	; 32
    34c4:	51 e4       	ldi	r21, 0x41	; 65
    34c6:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	bc 01       	movw	r22, r24
    34d0:	cd 01       	movw	r24, r26
    34d2:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	9a 8b       	std	Y+18, r25	; 0x12
    34dc:	89 8b       	std	Y+17, r24	; 0x11
    34de:	12 c0       	rjmp	.+36     	; 0x3504 <main+0xe2>
    34e0:	89 e1       	ldi	r24, 0x19	; 25
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	9c 8b       	std	Y+20, r25	; 0x14
    34e6:	8b 8b       	std	Y+19, r24	; 0x13
    34e8:	8b 89       	ldd	r24, Y+19	; 0x13
    34ea:	9c 89       	ldd	r25, Y+20	; 0x14
    34ec:	8c 01       	movw	r16, r24
    34ee:	c8 01       	movw	r24, r16
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	f1 f7       	brne	.-4      	; 0x34f0 <main+0xce>
    34f4:	8c 01       	movw	r16, r24
    34f6:	1c 8b       	std	Y+20, r17	; 0x14
    34f8:	0b 8b       	std	Y+19, r16	; 0x13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34fa:	89 89       	ldd	r24, Y+17	; 0x11
    34fc:	9a 89       	ldd	r25, Y+18	; 0x12
    34fe:	01 97       	sbiw	r24, 0x01	; 1
    3500:	9a 8b       	std	Y+18, r25	; 0x12
    3502:	89 8b       	std	Y+17, r24	; 0x11
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3504:	89 89       	ldd	r24, Y+17	; 0x11
    3506:	9a 89       	ldd	r25, Y+18	; 0x12
    3508:	00 97       	sbiw	r24, 0x00	; 0
    350a:	51 f7       	brne	.-44     	; 0x34e0 <main+0xbe>
    350c:	17 c0       	rjmp	.+46     	; 0x353c <main+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    350e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3510:	7e 85       	ldd	r23, Y+14	; 0x0e
    3512:	8f 85       	ldd	r24, Y+15	; 0x0f
    3514:	98 89       	ldd	r25, Y+16	; 0x10
    3516:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    351a:	dc 01       	movw	r26, r24
    351c:	cb 01       	movw	r24, r22
    351e:	9a 8b       	std	Y+18, r25	; 0x12
    3520:	89 8b       	std	Y+17, r24	; 0x11
    3522:	89 89       	ldd	r24, Y+17	; 0x11
    3524:	9a 89       	ldd	r25, Y+18	; 0x12
    3526:	9e 8b       	std	Y+22, r25	; 0x16
    3528:	8d 8b       	std	Y+21, r24	; 0x15
    352a:	8d 89       	ldd	r24, Y+21	; 0x15
    352c:	9e 89       	ldd	r25, Y+22	; 0x16
    352e:	8c 01       	movw	r16, r24
    3530:	f8 01       	movw	r30, r16
    3532:	31 97       	sbiw	r30, 0x01	; 1
    3534:	f1 f7       	brne	.-4      	; 0x3532 <main+0x110>
    3536:	8f 01       	movw	r16, r30
    3538:	1e 8b       	std	Y+22, r17	; 0x16
    353a:	0d 8b       	std	Y+21, r16	; 0x15
	_delay_ms(10);
	DDRD = 0xF0;
    353c:	8a e2       	ldi	r24, 0x2A	; 42
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	20 ef       	ldi	r18, 0xF0	; 240
    3542:	fc 01       	movw	r30, r24
    3544:	20 83       	st	Z, r18
	PORTD = 0xF0;
    3546:	8b e2       	ldi	r24, 0x2B	; 43
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	20 ef       	ldi	r18, 0xF0	; 240
    354c:	fc 01       	movw	r30, r24
    354e:	20 83       	st	Z, r18

	
    DDRC = 0xFF; // PORTC is used for the HW_Reset;
    3550:	87 e2       	ldi	r24, 0x27	; 39
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	2f ef       	ldi	r18, 0xFF	; 255
    3556:	fc 01       	movw	r30, r24
    3558:	20 83       	st	Z, r18
	PORTC = 0xFF;
    355a:	88 e2       	ldi	r24, 0x28	; 40
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	2f ef       	ldi	r18, 0xFF	; 255
    3560:	fc 01       	movw	r30, r24
    3562:	20 83       	st	Z, r18
    3564:	80 e0       	ldi	r24, 0x00	; 0
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	a8 e4       	ldi	r26, 0x48	; 72
    356a:	b2 e4       	ldi	r27, 0x42	; 66
    356c:	8f 8b       	std	Y+23, r24	; 0x17
    356e:	98 8f       	std	Y+24, r25	; 0x18
    3570:	a9 8f       	std	Y+25, r26	; 0x19
    3572:	ba 8f       	std	Y+26, r27	; 0x1a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3574:	6f 89       	ldd	r22, Y+23	; 0x17
    3576:	78 8d       	ldd	r23, Y+24	; 0x18
    3578:	89 8d       	ldd	r24, Y+25	; 0x19
    357a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	4a e7       	ldi	r20, 0x7A	; 122
    3582:	53 e4       	ldi	r21, 0x43	; 67
    3584:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	8b 8f       	std	Y+27, r24	; 0x1b
    358e:	9c 8f       	std	Y+28, r25	; 0x1c
    3590:	ad 8f       	std	Y+29, r26	; 0x1d
    3592:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
    3594:	11 e0       	ldi	r17, 0x01	; 1
    3596:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3598:	7c 8d       	ldd	r23, Y+28	; 0x1c
    359a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    359c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e8       	ldi	r20, 0x80	; 128
    35a4:	5f e3       	ldi	r21, 0x3F	; 63
    35a6:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    35aa:	88 23       	and	r24, r24
    35ac:	0c f0       	brlt	.+2      	; 0x35b0 <main+0x18e>
    35ae:	10 e0       	ldi	r17, 0x00	; 0
    35b0:	11 23       	and	r17, r17
    35b2:	29 f0       	breq	.+10     	; 0x35be <main+0x19c>
		__ticks = 1;
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	98 a3       	lds	r25, 0x58
    35ba:	8f 8f       	std	Y+31, r24	; 0x1f
    35bc:	46 c0       	rjmp	.+140    	; 0x364a <main+0x228>
	else if (__tmp > 65535)
    35be:	11 e0       	ldi	r17, 0x01	; 1
    35c0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    35c2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    35c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	3f ef       	ldi	r19, 0xFF	; 255
    35cc:	4f e7       	ldi	r20, 0x7F	; 127
    35ce:	57 e4       	ldi	r21, 0x47	; 71
    35d0:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    35d4:	18 16       	cp	r1, r24
    35d6:	0c f0       	brlt	.+2      	; 0x35da <main+0x1b8>
    35d8:	10 e0       	ldi	r17, 0x00	; 0
    35da:	11 23       	and	r17, r17
    35dc:	61 f1       	breq	.+88     	; 0x3636 <main+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35de:	6f 89       	ldd	r22, Y+23	; 0x17
    35e0:	78 8d       	ldd	r23, Y+24	; 0x18
    35e2:	89 8d       	ldd	r24, Y+25	; 0x19
    35e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	40 e2       	ldi	r20, 0x20	; 32
    35ec:	51 e4       	ldi	r21, 0x41	; 65
    35ee:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	bc 01       	movw	r22, r24
    35f8:	cd 01       	movw	r24, r26
    35fa:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	98 a3       	lds	r25, 0x58
    3604:	8f 8f       	std	Y+31, r24	; 0x1f
    3606:	12 c0       	rjmp	.+36     	; 0x362c <main+0x20a>
    3608:	89 e1       	ldi	r24, 0x19	; 25
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	9a a3       	lds	r25, 0x5a
    360e:	89 a3       	lds	r24, 0x59
    3610:	89 a1       	lds	r24, 0x49
    3612:	9a a1       	lds	r25, 0x4a
    3614:	8c 01       	movw	r16, r24
    3616:	c8 01       	movw	r24, r16
    3618:	01 97       	sbiw	r24, 0x01	; 1
    361a:	f1 f7       	brne	.-4      	; 0x3618 <main+0x1f6>
    361c:	8c 01       	movw	r16, r24
    361e:	1a a3       	lds	r17, 0x5a
    3620:	09 a3       	lds	r16, 0x59
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3622:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3624:	98 a1       	lds	r25, 0x48
    3626:	01 97       	sbiw	r24, 0x01	; 1
    3628:	98 a3       	lds	r25, 0x58
    362a:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    362c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    362e:	98 a1       	lds	r25, 0x48
    3630:	00 97       	sbiw	r24, 0x00	; 0
    3632:	51 f7       	brne	.-44     	; 0x3608 <main+0x1e6>
    3634:	17 c0       	rjmp	.+46     	; 0x3664 <main+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3636:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3638:	7c 8d       	ldd	r23, Y+28	; 0x1c
    363a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    363c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    363e:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    3642:	dc 01       	movw	r26, r24
    3644:	cb 01       	movw	r24, r22
    3646:	98 a3       	lds	r25, 0x58
    3648:	8f 8f       	std	Y+31, r24	; 0x1f
    364a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    364c:	98 a1       	lds	r25, 0x48
    364e:	9c a3       	lds	r25, 0x5c
    3650:	8b a3       	lds	r24, 0x5b
    3652:	8b a1       	lds	r24, 0x4b
    3654:	9c a1       	lds	r25, 0x4c
    3656:	8c 01       	movw	r16, r24
    3658:	f8 01       	movw	r30, r16
    365a:	31 97       	sbiw	r30, 0x01	; 1
    365c:	f1 f7       	brne	.-4      	; 0x365a <main+0x238>
    365e:	8f 01       	movw	r16, r30
    3660:	1c a3       	lds	r17, 0x5c
    3662:	0b a3       	lds	r16, 0x5b
	_delay_ms(50);
	
	
	loop_until_bit_is_set(PIND, PD0);
    3664:	89 e2       	ldi	r24, 0x29	; 41
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	fc 01       	movw	r30, r24
    366a:	80 81       	ld	r24, Z
    366c:	88 2f       	mov	r24, r24
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	81 70       	andi	r24, 0x01	; 1
    3672:	90 70       	andi	r25, 0x00	; 0
    3674:	00 97       	sbiw	r24, 0x00	; 0
    3676:	b1 f3       	breq	.-20     	; 0x3664 <main+0x242>
		
	InitKeyboard();
    3678:	0e 94 34 15 	call	0x2a68	; 0x2a68 <InitKeyboard>
	
	BYTE res = 0;
    367c:	19 82       	std	Y+1, r1	; 0x01
	FATFS fs;			/* File system object */
	FRESULT fResult = -1;
    367e:	8f ef       	ldi	r24, 0xFF	; 255
    3680:	8a 83       	std	Y+2, r24	; 0x02
	

	res = disk_initialize(); // this also init's the SPI-Interface
    3682:	0e 94 19 03 	call	0x632	; 0x632 <disk_initialize>
    3686:	89 83       	std	Y+1, r24	; 0x01
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	a0 e2       	ldi	r26, 0x20	; 32
    368e:	b1 e4       	ldi	r27, 0x41	; 65
    3690:	8d a3       	lds	r24, 0x5d
    3692:	9e a3       	lds	r25, 0x5e
    3694:	af a3       	lds	r26, 0x5f
    3696:	b8 a7       	lds	r27, 0x78
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3698:	6d a1       	lds	r22, 0x4d
    369a:	7e a1       	lds	r23, 0x4e
    369c:	8f a1       	lds	r24, 0x4f
    369e:	98 a5       	lds	r25, 0x68
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	4a e7       	ldi	r20, 0x7A	; 122
    36a6:	53 e4       	ldi	r21, 0x43	; 67
    36a8:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	89 a7       	lds	r24, 0x79
    36b2:	9a a7       	lds	r25, 0x7a
    36b4:	ab a7       	lds	r26, 0x7b
    36b6:	bc a7       	lds	r27, 0x7c
	if (__tmp < 1.0)
    36b8:	11 e0       	ldi	r17, 0x01	; 1
    36ba:	69 a5       	lds	r22, 0x69
    36bc:	7a a5       	lds	r23, 0x6a
    36be:	8b a5       	lds	r24, 0x6b
    36c0:	9c a5       	lds	r25, 0x6c
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	40 e8       	ldi	r20, 0x80	; 128
    36c8:	5f e3       	ldi	r21, 0x3F	; 63
    36ca:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    36ce:	88 23       	and	r24, r24
    36d0:	0c f0       	brlt	.+2      	; 0x36d4 <main+0x2b2>
    36d2:	10 e0       	ldi	r17, 0x00	; 0
    36d4:	11 23       	and	r17, r17
    36d6:	29 f0       	breq	.+10     	; 0x36e2 <main+0x2c0>
		__ticks = 1;
    36d8:	81 e0       	ldi	r24, 0x01	; 1
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	9e a7       	lds	r25, 0x7e
    36de:	8d a7       	lds	r24, 0x7d
    36e0:	46 c0       	rjmp	.+140    	; 0x376e <main+0x34c>
	else if (__tmp > 65535)
    36e2:	11 e0       	ldi	r17, 0x01	; 1
    36e4:	69 a5       	lds	r22, 0x69
    36e6:	7a a5       	lds	r23, 0x6a
    36e8:	8b a5       	lds	r24, 0x6b
    36ea:	9c a5       	lds	r25, 0x6c
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	3f ef       	ldi	r19, 0xFF	; 255
    36f0:	4f e7       	ldi	r20, 0x7F	; 127
    36f2:	57 e4       	ldi	r21, 0x47	; 71
    36f4:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    36f8:	18 16       	cp	r1, r24
    36fa:	0c f0       	brlt	.+2      	; 0x36fe <main+0x2dc>
    36fc:	10 e0       	ldi	r17, 0x00	; 0
    36fe:	11 23       	and	r17, r17
    3700:	61 f1       	breq	.+88     	; 0x375a <main+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3702:	6d a1       	lds	r22, 0x4d
    3704:	7e a1       	lds	r23, 0x4e
    3706:	8f a1       	lds	r24, 0x4f
    3708:	98 a5       	lds	r25, 0x68
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	40 e2       	ldi	r20, 0x20	; 32
    3710:	51 e4       	ldi	r21, 0x41	; 65
    3712:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	bc 01       	movw	r22, r24
    371c:	cd 01       	movw	r24, r26
    371e:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    3722:	dc 01       	movw	r26, r24
    3724:	cb 01       	movw	r24, r22
    3726:	9e a7       	lds	r25, 0x7e
    3728:	8d a7       	lds	r24, 0x7d
    372a:	12 c0       	rjmp	.+36     	; 0x3750 <main+0x32e>
    372c:	89 e1       	ldi	r24, 0x19	; 25
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	98 ab       	sts	0x58, r25
    3732:	8f a7       	lds	r24, 0x7f
    3734:	8f a5       	lds	r24, 0x6f
    3736:	98 a9       	sts	0x48, r25
    3738:	8c 01       	movw	r16, r24
    373a:	c8 01       	movw	r24, r16
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	f1 f7       	brne	.-4      	; 0x373c <main+0x31a>
    3740:	8c 01       	movw	r16, r24
    3742:	18 ab       	sts	0x58, r17
    3744:	0f a7       	lds	r16, 0x7f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3746:	8d a5       	lds	r24, 0x6d
    3748:	9e a5       	lds	r25, 0x6e
    374a:	01 97       	sbiw	r24, 0x01	; 1
    374c:	9e a7       	lds	r25, 0x7e
    374e:	8d a7       	lds	r24, 0x7d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3750:	8d a5       	lds	r24, 0x6d
    3752:	9e a5       	lds	r25, 0x6e
    3754:	00 97       	sbiw	r24, 0x00	; 0
    3756:	51 f7       	brne	.-44     	; 0x372c <main+0x30a>
    3758:	17 c0       	rjmp	.+46     	; 0x3788 <main+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    375a:	69 a5       	lds	r22, 0x69
    375c:	7a a5       	lds	r23, 0x6a
    375e:	8b a5       	lds	r24, 0x6b
    3760:	9c a5       	lds	r25, 0x6c
    3762:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	9e a7       	lds	r25, 0x7e
    376c:	8d a7       	lds	r24, 0x7d
    376e:	8d a5       	lds	r24, 0x6d
    3770:	9e a5       	lds	r25, 0x6e
    3772:	9a ab       	sts	0x5a, r25
    3774:	89 ab       	sts	0x59, r24
    3776:	89 a9       	sts	0x49, r24
    3778:	9a a9       	sts	0x4a, r25
    377a:	8c 01       	movw	r16, r24
    377c:	f8 01       	movw	r30, r16
    377e:	31 97       	sbiw	r30, 0x01	; 1
    3780:	f1 f7       	brne	.-4      	; 0x377e <main+0x35c>
    3782:	8f 01       	movw	r16, r30
    3784:	1a ab       	sts	0x5a, r17
    3786:	09 ab       	sts	0x59, r16

	_delay_ms(10);
	HardwareReset();
    3788:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <HardwareReset>
	
	InitVS1011e();
    378c:	0e 94 07 20 	call	0x400e	; 0x400e <InitVS1011e>
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	a0 ea       	ldi	r26, 0xA0	; 160
    3796:	b0 e4       	ldi	r27, 0x40	; 64
    3798:	8b ab       	sts	0x5b, r24
    379a:	9c ab       	sts	0x5c, r25
    379c:	ad ab       	sts	0x5d, r26
    379e:	be ab       	sts	0x5e, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    37a0:	6b a9       	sts	0x4b, r22
    37a2:	7c a9       	sts	0x4c, r23
    37a4:	8d a9       	sts	0x4d, r24
    37a6:	9e a9       	sts	0x4e, r25
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	4a e7       	ldi	r20, 0x7A	; 122
    37ae:	53 e4       	ldi	r21, 0x43	; 67
    37b0:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	8f ab       	sts	0x5f, r24
    37ba:	98 af       	sts	0x78, r25
    37bc:	a9 af       	sts	0x79, r26
    37be:	ba af       	sts	0x7a, r27
	if (__tmp < 1.0)
    37c0:	11 e0       	ldi	r17, 0x01	; 1
    37c2:	6f a9       	sts	0x4f, r22
    37c4:	78 ad       	sts	0x68, r23
    37c6:	89 ad       	sts	0x69, r24
    37c8:	9a ad       	sts	0x6a, r25
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	40 e8       	ldi	r20, 0x80	; 128
    37d0:	5f e3       	ldi	r21, 0x3F	; 63
    37d2:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    37d6:	88 23       	and	r24, r24
    37d8:	0c f0       	brlt	.+2      	; 0x37dc <main+0x3ba>
    37da:	10 e0       	ldi	r17, 0x00	; 0
    37dc:	11 23       	and	r17, r17
    37de:	29 f0       	breq	.+10     	; 0x37ea <main+0x3c8>
		__ticks = 1;
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	9c af       	sts	0x7c, r25
    37e6:	8b af       	sts	0x7b, r24
    37e8:	46 c0       	rjmp	.+140    	; 0x3876 <main+0x454>
	else if (__tmp > 65535)
    37ea:	11 e0       	ldi	r17, 0x01	; 1
    37ec:	6f a9       	sts	0x4f, r22
    37ee:	78 ad       	sts	0x68, r23
    37f0:	89 ad       	sts	0x69, r24
    37f2:	9a ad       	sts	0x6a, r25
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	3f ef       	ldi	r19, 0xFF	; 255
    37f8:	4f e7       	ldi	r20, 0x7F	; 127
    37fa:	57 e4       	ldi	r21, 0x47	; 71
    37fc:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    3800:	18 16       	cp	r1, r24
    3802:	0c f0       	brlt	.+2      	; 0x3806 <main+0x3e4>
    3804:	10 e0       	ldi	r17, 0x00	; 0
    3806:	11 23       	and	r17, r17
    3808:	61 f1       	breq	.+88     	; 0x3862 <main+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    380a:	6b a9       	sts	0x4b, r22
    380c:	7c a9       	sts	0x4c, r23
    380e:	8d a9       	sts	0x4d, r24
    3810:	9e a9       	sts	0x4e, r25
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	40 e2       	ldi	r20, 0x20	; 32
    3818:	51 e4       	ldi	r21, 0x41	; 65
    381a:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	bc 01       	movw	r22, r24
    3824:	cd 01       	movw	r24, r26
    3826:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	9c af       	sts	0x7c, r25
    3830:	8b af       	sts	0x7b, r24
    3832:	12 c0       	rjmp	.+36     	; 0x3858 <main+0x436>
    3834:	89 e1       	ldi	r24, 0x19	; 25
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	9e af       	sts	0x7e, r25
    383a:	8d af       	sts	0x7d, r24
    383c:	8d ad       	sts	0x6d, r24
    383e:	9e ad       	sts	0x6e, r25
    3840:	8c 01       	movw	r16, r24
    3842:	c8 01       	movw	r24, r16
    3844:	01 97       	sbiw	r24, 0x01	; 1
    3846:	f1 f7       	brne	.-4      	; 0x3844 <main+0x422>
    3848:	8c 01       	movw	r16, r24
    384a:	1e af       	sts	0x7e, r17
    384c:	0d af       	sts	0x7d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    384e:	8b ad       	sts	0x6b, r24
    3850:	9c ad       	sts	0x6c, r25
    3852:	01 97       	sbiw	r24, 0x01	; 1
    3854:	9c af       	sts	0x7c, r25
    3856:	8b af       	sts	0x7b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3858:	8b ad       	sts	0x6b, r24
    385a:	9c ad       	sts	0x6c, r25
    385c:	00 97       	sbiw	r24, 0x00	; 0
    385e:	51 f7       	brne	.-44     	; 0x3834 <main+0x412>
    3860:	20 c0       	rjmp	.+64     	; 0x38a2 <main+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3862:	6f a9       	sts	0x4f, r22
    3864:	78 ad       	sts	0x68, r23
    3866:	89 ad       	sts	0x69, r24
    3868:	9a ad       	sts	0x6a, r25
    386a:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	9c af       	sts	0x7c, r25
    3874:	8b af       	sts	0x7b, r24
    3876:	2b ad       	sts	0x6b, r18
    3878:	3c ad       	sts	0x6c, r19
    387a:	ce 01       	movw	r24, r28
    387c:	cf 96       	adiw	r24, 0x3f	; 63
    387e:	fc 01       	movw	r30, r24
    3880:	31 83       	std	Z+1, r19	; 0x01
    3882:	20 83       	st	Z, r18
    3884:	ce 01       	movw	r24, r28
    3886:	cf 96       	adiw	r24, 0x3f	; 63
    3888:	fc 01       	movw	r30, r24
    388a:	80 81       	ld	r24, Z
    388c:	91 81       	ldd	r25, Z+1	; 0x01
    388e:	8c 01       	movw	r16, r24
    3890:	c8 01       	movw	r24, r16
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	f1 f7       	brne	.-4      	; 0x3892 <main+0x470>
    3896:	8c 01       	movw	r16, r24
    3898:	ce 01       	movw	r24, r28
    389a:	cf 96       	adiw	r24, 0x3f	; 63
    389c:	fc 01       	movw	r30, r24
    389e:	11 83       	std	Z+1, r17	; 0x01
    38a0:	00 83       	st	Z, r16
	_delay_ms(5);
	
	uint16_t read = 0x00;
    38a2:	1c 82       	std	Y+4, r1	; 0x04
    38a4:	1b 82       	std	Y+3, r1	; 0x03
	read = ReadCommand(0x00);
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <ReadCommand>
    38ae:	9c 83       	std	Y+4, r25	; 0x04
    38b0:	8b 83       	std	Y+3, r24	; 0x03
	read = ReadCommand(0x01);
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <ReadCommand>
    38ba:	9c 83       	std	Y+4, r25	; 0x04
    38bc:	8b 83       	std	Y+3, r24	; 0x03
	read = ReadCommand(0x03);
    38be:	83 e0       	ldi	r24, 0x03	; 3
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <ReadCommand>
    38c6:	9c 83       	std	Y+4, r25	; 0x04
    38c8:	8b 83       	std	Y+3, r24	; 0x03
    38ca:	9e 01       	movw	r18, r28
    38cc:	2f 5b       	subi	r18, 0xBF	; 191
    38ce:	3f 4f       	sbci	r19, 0xFF	; 255
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	aa ef       	ldi	r26, 0xFA	; 250
    38d6:	b3 e4       	ldi	r27, 0x43	; 67
    38d8:	f9 01       	movw	r30, r18
    38da:	80 83       	st	Z, r24
    38dc:	91 83       	std	Z+1, r25	; 0x01
    38de:	a2 83       	std	Z+2, r26	; 0x02
    38e0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    38e2:	8e 01       	movw	r16, r28
    38e4:	0b 5b       	subi	r16, 0xBB	; 187
    38e6:	1f 4f       	sbci	r17, 0xFF	; 255
    38e8:	ce 01       	movw	r24, r28
    38ea:	8f 5b       	subi	r24, 0xBF	; 191
    38ec:	9f 4f       	sbci	r25, 0xFF	; 255
    38ee:	fc 01       	movw	r30, r24
    38f0:	60 81       	ld	r22, Z
    38f2:	71 81       	ldd	r23, Z+1	; 0x01
    38f4:	82 81       	ldd	r24, Z+2	; 0x02
    38f6:	93 81       	ldd	r25, Z+3	; 0x03
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	4a e7       	ldi	r20, 0x7A	; 122
    38fe:	53 e4       	ldi	r21, 0x43	; 67
    3900:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    3904:	dc 01       	movw	r26, r24
    3906:	cb 01       	movw	r24, r22
    3908:	f8 01       	movw	r30, r16
    390a:	80 83       	st	Z, r24
    390c:	91 83       	std	Z+1, r25	; 0x01
    390e:	a2 83       	std	Z+2, r26	; 0x02
    3910:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3912:	ce 01       	movw	r24, r28
    3914:	8b 5b       	subi	r24, 0xBB	; 187
    3916:	9f 4f       	sbci	r25, 0xFF	; 255
    3918:	11 e0       	ldi	r17, 0x01	; 1
    391a:	fc 01       	movw	r30, r24
    391c:	60 81       	ld	r22, Z
    391e:	71 81       	ldd	r23, Z+1	; 0x01
    3920:	82 81       	ldd	r24, Z+2	; 0x02
    3922:	93 81       	ldd	r25, Z+3	; 0x03
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e8       	ldi	r20, 0x80	; 128
    392a:	5f e3       	ldi	r21, 0x3F	; 63
    392c:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    3930:	88 23       	and	r24, r24
    3932:	0c f0       	brlt	.+2      	; 0x3936 <main+0x514>
    3934:	10 e0       	ldi	r17, 0x00	; 0
    3936:	11 23       	and	r17, r17
    3938:	49 f0       	breq	.+18     	; 0x394c <main+0x52a>
		__ticks = 1;
    393a:	ce 01       	movw	r24, r28
    393c:	87 5b       	subi	r24, 0xB7	; 183
    393e:	9f 4f       	sbci	r25, 0xFF	; 255
    3940:	21 e0       	ldi	r18, 0x01	; 1
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	fc 01       	movw	r30, r24
    3946:	31 83       	std	Z+1, r19	; 0x01
    3948:	20 83       	st	Z, r18
    394a:	74 c0       	rjmp	.+232    	; 0x3a34 <main+0x612>
	else if (__tmp > 65535)
    394c:	ce 01       	movw	r24, r28
    394e:	8b 5b       	subi	r24, 0xBB	; 187
    3950:	9f 4f       	sbci	r25, 0xFF	; 255
    3952:	11 e0       	ldi	r17, 0x01	; 1
    3954:	fc 01       	movw	r30, r24
    3956:	60 81       	ld	r22, Z
    3958:	71 81       	ldd	r23, Z+1	; 0x01
    395a:	82 81       	ldd	r24, Z+2	; 0x02
    395c:	93 81       	ldd	r25, Z+3	; 0x03
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	3f ef       	ldi	r19, 0xFF	; 255
    3962:	4f e7       	ldi	r20, 0x7F	; 127
    3964:	57 e4       	ldi	r21, 0x47	; 71
    3966:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    396a:	18 16       	cp	r1, r24
    396c:	0c f0       	brlt	.+2      	; 0x3970 <main+0x54e>
    396e:	10 e0       	ldi	r17, 0x00	; 0
    3970:	11 23       	and	r17, r17
    3972:	09 f4       	brne	.+2      	; 0x3976 <main+0x554>
    3974:	4d c0       	rjmp	.+154    	; 0x3a10 <main+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3976:	ce 01       	movw	r24, r28
    3978:	8f 5b       	subi	r24, 0xBF	; 191
    397a:	9f 4f       	sbci	r25, 0xFF	; 255
    397c:	fc 01       	movw	r30, r24
    397e:	60 81       	ld	r22, Z
    3980:	71 81       	ldd	r23, Z+1	; 0x01
    3982:	82 81       	ldd	r24, Z+2	; 0x02
    3984:	93 81       	ldd	r25, Z+3	; 0x03
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	40 e2       	ldi	r20, 0x20	; 32
    398c:	51 e4       	ldi	r21, 0x41	; 65
    398e:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	8e 01       	movw	r16, r28
    3998:	07 5b       	subi	r16, 0xB7	; 183
    399a:	1f 4f       	sbci	r17, 0xFF	; 255
    399c:	bc 01       	movw	r22, r24
    399e:	cd 01       	movw	r24, r26
    39a0:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	f8 01       	movw	r30, r16
    39aa:	91 83       	std	Z+1, r25	; 0x01
    39ac:	80 83       	st	Z, r24
    39ae:	27 c0       	rjmp	.+78     	; 0x39fe <main+0x5dc>
    39b0:	ce 01       	movw	r24, r28
    39b2:	85 5b       	subi	r24, 0xB5	; 181
    39b4:	9f 4f       	sbci	r25, 0xFF	; 255
    39b6:	29 e1       	ldi	r18, 0x19	; 25
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	fc 01       	movw	r30, r24
    39bc:	31 83       	std	Z+1, r19	; 0x01
    39be:	20 83       	st	Z, r18
    39c0:	ce 01       	movw	r24, r28
    39c2:	85 5b       	subi	r24, 0xB5	; 181
    39c4:	9f 4f       	sbci	r25, 0xFF	; 255
    39c6:	fc 01       	movw	r30, r24
    39c8:	80 81       	ld	r24, Z
    39ca:	91 81       	ldd	r25, Z+1	; 0x01
    39cc:	8c 01       	movw	r16, r24
    39ce:	c8 01       	movw	r24, r16
    39d0:	01 97       	sbiw	r24, 0x01	; 1
    39d2:	f1 f7       	brne	.-4      	; 0x39d0 <main+0x5ae>
    39d4:	8c 01       	movw	r16, r24
    39d6:	ce 01       	movw	r24, r28
    39d8:	85 5b       	subi	r24, 0xB5	; 181
    39da:	9f 4f       	sbci	r25, 0xFF	; 255
    39dc:	fc 01       	movw	r30, r24
    39de:	11 83       	std	Z+1, r17	; 0x01
    39e0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e2:	ce 01       	movw	r24, r28
    39e4:	87 5b       	subi	r24, 0xB7	; 183
    39e6:	9f 4f       	sbci	r25, 0xFF	; 255
    39e8:	9e 01       	movw	r18, r28
    39ea:	27 5b       	subi	r18, 0xB7	; 183
    39ec:	3f 4f       	sbci	r19, 0xFF	; 255
    39ee:	f9 01       	movw	r30, r18
    39f0:	20 81       	ld	r18, Z
    39f2:	31 81       	ldd	r19, Z+1	; 0x01
    39f4:	21 50       	subi	r18, 0x01	; 1
    39f6:	30 40       	sbci	r19, 0x00	; 0
    39f8:	fc 01       	movw	r30, r24
    39fa:	31 83       	std	Z+1, r19	; 0x01
    39fc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39fe:	ce 01       	movw	r24, r28
    3a00:	87 5b       	subi	r24, 0xB7	; 183
    3a02:	9f 4f       	sbci	r25, 0xFF	; 255
    3a04:	fc 01       	movw	r30, r24
    3a06:	80 81       	ld	r24, Z
    3a08:	91 81       	ldd	r25, Z+1	; 0x01
    3a0a:	00 97       	sbiw	r24, 0x00	; 0
    3a0c:	89 f6       	brne	.-94     	; 0x39b0 <main+0x58e>
    3a0e:	2f c0       	rjmp	.+94     	; 0x3a6e <main+0x64c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a10:	8e 01       	movw	r16, r28
    3a12:	07 5b       	subi	r16, 0xB7	; 183
    3a14:	1f 4f       	sbci	r17, 0xFF	; 255
    3a16:	ce 01       	movw	r24, r28
    3a18:	8b 5b       	subi	r24, 0xBB	; 187
    3a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	60 81       	ld	r22, Z
    3a20:	71 81       	ldd	r23, Z+1	; 0x01
    3a22:	82 81       	ldd	r24, Z+2	; 0x02
    3a24:	93 81       	ldd	r25, Z+3	; 0x03
    3a26:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	f8 01       	movw	r30, r16
    3a30:	91 83       	std	Z+1, r25	; 0x01
    3a32:	80 83       	st	Z, r24
    3a34:	ce 01       	movw	r24, r28
    3a36:	83 5b       	subi	r24, 0xB3	; 179
    3a38:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3a:	9e 01       	movw	r18, r28
    3a3c:	27 5b       	subi	r18, 0xB7	; 183
    3a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a40:	f9 01       	movw	r30, r18
    3a42:	20 81       	ld	r18, Z
    3a44:	31 81       	ldd	r19, Z+1	; 0x01
    3a46:	fc 01       	movw	r30, r24
    3a48:	31 83       	std	Z+1, r19	; 0x01
    3a4a:	20 83       	st	Z, r18
    3a4c:	ce 01       	movw	r24, r28
    3a4e:	83 5b       	subi	r24, 0xB3	; 179
    3a50:	9f 4f       	sbci	r25, 0xFF	; 255
    3a52:	fc 01       	movw	r30, r24
    3a54:	80 81       	ld	r24, Z
    3a56:	91 81       	ldd	r25, Z+1	; 0x01
    3a58:	8c 01       	movw	r16, r24
    3a5a:	c8 01       	movw	r24, r16
    3a5c:	01 97       	sbiw	r24, 0x01	; 1
    3a5e:	f1 f7       	brne	.-4      	; 0x3a5c <main+0x63a>
    3a60:	8c 01       	movw	r16, r24
    3a62:	ce 01       	movw	r24, r28
    3a64:	83 5b       	subi	r24, 0xB3	; 179
    3a66:	9f 4f       	sbci	r25, 0xFF	; 255
    3a68:	fc 01       	movw	r30, r24
    3a6a:	11 83       	std	Z+1, r17	; 0x01
    3a6c:	00 83       	st	Z, r16

	_delay_ms(500);

	fResult = pf_mount(&fs);
    3a6e:	ce 01       	movw	r24, r28
    3a70:	87 58       	subi	r24, 0x87	; 135
    3a72:	9f 4f       	sbci	r25, 0xFF	; 255
    3a74:	0e 94 a0 0c 	call	0x1940	; 0x1940 <pf_mount>
    3a78:	8a 83       	std	Y+2, r24	; 0x02

	if (fResult == 0)
    3a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7c:	88 23       	and	r24, r24
    3a7e:	09 f0       	breq	.+2      	; 0x3a82 <main+0x660>
    3a80:	f1 c1       	rjmp	.+994    	; 0x3e64 <main+0xa42>
	{
		DIR dir;
		int i;
		char* path = "";
    3a82:	83 e0       	ldi	r24, 0x03	; 3
    3a84:	91 e0       	ldi	r25, 0x01	; 1
    3a86:	9e 83       	std	Y+6, r25	; 0x06
    3a88:	8d 83       	std	Y+5, r24	; 0x05
    3a8a:	01 c0       	rjmp	.+2      	; 0x3a8e <main+0x66c>
					{
						PlayFile();
					}
				}
			}
		}
    3a8c:	00 00       	nop
		DIR dir;
		int i;
		char* path = "";
		while(1)
		{
			res = pf_opendir(&dir, path);
    3a8e:	ce 01       	movw	r24, r28
    3a90:	8d 55       	subi	r24, 0x5D	; 93
    3a92:	9f 4f       	sbci	r25, 0xFF	; 255
    3a94:	2d 81       	ldd	r18, Y+5	; 0x05
    3a96:	3e 81       	ldd	r19, Y+6	; 0x06
    3a98:	b9 01       	movw	r22, r18
    3a9a:	0e 94 4e 14 	call	0x289c	; 0x289c <pf_opendir>
    3a9e:	89 83       	std	Y+1, r24	; 0x01
			if (res == FR_OK)
    3aa0:	89 81       	ldd	r24, Y+1	; 0x01
    3aa2:	88 23       	and	r24, r24
    3aa4:	99 f7       	brne	.-26     	; 0x3a8c <main+0x66a>
			{
				i = strlen(path);
    3aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aaa:	9c 01       	movw	r18, r24
    3aac:	f9 01       	movw	r30, r18
    3aae:	01 90       	ld	r0, Z+
    3ab0:	00 20       	and	r0, r0
    3ab2:	e9 f7       	brne	.-6      	; 0x3aae <main+0x68c>
    3ab4:	cf 01       	movw	r24, r30
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	82 1b       	sub	r24, r18
    3aba:	93 0b       	sbc	r25, r19
    3abc:	98 87       	std	Y+8, r25	; 0x08
    3abe:	8f 83       	std	Y+7, r24	; 0x07
				while (1)
				{
					FILINFO fno;
					res = pf_readdir(&dir, &fno);
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	8d 55       	subi	r24, 0x5D	; 93
    3ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac6:	9e 01       	movw	r18, r28
    3ac8:	2d 54       	subi	r18, 0x4D	; 77
    3aca:	3f 4f       	sbci	r19, 0xFF	; 255
    3acc:	b9 01       	movw	r22, r18
    3ace:	0e 94 c4 14 	call	0x2988	; 0x2988 <pf_readdir>
    3ad2:	89 83       	std	Y+1, r24	; 0x01
					if (res != FR_OK || fno.fname[0] == 0)
    3ad4:	89 81       	ldd	r24, Y+1	; 0x01
    3ad6:	88 23       	and	r24, r24
    3ad8:	c9 f6       	brne	.-78     	; 0x3a8c <main+0x66a>
    3ada:	ce 01       	movw	r24, r28
    3adc:	8d 54       	subi	r24, 0x4D	; 77
    3ade:	9f 4f       	sbci	r25, 0xFF	; 255
    3ae0:	fc 01       	movw	r30, r24
    3ae2:	81 85       	ldd	r24, Z+9	; 0x09
    3ae4:	88 23       	and	r24, r24
    3ae6:	91 f2       	breq	.-92     	; 0x3a8c <main+0x66a>
					{
			//			StartSineTest();
						break;
					}
								
					SoftwareReset();
    3ae8:	0e 94 4b 21 	call	0x4296	; 0x4296 <SoftwareReset>
					WriteCommand(11, 0); // set VOL to maximum
    3aec:	8b e0       	ldi	r24, 0x0B	; 11
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	60 e0       	ldi	r22, 0x00	; 0
    3af2:	70 e0       	ldi	r23, 0x00	; 0
    3af4:	0e 94 27 23 	call	0x464e	; 0x464e <WriteCommand>
    3af8:	9e 01       	movw	r18, r28
    3afa:	21 5b       	subi	r18, 0xB1	; 177
    3afc:	3f 4f       	sbci	r19, 0xFF	; 255
    3afe:	80 e0       	ldi	r24, 0x00	; 0
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	a0 e2       	ldi	r26, 0x20	; 32
    3b04:	b1 e4       	ldi	r27, 0x41	; 65
    3b06:	f9 01       	movw	r30, r18
    3b08:	80 83       	st	Z, r24
    3b0a:	91 83       	std	Z+1, r25	; 0x01
    3b0c:	a2 83       	std	Z+2, r26	; 0x02
    3b0e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3b10:	8e 01       	movw	r16, r28
    3b12:	0d 5a       	subi	r16, 0xAD	; 173
    3b14:	1f 4f       	sbci	r17, 0xFF	; 255
    3b16:	ce 01       	movw	r24, r28
    3b18:	81 5b       	subi	r24, 0xB1	; 177
    3b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	60 81       	ld	r22, Z
    3b20:	71 81       	ldd	r23, Z+1	; 0x01
    3b22:	82 81       	ldd	r24, Z+2	; 0x02
    3b24:	93 81       	ldd	r25, Z+3	; 0x03
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	4a e7       	ldi	r20, 0x7A	; 122
    3b2c:	53 e4       	ldi	r21, 0x43	; 67
    3b2e:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    3b32:	dc 01       	movw	r26, r24
    3b34:	cb 01       	movw	r24, r22
    3b36:	f8 01       	movw	r30, r16
    3b38:	80 83       	st	Z, r24
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	a2 83       	std	Z+2, r26	; 0x02
    3b3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b40:	ce 01       	movw	r24, r28
    3b42:	8d 5a       	subi	r24, 0xAD	; 173
    3b44:	9f 4f       	sbci	r25, 0xFF	; 255
    3b46:	11 e0       	ldi	r17, 0x01	; 1
    3b48:	fc 01       	movw	r30, r24
    3b4a:	60 81       	ld	r22, Z
    3b4c:	71 81       	ldd	r23, Z+1	; 0x01
    3b4e:	82 81       	ldd	r24, Z+2	; 0x02
    3b50:	93 81       	ldd	r25, Z+3	; 0x03
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	40 e8       	ldi	r20, 0x80	; 128
    3b58:	5f e3       	ldi	r21, 0x3F	; 63
    3b5a:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    3b5e:	88 23       	and	r24, r24
    3b60:	0c f0       	brlt	.+2      	; 0x3b64 <main+0x742>
    3b62:	10 e0       	ldi	r17, 0x00	; 0
    3b64:	11 23       	and	r17, r17
    3b66:	49 f0       	breq	.+18     	; 0x3b7a <main+0x758>
		__ticks = 1;
    3b68:	ce 01       	movw	r24, r28
    3b6a:	89 5a       	subi	r24, 0xA9	; 169
    3b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b6e:	21 e0       	ldi	r18, 0x01	; 1
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	fc 01       	movw	r30, r24
    3b74:	31 83       	std	Z+1, r19	; 0x01
    3b76:	20 83       	st	Z, r18
    3b78:	74 c0       	rjmp	.+232    	; 0x3c62 <main+0x840>
	else if (__tmp > 65535)
    3b7a:	ce 01       	movw	r24, r28
    3b7c:	8d 5a       	subi	r24, 0xAD	; 173
    3b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b80:	11 e0       	ldi	r17, 0x01	; 1
    3b82:	fc 01       	movw	r30, r24
    3b84:	60 81       	ld	r22, Z
    3b86:	71 81       	ldd	r23, Z+1	; 0x01
    3b88:	82 81       	ldd	r24, Z+2	; 0x02
    3b8a:	93 81       	ldd	r25, Z+3	; 0x03
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	3f ef       	ldi	r19, 0xFF	; 255
    3b90:	4f e7       	ldi	r20, 0x7F	; 127
    3b92:	57 e4       	ldi	r21, 0x47	; 71
    3b94:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    3b98:	18 16       	cp	r1, r24
    3b9a:	0c f0       	brlt	.+2      	; 0x3b9e <main+0x77c>
    3b9c:	10 e0       	ldi	r17, 0x00	; 0
    3b9e:	11 23       	and	r17, r17
    3ba0:	09 f4       	brne	.+2      	; 0x3ba4 <main+0x782>
    3ba2:	4d c0       	rjmp	.+154    	; 0x3c3e <main+0x81c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba4:	ce 01       	movw	r24, r28
    3ba6:	81 5b       	subi	r24, 0xB1	; 177
    3ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    3baa:	fc 01       	movw	r30, r24
    3bac:	60 81       	ld	r22, Z
    3bae:	71 81       	ldd	r23, Z+1	; 0x01
    3bb0:	82 81       	ldd	r24, Z+2	; 0x02
    3bb2:	93 81       	ldd	r25, Z+3	; 0x03
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	40 e2       	ldi	r20, 0x20	; 32
    3bba:	51 e4       	ldi	r21, 0x41	; 65
    3bbc:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	8e 01       	movw	r16, r28
    3bc6:	09 5a       	subi	r16, 0xA9	; 169
    3bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bca:	bc 01       	movw	r22, r24
    3bcc:	cd 01       	movw	r24, r26
    3bce:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	f8 01       	movw	r30, r16
    3bd8:	91 83       	std	Z+1, r25	; 0x01
    3bda:	80 83       	st	Z, r24
    3bdc:	27 c0       	rjmp	.+78     	; 0x3c2c <main+0x80a>
    3bde:	ce 01       	movw	r24, r28
    3be0:	87 5a       	subi	r24, 0xA7	; 167
    3be2:	9f 4f       	sbci	r25, 0xFF	; 255
    3be4:	29 e1       	ldi	r18, 0x19	; 25
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	fc 01       	movw	r30, r24
    3bea:	31 83       	std	Z+1, r19	; 0x01
    3bec:	20 83       	st	Z, r18
    3bee:	ce 01       	movw	r24, r28
    3bf0:	87 5a       	subi	r24, 0xA7	; 167
    3bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf4:	fc 01       	movw	r30, r24
    3bf6:	80 81       	ld	r24, Z
    3bf8:	91 81       	ldd	r25, Z+1	; 0x01
    3bfa:	8c 01       	movw	r16, r24
    3bfc:	c8 01       	movw	r24, r16
    3bfe:	01 97       	sbiw	r24, 0x01	; 1
    3c00:	f1 f7       	brne	.-4      	; 0x3bfe <main+0x7dc>
    3c02:	8c 01       	movw	r16, r24
    3c04:	ce 01       	movw	r24, r28
    3c06:	87 5a       	subi	r24, 0xA7	; 167
    3c08:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	11 83       	std	Z+1, r17	; 0x01
    3c0e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c10:	ce 01       	movw	r24, r28
    3c12:	89 5a       	subi	r24, 0xA9	; 169
    3c14:	9f 4f       	sbci	r25, 0xFF	; 255
    3c16:	9e 01       	movw	r18, r28
    3c18:	29 5a       	subi	r18, 0xA9	; 169
    3c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c1c:	f9 01       	movw	r30, r18
    3c1e:	20 81       	ld	r18, Z
    3c20:	31 81       	ldd	r19, Z+1	; 0x01
    3c22:	21 50       	subi	r18, 0x01	; 1
    3c24:	30 40       	sbci	r19, 0x00	; 0
    3c26:	fc 01       	movw	r30, r24
    3c28:	31 83       	std	Z+1, r19	; 0x01
    3c2a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c2c:	ce 01       	movw	r24, r28
    3c2e:	89 5a       	subi	r24, 0xA9	; 169
    3c30:	9f 4f       	sbci	r25, 0xFF	; 255
    3c32:	fc 01       	movw	r30, r24
    3c34:	80 81       	ld	r24, Z
    3c36:	91 81       	ldd	r25, Z+1	; 0x01
    3c38:	00 97       	sbiw	r24, 0x00	; 0
    3c3a:	89 f6       	brne	.-94     	; 0x3bde <main+0x7bc>
    3c3c:	2f c0       	rjmp	.+94     	; 0x3c9c <main+0x87a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c3e:	8e 01       	movw	r16, r28
    3c40:	09 5a       	subi	r16, 0xA9	; 169
    3c42:	1f 4f       	sbci	r17, 0xFF	; 255
    3c44:	ce 01       	movw	r24, r28
    3c46:	8d 5a       	subi	r24, 0xAD	; 173
    3c48:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	60 81       	ld	r22, Z
    3c4e:	71 81       	ldd	r23, Z+1	; 0x01
    3c50:	82 81       	ldd	r24, Z+2	; 0x02
    3c52:	93 81       	ldd	r25, Z+3	; 0x03
    3c54:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    3c58:	dc 01       	movw	r26, r24
    3c5a:	cb 01       	movw	r24, r22
    3c5c:	f8 01       	movw	r30, r16
    3c5e:	91 83       	std	Z+1, r25	; 0x01
    3c60:	80 83       	st	Z, r24
    3c62:	ce 01       	movw	r24, r28
    3c64:	85 5a       	subi	r24, 0xA5	; 165
    3c66:	9f 4f       	sbci	r25, 0xFF	; 255
    3c68:	9e 01       	movw	r18, r28
    3c6a:	29 5a       	subi	r18, 0xA9	; 169
    3c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6e:	f9 01       	movw	r30, r18
    3c70:	20 81       	ld	r18, Z
    3c72:	31 81       	ldd	r19, Z+1	; 0x01
    3c74:	fc 01       	movw	r30, r24
    3c76:	31 83       	std	Z+1, r19	; 0x01
    3c78:	20 83       	st	Z, r18
    3c7a:	ce 01       	movw	r24, r28
    3c7c:	85 5a       	subi	r24, 0xA5	; 165
    3c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c80:	fc 01       	movw	r30, r24
    3c82:	80 81       	ld	r24, Z
    3c84:	91 81       	ldd	r25, Z+1	; 0x01
    3c86:	8c 01       	movw	r16, r24
    3c88:	c8 01       	movw	r24, r16
    3c8a:	01 97       	sbiw	r24, 0x01	; 1
    3c8c:	f1 f7       	brne	.-4      	; 0x3c8a <main+0x868>
    3c8e:	8c 01       	movw	r16, r24
    3c90:	ce 01       	movw	r24, r28
    3c92:	85 5a       	subi	r24, 0xA5	; 165
    3c94:	9f 4f       	sbci	r25, 0xFF	; 255
    3c96:	fc 01       	movw	r30, r24
    3c98:	11 83       	std	Z+1, r17	; 0x01
    3c9a:	00 83       	st	Z, r16
				
					_delay_ms(10);
					res = pf_open(fno.fname);
    3c9c:	ce 01       	movw	r24, r28
    3c9e:	8d 54       	subi	r24, 0x4D	; 77
    3ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca2:	09 96       	adiw	r24, 0x09	; 9
    3ca4:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <pf_open>
    3ca8:	89 83       	std	Y+1, r24	; 0x01
					if (res)
    3caa:	89 81       	ldd	r24, Y+1	; 0x01
    3cac:	88 23       	and	r24, r24
    3cae:	09 f4       	brne	.+2      	; 0x3cb2 <main+0x890>
    3cb0:	d5 c0       	rjmp	.+426    	; 0x3e5c <main+0xa3a>
					{
						StartSineTest();
    3cb2:	0e 94 bc 23 	call	0x4778	; 0x4778 <StartSineTest>
    3cb6:	9e 01       	movw	r18, r28
    3cb8:	23 5a       	subi	r18, 0xA3	; 163
    3cba:	3f 4f       	sbci	r19, 0xFF	; 255
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	aa e7       	ldi	r26, 0x7A	; 122
    3cc2:	b4 e4       	ldi	r27, 0x44	; 68
    3cc4:	f9 01       	movw	r30, r18
    3cc6:	80 83       	st	Z, r24
    3cc8:	91 83       	std	Z+1, r25	; 0x01
    3cca:	a2 83       	std	Z+2, r26	; 0x02
    3ccc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3cce:	8e 01       	movw	r16, r28
    3cd0:	0f 59       	subi	r16, 0x9F	; 159
    3cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd4:	ce 01       	movw	r24, r28
    3cd6:	83 5a       	subi	r24, 0xA3	; 163
    3cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cda:	fc 01       	movw	r30, r24
    3cdc:	60 81       	ld	r22, Z
    3cde:	71 81       	ldd	r23, Z+1	; 0x01
    3ce0:	82 81       	ldd	r24, Z+2	; 0x02
    3ce2:	93 81       	ldd	r25, Z+3	; 0x03
    3ce4:	20 e0       	ldi	r18, 0x00	; 0
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	4a e7       	ldi	r20, 0x7A	; 122
    3cea:	53 e4       	ldi	r21, 0x43	; 67
    3cec:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	f8 01       	movw	r30, r16
    3cf6:	80 83       	st	Z, r24
    3cf8:	91 83       	std	Z+1, r25	; 0x01
    3cfa:	a2 83       	std	Z+2, r26	; 0x02
    3cfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cfe:	ce 01       	movw	r24, r28
    3d00:	8f 59       	subi	r24, 0x9F	; 159
    3d02:	9f 4f       	sbci	r25, 0xFF	; 255
    3d04:	11 e0       	ldi	r17, 0x01	; 1
    3d06:	fc 01       	movw	r30, r24
    3d08:	60 81       	ld	r22, Z
    3d0a:	71 81       	ldd	r23, Z+1	; 0x01
    3d0c:	82 81       	ldd	r24, Z+2	; 0x02
    3d0e:	93 81       	ldd	r25, Z+3	; 0x03
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	40 e8       	ldi	r20, 0x80	; 128
    3d16:	5f e3       	ldi	r21, 0x3F	; 63
    3d18:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    3d1c:	88 23       	and	r24, r24
    3d1e:	0c f0       	brlt	.+2      	; 0x3d22 <main+0x900>
    3d20:	10 e0       	ldi	r17, 0x00	; 0
    3d22:	11 23       	and	r17, r17
    3d24:	49 f0       	breq	.+18     	; 0x3d38 <main+0x916>
		__ticks = 1;
    3d26:	ce 01       	movw	r24, r28
    3d28:	8b 59       	subi	r24, 0x9B	; 155
    3d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d2c:	21 e0       	ldi	r18, 0x01	; 1
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	fc 01       	movw	r30, r24
    3d32:	31 83       	std	Z+1, r19	; 0x01
    3d34:	20 83       	st	Z, r18
    3d36:	74 c0       	rjmp	.+232    	; 0x3e20 <main+0x9fe>
	else if (__tmp > 65535)
    3d38:	ce 01       	movw	r24, r28
    3d3a:	8f 59       	subi	r24, 0x9F	; 159
    3d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d3e:	11 e0       	ldi	r17, 0x01	; 1
    3d40:	fc 01       	movw	r30, r24
    3d42:	60 81       	ld	r22, Z
    3d44:	71 81       	ldd	r23, Z+1	; 0x01
    3d46:	82 81       	ldd	r24, Z+2	; 0x02
    3d48:	93 81       	ldd	r25, Z+3	; 0x03
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	3f ef       	ldi	r19, 0xFF	; 255
    3d4e:	4f e7       	ldi	r20, 0x7F	; 127
    3d50:	57 e4       	ldi	r21, 0x47	; 71
    3d52:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    3d56:	18 16       	cp	r1, r24
    3d58:	0c f0       	brlt	.+2      	; 0x3d5c <main+0x93a>
    3d5a:	10 e0       	ldi	r17, 0x00	; 0
    3d5c:	11 23       	and	r17, r17
    3d5e:	09 f4       	brne	.+2      	; 0x3d62 <main+0x940>
    3d60:	4d c0       	rjmp	.+154    	; 0x3dfc <main+0x9da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d62:	ce 01       	movw	r24, r28
    3d64:	83 5a       	subi	r24, 0xA3	; 163
    3d66:	9f 4f       	sbci	r25, 0xFF	; 255
    3d68:	fc 01       	movw	r30, r24
    3d6a:	60 81       	ld	r22, Z
    3d6c:	71 81       	ldd	r23, Z+1	; 0x01
    3d6e:	82 81       	ldd	r24, Z+2	; 0x02
    3d70:	93 81       	ldd	r25, Z+3	; 0x03
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	40 e2       	ldi	r20, 0x20	; 32
    3d78:	51 e4       	ldi	r21, 0x41	; 65
    3d7a:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    3d7e:	dc 01       	movw	r26, r24
    3d80:	cb 01       	movw	r24, r22
    3d82:	8e 01       	movw	r16, r28
    3d84:	0b 59       	subi	r16, 0x9B	; 155
    3d86:	1f 4f       	sbci	r17, 0xFF	; 255
    3d88:	bc 01       	movw	r22, r24
    3d8a:	cd 01       	movw	r24, r26
    3d8c:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    3d90:	dc 01       	movw	r26, r24
    3d92:	cb 01       	movw	r24, r22
    3d94:	f8 01       	movw	r30, r16
    3d96:	91 83       	std	Z+1, r25	; 0x01
    3d98:	80 83       	st	Z, r24
    3d9a:	27 c0       	rjmp	.+78     	; 0x3dea <main+0x9c8>
    3d9c:	ce 01       	movw	r24, r28
    3d9e:	89 59       	subi	r24, 0x99	; 153
    3da0:	9f 4f       	sbci	r25, 0xFF	; 255
    3da2:	29 e1       	ldi	r18, 0x19	; 25
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	fc 01       	movw	r30, r24
    3da8:	31 83       	std	Z+1, r19	; 0x01
    3daa:	20 83       	st	Z, r18
    3dac:	ce 01       	movw	r24, r28
    3dae:	89 59       	subi	r24, 0x99	; 153
    3db0:	9f 4f       	sbci	r25, 0xFF	; 255
    3db2:	fc 01       	movw	r30, r24
    3db4:	80 81       	ld	r24, Z
    3db6:	91 81       	ldd	r25, Z+1	; 0x01
    3db8:	8c 01       	movw	r16, r24
    3dba:	c8 01       	movw	r24, r16
    3dbc:	01 97       	sbiw	r24, 0x01	; 1
    3dbe:	f1 f7       	brne	.-4      	; 0x3dbc <main+0x99a>
    3dc0:	8c 01       	movw	r16, r24
    3dc2:	ce 01       	movw	r24, r28
    3dc4:	89 59       	subi	r24, 0x99	; 153
    3dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc8:	fc 01       	movw	r30, r24
    3dca:	11 83       	std	Z+1, r17	; 0x01
    3dcc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dce:	ce 01       	movw	r24, r28
    3dd0:	8b 59       	subi	r24, 0x9B	; 155
    3dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd4:	9e 01       	movw	r18, r28
    3dd6:	2b 59       	subi	r18, 0x9B	; 155
    3dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dda:	f9 01       	movw	r30, r18
    3ddc:	20 81       	ld	r18, Z
    3dde:	31 81       	ldd	r19, Z+1	; 0x01
    3de0:	21 50       	subi	r18, 0x01	; 1
    3de2:	30 40       	sbci	r19, 0x00	; 0
    3de4:	fc 01       	movw	r30, r24
    3de6:	31 83       	std	Z+1, r19	; 0x01
    3de8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dea:	ce 01       	movw	r24, r28
    3dec:	8b 59       	subi	r24, 0x9B	; 155
    3dee:	9f 4f       	sbci	r25, 0xFF	; 255
    3df0:	fc 01       	movw	r30, r24
    3df2:	80 81       	ld	r24, Z
    3df4:	91 81       	ldd	r25, Z+1	; 0x01
    3df6:	00 97       	sbiw	r24, 0x00	; 0
    3df8:	89 f6       	brne	.-94     	; 0x3d9c <main+0x97a>
    3dfa:	33 c0       	rjmp	.+102    	; 0x3e62 <main+0xa40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dfc:	8e 01       	movw	r16, r28
    3dfe:	0b 59       	subi	r16, 0x9B	; 155
    3e00:	1f 4f       	sbci	r17, 0xFF	; 255
    3e02:	ce 01       	movw	r24, r28
    3e04:	8f 59       	subi	r24, 0x9F	; 159
    3e06:	9f 4f       	sbci	r25, 0xFF	; 255
    3e08:	fc 01       	movw	r30, r24
    3e0a:	60 81       	ld	r22, Z
    3e0c:	71 81       	ldd	r23, Z+1	; 0x01
    3e0e:	82 81       	ldd	r24, Z+2	; 0x02
    3e10:	93 81       	ldd	r25, Z+3	; 0x03
    3e12:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    3e16:	dc 01       	movw	r26, r24
    3e18:	cb 01       	movw	r24, r22
    3e1a:	f8 01       	movw	r30, r16
    3e1c:	91 83       	std	Z+1, r25	; 0x01
    3e1e:	80 83       	st	Z, r24
    3e20:	ce 01       	movw	r24, r28
    3e22:	87 59       	subi	r24, 0x97	; 151
    3e24:	9f 4f       	sbci	r25, 0xFF	; 255
    3e26:	9e 01       	movw	r18, r28
    3e28:	2b 59       	subi	r18, 0x9B	; 155
    3e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2c:	f9 01       	movw	r30, r18
    3e2e:	20 81       	ld	r18, Z
    3e30:	31 81       	ldd	r19, Z+1	; 0x01
    3e32:	fc 01       	movw	r30, r24
    3e34:	31 83       	std	Z+1, r19	; 0x01
    3e36:	20 83       	st	Z, r18
    3e38:	ce 01       	movw	r24, r28
    3e3a:	87 59       	subi	r24, 0x97	; 151
    3e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e3e:	fc 01       	movw	r30, r24
    3e40:	80 81       	ld	r24, Z
    3e42:	91 81       	ldd	r25, Z+1	; 0x01
    3e44:	8c 01       	movw	r16, r24
    3e46:	c8 01       	movw	r24, r16
    3e48:	01 97       	sbiw	r24, 0x01	; 1
    3e4a:	f1 f7       	brne	.-4      	; 0x3e48 <main+0xa26>
    3e4c:	8c 01       	movw	r16, r24
    3e4e:	ce 01       	movw	r24, r28
    3e50:	87 59       	subi	r24, 0x97	; 151
    3e52:	9f 4f       	sbci	r25, 0xFF	; 255
    3e54:	fc 01       	movw	r30, r24
    3e56:	11 83       	std	Z+1, r17	; 0x01
    3e58:	00 83       	st	Z, r16
					}
					else
					{
						PlayFile();
					}
				}
    3e5a:	32 ce       	rjmp	.-924    	; 0x3ac0 <main+0x69e>
						StartSineTest();
						_delay_ms(1000);
					}
					else
					{
						PlayFile();
    3e5c:	0e 94 46 18 	call	0x308c	; 0x308c <PlayFile>
					}
				}
    3e60:	2f ce       	rjmp	.-930    	; 0x3ac0 <main+0x69e>
    3e62:	2e ce       	rjmp	.-932    	; 0x3ac0 <main+0x69e>
	}
	else
	{

	}
	StartSineTest();
    3e64:	0e 94 bc 23 	call	0x4778	; 0x4778 <StartSineTest>
    3e68:	9e 01       	movw	r18, r28
    3e6a:	25 59       	subi	r18, 0x95	; 149
    3e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	aa ef       	ldi	r26, 0xFA	; 250
    3e74:	b4 e4       	ldi	r27, 0x44	; 68
    3e76:	f9 01       	movw	r30, r18
    3e78:	80 83       	st	Z, r24
    3e7a:	91 83       	std	Z+1, r25	; 0x01
    3e7c:	a2 83       	std	Z+2, r26	; 0x02
    3e7e:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3e80:	8e 01       	movw	r16, r28
    3e82:	01 59       	subi	r16, 0x91	; 145
    3e84:	1f 4f       	sbci	r17, 0xFF	; 255
    3e86:	ce 01       	movw	r24, r28
    3e88:	85 59       	subi	r24, 0x95	; 149
    3e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e8c:	fc 01       	movw	r30, r24
    3e8e:	60 81       	ld	r22, Z
    3e90:	71 81       	ldd	r23, Z+1	; 0x01
    3e92:	82 81       	ldd	r24, Z+2	; 0x02
    3e94:	93 81       	ldd	r25, Z+3	; 0x03
    3e96:	20 e0       	ldi	r18, 0x00	; 0
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	4a e7       	ldi	r20, 0x7A	; 122
    3e9c:	53 e4       	ldi	r21, 0x43	; 67
    3e9e:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	f8 01       	movw	r30, r16
    3ea8:	80 83       	st	Z, r24
    3eaa:	91 83       	std	Z+1, r25	; 0x01
    3eac:	a2 83       	std	Z+2, r26	; 0x02
    3eae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3eb0:	ce 01       	movw	r24, r28
    3eb2:	81 59       	subi	r24, 0x91	; 145
    3eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb6:	11 e0       	ldi	r17, 0x01	; 1
    3eb8:	fc 01       	movw	r30, r24
    3eba:	60 81       	ld	r22, Z
    3ebc:	71 81       	ldd	r23, Z+1	; 0x01
    3ebe:	82 81       	ldd	r24, Z+2	; 0x02
    3ec0:	93 81       	ldd	r25, Z+3	; 0x03
    3ec2:	20 e0       	ldi	r18, 0x00	; 0
    3ec4:	30 e0       	ldi	r19, 0x00	; 0
    3ec6:	40 e8       	ldi	r20, 0x80	; 128
    3ec8:	5f e3       	ldi	r21, 0x3F	; 63
    3eca:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    3ece:	88 23       	and	r24, r24
    3ed0:	0c f0       	brlt	.+2      	; 0x3ed4 <main+0xab2>
    3ed2:	10 e0       	ldi	r17, 0x00	; 0
    3ed4:	11 23       	and	r17, r17
    3ed6:	49 f0       	breq	.+18     	; 0x3eea <main+0xac8>
		__ticks = 1;
    3ed8:	ce 01       	movw	r24, r28
    3eda:	8d 58       	subi	r24, 0x8D	; 141
    3edc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ede:	21 e0       	ldi	r18, 0x01	; 1
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	fc 01       	movw	r30, r24
    3ee4:	31 83       	std	Z+1, r19	; 0x01
    3ee6:	20 83       	st	Z, r18
    3ee8:	74 c0       	rjmp	.+232    	; 0x3fd2 <main+0xbb0>
	else if (__tmp > 65535)
    3eea:	ce 01       	movw	r24, r28
    3eec:	81 59       	subi	r24, 0x91	; 145
    3eee:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef0:	11 e0       	ldi	r17, 0x01	; 1
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	60 81       	ld	r22, Z
    3ef6:	71 81       	ldd	r23, Z+1	; 0x01
    3ef8:	82 81       	ldd	r24, Z+2	; 0x02
    3efa:	93 81       	ldd	r25, Z+3	; 0x03
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	3f ef       	ldi	r19, 0xFF	; 255
    3f00:	4f e7       	ldi	r20, 0x7F	; 127
    3f02:	57 e4       	ldi	r21, 0x47	; 71
    3f04:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    3f08:	18 16       	cp	r1, r24
    3f0a:	0c f0       	brlt	.+2      	; 0x3f0e <main+0xaec>
    3f0c:	10 e0       	ldi	r17, 0x00	; 0
    3f0e:	11 23       	and	r17, r17
    3f10:	09 f4       	brne	.+2      	; 0x3f14 <main+0xaf2>
    3f12:	4d c0       	rjmp	.+154    	; 0x3fae <main+0xb8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f14:	ce 01       	movw	r24, r28
    3f16:	85 59       	subi	r24, 0x95	; 149
    3f18:	9f 4f       	sbci	r25, 0xFF	; 255
    3f1a:	fc 01       	movw	r30, r24
    3f1c:	60 81       	ld	r22, Z
    3f1e:	71 81       	ldd	r23, Z+1	; 0x01
    3f20:	82 81       	ldd	r24, Z+2	; 0x02
    3f22:	93 81       	ldd	r25, Z+3	; 0x03
    3f24:	20 e0       	ldi	r18, 0x00	; 0
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	40 e2       	ldi	r20, 0x20	; 32
    3f2a:	51 e4       	ldi	r21, 0x41	; 65
    3f2c:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    3f30:	dc 01       	movw	r26, r24
    3f32:	cb 01       	movw	r24, r22
    3f34:	8e 01       	movw	r16, r28
    3f36:	0d 58       	subi	r16, 0x8D	; 141
    3f38:	1f 4f       	sbci	r17, 0xFF	; 255
    3f3a:	bc 01       	movw	r22, r24
    3f3c:	cd 01       	movw	r24, r26
    3f3e:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	f8 01       	movw	r30, r16
    3f48:	91 83       	std	Z+1, r25	; 0x01
    3f4a:	80 83       	st	Z, r24
    3f4c:	27 c0       	rjmp	.+78     	; 0x3f9c <main+0xb7a>
    3f4e:	ce 01       	movw	r24, r28
    3f50:	8b 58       	subi	r24, 0x8B	; 139
    3f52:	9f 4f       	sbci	r25, 0xFF	; 255
    3f54:	29 e1       	ldi	r18, 0x19	; 25
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	fc 01       	movw	r30, r24
    3f5a:	31 83       	std	Z+1, r19	; 0x01
    3f5c:	20 83       	st	Z, r18
    3f5e:	ce 01       	movw	r24, r28
    3f60:	8b 58       	subi	r24, 0x8B	; 139
    3f62:	9f 4f       	sbci	r25, 0xFF	; 255
    3f64:	fc 01       	movw	r30, r24
    3f66:	80 81       	ld	r24, Z
    3f68:	91 81       	ldd	r25, Z+1	; 0x01
    3f6a:	8c 01       	movw	r16, r24
    3f6c:	c8 01       	movw	r24, r16
    3f6e:	01 97       	sbiw	r24, 0x01	; 1
    3f70:	f1 f7       	brne	.-4      	; 0x3f6e <main+0xb4c>
    3f72:	8c 01       	movw	r16, r24
    3f74:	ce 01       	movw	r24, r28
    3f76:	8b 58       	subi	r24, 0x8B	; 139
    3f78:	9f 4f       	sbci	r25, 0xFF	; 255
    3f7a:	fc 01       	movw	r30, r24
    3f7c:	11 83       	std	Z+1, r17	; 0x01
    3f7e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f80:	ce 01       	movw	r24, r28
    3f82:	8d 58       	subi	r24, 0x8D	; 141
    3f84:	9f 4f       	sbci	r25, 0xFF	; 255
    3f86:	9e 01       	movw	r18, r28
    3f88:	2d 58       	subi	r18, 0x8D	; 141
    3f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f8c:	f9 01       	movw	r30, r18
    3f8e:	20 81       	ld	r18, Z
    3f90:	31 81       	ldd	r19, Z+1	; 0x01
    3f92:	21 50       	subi	r18, 0x01	; 1
    3f94:	30 40       	sbci	r19, 0x00	; 0
    3f96:	fc 01       	movw	r30, r24
    3f98:	31 83       	std	Z+1, r19	; 0x01
    3f9a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f9c:	ce 01       	movw	r24, r28
    3f9e:	8d 58       	subi	r24, 0x8D	; 141
    3fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fa2:	fc 01       	movw	r30, r24
    3fa4:	80 81       	ld	r24, Z
    3fa6:	91 81       	ldd	r25, Z+1	; 0x01
    3fa8:	00 97       	sbiw	r24, 0x00	; 0
    3faa:	89 f6       	brne	.-94     	; 0x3f4e <main+0xb2c>
    3fac:	2f c0       	rjmp	.+94     	; 0x400c <main+0xbea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fae:	8e 01       	movw	r16, r28
    3fb0:	0d 58       	subi	r16, 0x8D	; 141
    3fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb4:	ce 01       	movw	r24, r28
    3fb6:	81 59       	subi	r24, 0x91	; 145
    3fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3fba:	fc 01       	movw	r30, r24
    3fbc:	60 81       	ld	r22, Z
    3fbe:	71 81       	ldd	r23, Z+1	; 0x01
    3fc0:	82 81       	ldd	r24, Z+2	; 0x02
    3fc2:	93 81       	ldd	r25, Z+3	; 0x03
    3fc4:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    3fc8:	dc 01       	movw	r26, r24
    3fca:	cb 01       	movw	r24, r22
    3fcc:	f8 01       	movw	r30, r16
    3fce:	91 83       	std	Z+1, r25	; 0x01
    3fd0:	80 83       	st	Z, r24
    3fd2:	ce 01       	movw	r24, r28
    3fd4:	89 58       	subi	r24, 0x89	; 137
    3fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd8:	9e 01       	movw	r18, r28
    3fda:	2d 58       	subi	r18, 0x8D	; 141
    3fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    3fde:	f9 01       	movw	r30, r18
    3fe0:	20 81       	ld	r18, Z
    3fe2:	31 81       	ldd	r19, Z+1	; 0x01
    3fe4:	fc 01       	movw	r30, r24
    3fe6:	31 83       	std	Z+1, r19	; 0x01
    3fe8:	20 83       	st	Z, r18
    3fea:	ce 01       	movw	r24, r28
    3fec:	89 58       	subi	r24, 0x89	; 137
    3fee:	9f 4f       	sbci	r25, 0xFF	; 255
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	80 81       	ld	r24, Z
    3ff4:	91 81       	ldd	r25, Z+1	; 0x01
    3ff6:	8c 01       	movw	r16, r24
    3ff8:	c8 01       	movw	r24, r16
    3ffa:	01 97       	sbiw	r24, 0x01	; 1
    3ffc:	f1 f7       	brne	.-4      	; 0x3ffa <main+0xbd8>
    3ffe:	8c 01       	movw	r16, r24
    4000:	ce 01       	movw	r24, r28
    4002:	89 58       	subi	r24, 0x89	; 137
    4004:	9f 4f       	sbci	r25, 0xFF	; 255
    4006:	fc 01       	movw	r30, r24
    4008:	11 83       	std	Z+1, r17	; 0x01
    400a:	00 83       	st	Z, r16
	_delay_ms(2000);
	
    while(1)
    {
    }
    400c:	ff cf       	rjmp	.-2      	; 0x400c <main+0xbea>

0000400e <InitVS1011e>:
//#define BSYNC	PD3
//
//void WriteData(uint8_t address, uint16_t data);

void InitVS1011e()
{
    400e:	0f 93       	push	r16
    4010:	1f 93       	push	r17
    4012:	cf 93       	push	r28
    4014:	df 93       	push	r29
    4016:	cd b7       	in	r28, 0x3d	; 61
    4018:	de b7       	in	r29, 0x3e	; 62
    401a:	6c 97       	sbiw	r28, 0x1c	; 28
    401c:	0f b6       	in	r0, 0x3f	; 63
    401e:	f8 94       	cli
    4020:	de bf       	out	0x3e, r29	; 62
    4022:	0f be       	out	0x3f, r0	; 63
    4024:	cd bf       	out	0x3d, r28	; 61
	
//	WriteCommand(0x00, SOFT_RESET);
	
//	_delay_ms(5);
	
	WriteCommand(0x00, VS1002_NATIVE_MODE | SM_TESTS); // enable VS1002 native SPI mode
    4026:	27 e2       	ldi	r18, 0x27	; 39
    4028:	33 e2       	ldi	r19, 0x23	; 35
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	60 e2       	ldi	r22, 0x20	; 32
    4030:	78 e0       	ldi	r23, 0x08	; 8
    4032:	f9 01       	movw	r30, r18
    4034:	09 95       	icall
    4036:	80 e0       	ldi	r24, 0x00	; 0
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	a0 e8       	ldi	r26, 0x80	; 128
    403c:	bf e3       	ldi	r27, 0x3F	; 63
    403e:	89 83       	std	Y+1, r24	; 0x01
    4040:	9a 83       	std	Y+2, r25	; 0x02
    4042:	ab 83       	std	Y+3, r26	; 0x03
    4044:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4046:	69 81       	ldd	r22, Y+1	; 0x01
    4048:	7a 81       	ldd	r23, Y+2	; 0x02
    404a:	8b 81       	ldd	r24, Y+3	; 0x03
    404c:	9c 81       	ldd	r25, Y+4	; 0x04
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	4a e7       	ldi	r20, 0x7A	; 122
    4054:	53 e4       	ldi	r21, 0x43	; 67
    4056:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    405a:	dc 01       	movw	r26, r24
    405c:	cb 01       	movw	r24, r22
    405e:	8d 83       	std	Y+5, r24	; 0x05
    4060:	9e 83       	std	Y+6, r25	; 0x06
    4062:	af 83       	std	Y+7, r26	; 0x07
    4064:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4066:	11 e0       	ldi	r17, 0x01	; 1
    4068:	6d 81       	ldd	r22, Y+5	; 0x05
    406a:	7e 81       	ldd	r23, Y+6	; 0x06
    406c:	8f 81       	ldd	r24, Y+7	; 0x07
    406e:	98 85       	ldd	r25, Y+8	; 0x08
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	40 e8       	ldi	r20, 0x80	; 128
    4076:	5f e3       	ldi	r21, 0x3F	; 63
    4078:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    407c:	88 23       	and	r24, r24
    407e:	0c f0       	brlt	.+2      	; 0x4082 <InitVS1011e+0x74>
    4080:	10 e0       	ldi	r17, 0x00	; 0
    4082:	11 23       	and	r17, r17
    4084:	29 f0       	breq	.+10     	; 0x4090 <InitVS1011e+0x82>
		__ticks = 1;
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	9a 87       	std	Y+10, r25	; 0x0a
    408c:	89 87       	std	Y+9, r24	; 0x09
    408e:	46 c0       	rjmp	.+140    	; 0x411c <InitVS1011e+0x10e>
	else if (__tmp > 65535)
    4090:	11 e0       	ldi	r17, 0x01	; 1
    4092:	6d 81       	ldd	r22, Y+5	; 0x05
    4094:	7e 81       	ldd	r23, Y+6	; 0x06
    4096:	8f 81       	ldd	r24, Y+7	; 0x07
    4098:	98 85       	ldd	r25, Y+8	; 0x08
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	3f ef       	ldi	r19, 0xFF	; 255
    409e:	4f e7       	ldi	r20, 0x7F	; 127
    40a0:	57 e4       	ldi	r21, 0x47	; 71
    40a2:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    40a6:	18 16       	cp	r1, r24
    40a8:	0c f0       	brlt	.+2      	; 0x40ac <InitVS1011e+0x9e>
    40aa:	10 e0       	ldi	r17, 0x00	; 0
    40ac:	11 23       	and	r17, r17
    40ae:	61 f1       	breq	.+88     	; 0x4108 <InitVS1011e+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40b0:	69 81       	ldd	r22, Y+1	; 0x01
    40b2:	7a 81       	ldd	r23, Y+2	; 0x02
    40b4:	8b 81       	ldd	r24, Y+3	; 0x03
    40b6:	9c 81       	ldd	r25, Y+4	; 0x04
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	40 e2       	ldi	r20, 0x20	; 32
    40be:	51 e4       	ldi	r21, 0x41	; 65
    40c0:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	bc 01       	movw	r22, r24
    40ca:	cd 01       	movw	r24, r26
    40cc:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    40d0:	dc 01       	movw	r26, r24
    40d2:	cb 01       	movw	r24, r22
    40d4:	9a 87       	std	Y+10, r25	; 0x0a
    40d6:	89 87       	std	Y+9, r24	; 0x09
    40d8:	12 c0       	rjmp	.+36     	; 0x40fe <InitVS1011e+0xf0>
    40da:	89 e1       	ldi	r24, 0x19	; 25
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	9c 87       	std	Y+12, r25	; 0x0c
    40e0:	8b 87       	std	Y+11, r24	; 0x0b
    40e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    40e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    40e6:	8c 01       	movw	r16, r24
    40e8:	c8 01       	movw	r24, r16
    40ea:	01 97       	sbiw	r24, 0x01	; 1
    40ec:	f1 f7       	brne	.-4      	; 0x40ea <InitVS1011e+0xdc>
    40ee:	8c 01       	movw	r16, r24
    40f0:	1c 87       	std	Y+12, r17	; 0x0c
    40f2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40f4:	89 85       	ldd	r24, Y+9	; 0x09
    40f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    40f8:	01 97       	sbiw	r24, 0x01	; 1
    40fa:	9a 87       	std	Y+10, r25	; 0x0a
    40fc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40fe:	89 85       	ldd	r24, Y+9	; 0x09
    4100:	9a 85       	ldd	r25, Y+10	; 0x0a
    4102:	00 97       	sbiw	r24, 0x00	; 0
    4104:	51 f7       	brne	.-44     	; 0x40da <InitVS1011e+0xcc>
    4106:	17 c0       	rjmp	.+46     	; 0x4136 <InitVS1011e+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4108:	6d 81       	ldd	r22, Y+5	; 0x05
    410a:	7e 81       	ldd	r23, Y+6	; 0x06
    410c:	8f 81       	ldd	r24, Y+7	; 0x07
    410e:	98 85       	ldd	r25, Y+8	; 0x08
    4110:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    4114:	dc 01       	movw	r26, r24
    4116:	cb 01       	movw	r24, r22
    4118:	9a 87       	std	Y+10, r25	; 0x0a
    411a:	89 87       	std	Y+9, r24	; 0x09
    411c:	89 85       	ldd	r24, Y+9	; 0x09
    411e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4120:	9e 87       	std	Y+14, r25	; 0x0e
    4122:	8d 87       	std	Y+13, r24	; 0x0d
    4124:	8d 85       	ldd	r24, Y+13	; 0x0d
    4126:	9e 85       	ldd	r25, Y+14	; 0x0e
    4128:	8c 01       	movw	r16, r24
    412a:	c8 01       	movw	r24, r16
    412c:	01 97       	sbiw	r24, 0x01	; 1
    412e:	f1 f7       	brne	.-4      	; 0x412c <InitVS1011e+0x11e>
    4130:	8c 01       	movw	r16, r24
    4132:	1e 87       	std	Y+14, r17	; 0x0e
    4134:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);
	
	WriteCommand(0x03, XTAL_VALUE);	// set XTAL to 12.288MHz
    4136:	27 e2       	ldi	r18, 0x27	; 39
    4138:	33 e2       	ldi	r19, 0x23	; 35
    413a:	83 e0       	ldi	r24, 0x03	; 3
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	60 e0       	ldi	r22, 0x00	; 0
    4140:	78 e9       	ldi	r23, 0x98	; 152
    4142:	f9 01       	movw	r30, r18
    4144:	09 95       	icall
    4146:	80 e0       	ldi	r24, 0x00	; 0
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	a0 e8       	ldi	r26, 0x80	; 128
    414c:	bf e3       	ldi	r27, 0x3F	; 63
    414e:	8f 87       	std	Y+15, r24	; 0x0f
    4150:	98 8b       	std	Y+16, r25	; 0x10
    4152:	a9 8b       	std	Y+17, r26	; 0x11
    4154:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4156:	6f 85       	ldd	r22, Y+15	; 0x0f
    4158:	78 89       	ldd	r23, Y+16	; 0x10
    415a:	89 89       	ldd	r24, Y+17	; 0x11
    415c:	9a 89       	ldd	r25, Y+18	; 0x12
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	30 e0       	ldi	r19, 0x00	; 0
    4162:	4a e7       	ldi	r20, 0x7A	; 122
    4164:	53 e4       	ldi	r21, 0x43	; 67
    4166:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    416a:	dc 01       	movw	r26, r24
    416c:	cb 01       	movw	r24, r22
    416e:	8b 8b       	std	Y+19, r24	; 0x13
    4170:	9c 8b       	std	Y+20, r25	; 0x14
    4172:	ad 8b       	std	Y+21, r26	; 0x15
    4174:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4176:	11 e0       	ldi	r17, 0x01	; 1
    4178:	6b 89       	ldd	r22, Y+19	; 0x13
    417a:	7c 89       	ldd	r23, Y+20	; 0x14
    417c:	8d 89       	ldd	r24, Y+21	; 0x15
    417e:	9e 89       	ldd	r25, Y+22	; 0x16
    4180:	20 e0       	ldi	r18, 0x00	; 0
    4182:	30 e0       	ldi	r19, 0x00	; 0
    4184:	40 e8       	ldi	r20, 0x80	; 128
    4186:	5f e3       	ldi	r21, 0x3F	; 63
    4188:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    418c:	88 23       	and	r24, r24
    418e:	0c f0       	brlt	.+2      	; 0x4192 <InitVS1011e+0x184>
    4190:	10 e0       	ldi	r17, 0x00	; 0
    4192:	11 23       	and	r17, r17
    4194:	29 f0       	breq	.+10     	; 0x41a0 <InitVS1011e+0x192>
		__ticks = 1;
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	98 8f       	std	Y+24, r25	; 0x18
    419c:	8f 8b       	std	Y+23, r24	; 0x17
    419e:	46 c0       	rjmp	.+140    	; 0x422c <InitVS1011e+0x21e>
	else if (__tmp > 65535)
    41a0:	11 e0       	ldi	r17, 0x01	; 1
    41a2:	6b 89       	ldd	r22, Y+19	; 0x13
    41a4:	7c 89       	ldd	r23, Y+20	; 0x14
    41a6:	8d 89       	ldd	r24, Y+21	; 0x15
    41a8:	9e 89       	ldd	r25, Y+22	; 0x16
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	3f ef       	ldi	r19, 0xFF	; 255
    41ae:	4f e7       	ldi	r20, 0x7F	; 127
    41b0:	57 e4       	ldi	r21, 0x47	; 71
    41b2:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    41b6:	18 16       	cp	r1, r24
    41b8:	0c f0       	brlt	.+2      	; 0x41bc <InitVS1011e+0x1ae>
    41ba:	10 e0       	ldi	r17, 0x00	; 0
    41bc:	11 23       	and	r17, r17
    41be:	61 f1       	breq	.+88     	; 0x4218 <InitVS1011e+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    41c2:	78 89       	ldd	r23, Y+16	; 0x10
    41c4:	89 89       	ldd	r24, Y+17	; 0x11
    41c6:	9a 89       	ldd	r25, Y+18	; 0x12
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	40 e2       	ldi	r20, 0x20	; 32
    41ce:	51 e4       	ldi	r21, 0x41	; 65
    41d0:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	bc 01       	movw	r22, r24
    41da:	cd 01       	movw	r24, r26
    41dc:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    41e0:	dc 01       	movw	r26, r24
    41e2:	cb 01       	movw	r24, r22
    41e4:	98 8f       	std	Y+24, r25	; 0x18
    41e6:	8f 8b       	std	Y+23, r24	; 0x17
    41e8:	12 c0       	rjmp	.+36     	; 0x420e <InitVS1011e+0x200>
    41ea:	89 e1       	ldi	r24, 0x19	; 25
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	9a 8f       	std	Y+26, r25	; 0x1a
    41f0:	89 8f       	std	Y+25, r24	; 0x19
    41f2:	89 8d       	ldd	r24, Y+25	; 0x19
    41f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    41f6:	8c 01       	movw	r16, r24
    41f8:	c8 01       	movw	r24, r16
    41fa:	01 97       	sbiw	r24, 0x01	; 1
    41fc:	f1 f7       	brne	.-4      	; 0x41fa <InitVS1011e+0x1ec>
    41fe:	8c 01       	movw	r16, r24
    4200:	1a 8f       	std	Y+26, r17	; 0x1a
    4202:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4204:	8f 89       	ldd	r24, Y+23	; 0x17
    4206:	98 8d       	ldd	r25, Y+24	; 0x18
    4208:	01 97       	sbiw	r24, 0x01	; 1
    420a:	98 8f       	std	Y+24, r25	; 0x18
    420c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    420e:	8f 89       	ldd	r24, Y+23	; 0x17
    4210:	98 8d       	ldd	r25, Y+24	; 0x18
    4212:	00 97       	sbiw	r24, 0x00	; 0
    4214:	51 f7       	brne	.-44     	; 0x41ea <InitVS1011e+0x1dc>
    4216:	17 c0       	rjmp	.+46     	; 0x4246 <InitVS1011e+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4218:	6b 89       	ldd	r22, Y+19	; 0x13
    421a:	7c 89       	ldd	r23, Y+20	; 0x14
    421c:	8d 89       	ldd	r24, Y+21	; 0x15
    421e:	9e 89       	ldd	r25, Y+22	; 0x16
    4220:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    4224:	dc 01       	movw	r26, r24
    4226:	cb 01       	movw	r24, r22
    4228:	98 8f       	std	Y+24, r25	; 0x18
    422a:	8f 8b       	std	Y+23, r24	; 0x17
    422c:	8f 89       	ldd	r24, Y+23	; 0x17
    422e:	98 8d       	ldd	r25, Y+24	; 0x18
    4230:	9c 8f       	std	Y+28, r25	; 0x1c
    4232:	8b 8f       	std	Y+27, r24	; 0x1b
    4234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4238:	8c 01       	movw	r16, r24
    423a:	c8 01       	movw	r24, r16
    423c:	01 97       	sbiw	r24, 0x01	; 1
    423e:	f1 f7       	brne	.-4      	; 0x423c <InitVS1011e+0x22e>
    4240:	8c 01       	movw	r16, r24
    4242:	1c 8f       	std	Y+28, r17	; 0x1c
    4244:	0b 8f       	std	Y+27, r16	; 0x1b
	
	_delay_ms(1);
}
    4246:	6c 96       	adiw	r28, 0x1c	; 28
    4248:	0f b6       	in	r0, 0x3f	; 63
    424a:	f8 94       	cli
    424c:	de bf       	out	0x3e, r29	; 62
    424e:	0f be       	out	0x3f, r0	; 63
    4250:	cd bf       	out	0x3d, r28	; 61
    4252:	df 91       	pop	r29
    4254:	cf 91       	pop	r28
    4256:	1f 91       	pop	r17
    4258:	0f 91       	pop	r16
    425a:	08 95       	ret

0000425c <SendNulls>:

void SendNulls(uint16_t number)
{
    425c:	cf 93       	push	r28
    425e:	df 93       	push	r29
    4260:	00 d0       	rcall	.+0      	; 0x4262 <SendNulls+0x6>
    4262:	cd b7       	in	r28, 0x3d	; 61
    4264:	de b7       	in	r29, 0x3e	; 62
    4266:	9a 83       	std	Y+2, r25	; 0x02
    4268:	89 83       	std	Y+1, r24	; 0x01
	while(number-- > 0)
    426a:	03 c0       	rjmp	.+6      	; 0x4272 <SendNulls+0x16>
	{
		WriteMP3DataByte(0x00);
    426c:	80 e0       	ldi	r24, 0x00	; 0
    426e:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	_delay_ms(1);
}

void SendNulls(uint16_t number)
{
	while(number-- > 0)
    4272:	21 e0       	ldi	r18, 0x01	; 1
    4274:	89 81       	ldd	r24, Y+1	; 0x01
    4276:	9a 81       	ldd	r25, Y+2	; 0x02
    4278:	00 97       	sbiw	r24, 0x00	; 0
    427a:	09 f4       	brne	.+2      	; 0x427e <SendNulls+0x22>
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	89 81       	ldd	r24, Y+1	; 0x01
    4280:	9a 81       	ldd	r25, Y+2	; 0x02
    4282:	01 97       	sbiw	r24, 0x01	; 1
    4284:	9a 83       	std	Y+2, r25	; 0x02
    4286:	89 83       	std	Y+1, r24	; 0x01
    4288:	22 23       	and	r18, r18
    428a:	81 f7       	brne	.-32     	; 0x426c <SendNulls+0x10>
	{
		WriteMP3DataByte(0x00);
	}
}
    428c:	0f 90       	pop	r0
    428e:	0f 90       	pop	r0
    4290:	df 91       	pop	r29
    4292:	cf 91       	pop	r28
    4294:	08 95       	ret

00004296 <SoftwareReset>:

void SoftwareReset()
{
    4296:	0f 93       	push	r16
    4298:	1f 93       	push	r17
    429a:	cf 93       	push	r28
    429c:	df 93       	push	r29
    429e:	cd b7       	in	r28, 0x3d	; 61
    42a0:	de b7       	in	r29, 0x3e	; 62
    42a2:	2e 97       	sbiw	r28, 0x0e	; 14
    42a4:	0f b6       	in	r0, 0x3f	; 63
    42a6:	f8 94       	cli
    42a8:	de bf       	out	0x3e, r29	; 62
    42aa:	0f be       	out	0x3f, r0	; 63
    42ac:	cd bf       	out	0x3d, r28	; 61
	WriteCommand(0x00, 0x0004);
    42ae:	27 e2       	ldi	r18, 0x27	; 39
    42b0:	33 e2       	ldi	r19, 0x23	; 35
    42b2:	80 e0       	ldi	r24, 0x00	; 0
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	64 e0       	ldi	r22, 0x04	; 4
    42b8:	70 e0       	ldi	r23, 0x00	; 0
    42ba:	f9 01       	movw	r30, r18
    42bc:	09 95       	icall
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	90 e0       	ldi	r25, 0x00	; 0
    42c2:	a8 e4       	ldi	r26, 0x48	; 72
    42c4:	b2 e4       	ldi	r27, 0x42	; 66
    42c6:	89 83       	std	Y+1, r24	; 0x01
    42c8:	9a 83       	std	Y+2, r25	; 0x02
    42ca:	ab 83       	std	Y+3, r26	; 0x03
    42cc:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    42ce:	69 81       	ldd	r22, Y+1	; 0x01
    42d0:	7a 81       	ldd	r23, Y+2	; 0x02
    42d2:	8b 81       	ldd	r24, Y+3	; 0x03
    42d4:	9c 81       	ldd	r25, Y+4	; 0x04
    42d6:	20 e0       	ldi	r18, 0x00	; 0
    42d8:	30 e0       	ldi	r19, 0x00	; 0
    42da:	4a e7       	ldi	r20, 0x7A	; 122
    42dc:	53 e4       	ldi	r21, 0x43	; 67
    42de:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    42e2:	dc 01       	movw	r26, r24
    42e4:	cb 01       	movw	r24, r22
    42e6:	8d 83       	std	Y+5, r24	; 0x05
    42e8:	9e 83       	std	Y+6, r25	; 0x06
    42ea:	af 83       	std	Y+7, r26	; 0x07
    42ec:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    42ee:	11 e0       	ldi	r17, 0x01	; 1
    42f0:	6d 81       	ldd	r22, Y+5	; 0x05
    42f2:	7e 81       	ldd	r23, Y+6	; 0x06
    42f4:	8f 81       	ldd	r24, Y+7	; 0x07
    42f6:	98 85       	ldd	r25, Y+8	; 0x08
    42f8:	20 e0       	ldi	r18, 0x00	; 0
    42fa:	30 e0       	ldi	r19, 0x00	; 0
    42fc:	40 e8       	ldi	r20, 0x80	; 128
    42fe:	5f e3       	ldi	r21, 0x3F	; 63
    4300:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    4304:	88 23       	and	r24, r24
    4306:	0c f0       	brlt	.+2      	; 0x430a <SoftwareReset+0x74>
    4308:	10 e0       	ldi	r17, 0x00	; 0
    430a:	11 23       	and	r17, r17
    430c:	29 f0       	breq	.+10     	; 0x4318 <SoftwareReset+0x82>
		__ticks = 1;
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	9a 87       	std	Y+10, r25	; 0x0a
    4314:	89 87       	std	Y+9, r24	; 0x09
    4316:	46 c0       	rjmp	.+140    	; 0x43a4 <SoftwareReset+0x10e>
	else if (__tmp > 65535)
    4318:	11 e0       	ldi	r17, 0x01	; 1
    431a:	6d 81       	ldd	r22, Y+5	; 0x05
    431c:	7e 81       	ldd	r23, Y+6	; 0x06
    431e:	8f 81       	ldd	r24, Y+7	; 0x07
    4320:	98 85       	ldd	r25, Y+8	; 0x08
    4322:	20 e0       	ldi	r18, 0x00	; 0
    4324:	3f ef       	ldi	r19, 0xFF	; 255
    4326:	4f e7       	ldi	r20, 0x7F	; 127
    4328:	57 e4       	ldi	r21, 0x47	; 71
    432a:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    432e:	18 16       	cp	r1, r24
    4330:	0c f0       	brlt	.+2      	; 0x4334 <SoftwareReset+0x9e>
    4332:	10 e0       	ldi	r17, 0x00	; 0
    4334:	11 23       	and	r17, r17
    4336:	61 f1       	breq	.+88     	; 0x4390 <SoftwareReset+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4338:	69 81       	ldd	r22, Y+1	; 0x01
    433a:	7a 81       	ldd	r23, Y+2	; 0x02
    433c:	8b 81       	ldd	r24, Y+3	; 0x03
    433e:	9c 81       	ldd	r25, Y+4	; 0x04
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	30 e0       	ldi	r19, 0x00	; 0
    4344:	40 e2       	ldi	r20, 0x20	; 32
    4346:	51 e4       	ldi	r21, 0x41	; 65
    4348:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    434c:	dc 01       	movw	r26, r24
    434e:	cb 01       	movw	r24, r22
    4350:	bc 01       	movw	r22, r24
    4352:	cd 01       	movw	r24, r26
    4354:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    4358:	dc 01       	movw	r26, r24
    435a:	cb 01       	movw	r24, r22
    435c:	9a 87       	std	Y+10, r25	; 0x0a
    435e:	89 87       	std	Y+9, r24	; 0x09
    4360:	12 c0       	rjmp	.+36     	; 0x4386 <SoftwareReset+0xf0>
    4362:	89 e1       	ldi	r24, 0x19	; 25
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	9c 87       	std	Y+12, r25	; 0x0c
    4368:	8b 87       	std	Y+11, r24	; 0x0b
    436a:	8b 85       	ldd	r24, Y+11	; 0x0b
    436c:	9c 85       	ldd	r25, Y+12	; 0x0c
    436e:	8c 01       	movw	r16, r24
    4370:	c8 01       	movw	r24, r16
    4372:	01 97       	sbiw	r24, 0x01	; 1
    4374:	f1 f7       	brne	.-4      	; 0x4372 <SoftwareReset+0xdc>
    4376:	8c 01       	movw	r16, r24
    4378:	1c 87       	std	Y+12, r17	; 0x0c
    437a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    437c:	89 85       	ldd	r24, Y+9	; 0x09
    437e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4380:	01 97       	sbiw	r24, 0x01	; 1
    4382:	9a 87       	std	Y+10, r25	; 0x0a
    4384:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4386:	89 85       	ldd	r24, Y+9	; 0x09
    4388:	9a 85       	ldd	r25, Y+10	; 0x0a
    438a:	00 97       	sbiw	r24, 0x00	; 0
    438c:	51 f7       	brne	.-44     	; 0x4362 <SoftwareReset+0xcc>
    438e:	17 c0       	rjmp	.+46     	; 0x43be <SoftwareReset+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4390:	6d 81       	ldd	r22, Y+5	; 0x05
    4392:	7e 81       	ldd	r23, Y+6	; 0x06
    4394:	8f 81       	ldd	r24, Y+7	; 0x07
    4396:	98 85       	ldd	r25, Y+8	; 0x08
    4398:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    439c:	dc 01       	movw	r26, r24
    439e:	cb 01       	movw	r24, r22
    43a0:	9a 87       	std	Y+10, r25	; 0x0a
    43a2:	89 87       	std	Y+9, r24	; 0x09
    43a4:	89 85       	ldd	r24, Y+9	; 0x09
    43a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43a8:	9e 87       	std	Y+14, r25	; 0x0e
    43aa:	8d 87       	std	Y+13, r24	; 0x0d
    43ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    43ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    43b0:	8c 01       	movw	r16, r24
    43b2:	c8 01       	movw	r24, r16
    43b4:	01 97       	sbiw	r24, 0x01	; 1
    43b6:	f1 f7       	brne	.-4      	; 0x43b4 <SoftwareReset+0x11e>
    43b8:	8c 01       	movw	r16, r24
    43ba:	1e 87       	std	Y+14, r17	; 0x0e
    43bc:	0d 87       	std	Y+13, r16	; 0x0d
	
	_delay_ms(50);
	
	InitVS1011e();
    43be:	0e 94 07 20 	call	0x400e	; 0x400e <InitVS1011e>
	
//	WriteCommand(0x03, XTAL_VALUE);	// set XTAL to 12.288MHz
}
    43c2:	2e 96       	adiw	r28, 0x0e	; 14
    43c4:	0f b6       	in	r0, 0x3f	; 63
    43c6:	f8 94       	cli
    43c8:	de bf       	out	0x3e, r29	; 62
    43ca:	0f be       	out	0x3f, r0	; 63
    43cc:	cd bf       	out	0x3d, r28	; 61
    43ce:	df 91       	pop	r29
    43d0:	cf 91       	pop	r28
    43d2:	1f 91       	pop	r17
    43d4:	0f 91       	pop	r16
    43d6:	08 95       	ret

000043d8 <HardwareReset>:

/// After a Hardware reset you have to init the MP3-Chip again
void HardwareReset()
{
    43d8:	0f 93       	push	r16
    43da:	1f 93       	push	r17
    43dc:	cf 93       	push	r28
    43de:	df 93       	push	r29
    43e0:	cd b7       	in	r28, 0x3d	; 61
    43e2:	de b7       	in	r29, 0x3e	; 62
    43e4:	6c 97       	sbiw	r28, 0x1c	; 28
    43e6:	0f b6       	in	r0, 0x3f	; 63
    43e8:	f8 94       	cli
    43ea:	de bf       	out	0x3e, r29	; 62
    43ec:	0f be       	out	0x3f, r0	; 63
    43ee:	cd bf       	out	0x3d, r28	; 61
	PORTC &= ~_BV(3); // Pin low
    43f0:	88 e2       	ldi	r24, 0x28	; 40
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	28 e2       	ldi	r18, 0x28	; 40
    43f6:	30 e0       	ldi	r19, 0x00	; 0
    43f8:	f9 01       	movw	r30, r18
    43fa:	20 81       	ld	r18, Z
    43fc:	27 7f       	andi	r18, 0xF7	; 247
    43fe:	fc 01       	movw	r30, r24
    4400:	20 83       	st	Z, r18
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	a8 ec       	ldi	r26, 0xC8	; 200
    4408:	b2 e4       	ldi	r27, 0x42	; 66
    440a:	89 83       	std	Y+1, r24	; 0x01
    440c:	9a 83       	std	Y+2, r25	; 0x02
    440e:	ab 83       	std	Y+3, r26	; 0x03
    4410:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4412:	69 81       	ldd	r22, Y+1	; 0x01
    4414:	7a 81       	ldd	r23, Y+2	; 0x02
    4416:	8b 81       	ldd	r24, Y+3	; 0x03
    4418:	9c 81       	ldd	r25, Y+4	; 0x04
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	4a e7       	ldi	r20, 0x7A	; 122
    4420:	53 e4       	ldi	r21, 0x43	; 67
    4422:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    4426:	dc 01       	movw	r26, r24
    4428:	cb 01       	movw	r24, r22
    442a:	8d 83       	std	Y+5, r24	; 0x05
    442c:	9e 83       	std	Y+6, r25	; 0x06
    442e:	af 83       	std	Y+7, r26	; 0x07
    4430:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4432:	11 e0       	ldi	r17, 0x01	; 1
    4434:	6d 81       	ldd	r22, Y+5	; 0x05
    4436:	7e 81       	ldd	r23, Y+6	; 0x06
    4438:	8f 81       	ldd	r24, Y+7	; 0x07
    443a:	98 85       	ldd	r25, Y+8	; 0x08
    443c:	20 e0       	ldi	r18, 0x00	; 0
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	40 e8       	ldi	r20, 0x80	; 128
    4442:	5f e3       	ldi	r21, 0x3F	; 63
    4444:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    4448:	88 23       	and	r24, r24
    444a:	0c f0       	brlt	.+2      	; 0x444e <HardwareReset+0x76>
    444c:	10 e0       	ldi	r17, 0x00	; 0
    444e:	11 23       	and	r17, r17
    4450:	29 f0       	breq	.+10     	; 0x445c <HardwareReset+0x84>
		__ticks = 1;
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	9a 87       	std	Y+10, r25	; 0x0a
    4458:	89 87       	std	Y+9, r24	; 0x09
    445a:	46 c0       	rjmp	.+140    	; 0x44e8 <HardwareReset+0x110>
	else if (__tmp > 65535)
    445c:	11 e0       	ldi	r17, 0x01	; 1
    445e:	6d 81       	ldd	r22, Y+5	; 0x05
    4460:	7e 81       	ldd	r23, Y+6	; 0x06
    4462:	8f 81       	ldd	r24, Y+7	; 0x07
    4464:	98 85       	ldd	r25, Y+8	; 0x08
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	3f ef       	ldi	r19, 0xFF	; 255
    446a:	4f e7       	ldi	r20, 0x7F	; 127
    446c:	57 e4       	ldi	r21, 0x47	; 71
    446e:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    4472:	18 16       	cp	r1, r24
    4474:	0c f0       	brlt	.+2      	; 0x4478 <HardwareReset+0xa0>
    4476:	10 e0       	ldi	r17, 0x00	; 0
    4478:	11 23       	and	r17, r17
    447a:	61 f1       	breq	.+88     	; 0x44d4 <HardwareReset+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    447c:	69 81       	ldd	r22, Y+1	; 0x01
    447e:	7a 81       	ldd	r23, Y+2	; 0x02
    4480:	8b 81       	ldd	r24, Y+3	; 0x03
    4482:	9c 81       	ldd	r25, Y+4	; 0x04
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	40 e2       	ldi	r20, 0x20	; 32
    448a:	51 e4       	ldi	r21, 0x41	; 65
    448c:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    4490:	dc 01       	movw	r26, r24
    4492:	cb 01       	movw	r24, r22
    4494:	bc 01       	movw	r22, r24
    4496:	cd 01       	movw	r24, r26
    4498:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    449c:	dc 01       	movw	r26, r24
    449e:	cb 01       	movw	r24, r22
    44a0:	9a 87       	std	Y+10, r25	; 0x0a
    44a2:	89 87       	std	Y+9, r24	; 0x09
    44a4:	12 c0       	rjmp	.+36     	; 0x44ca <HardwareReset+0xf2>
    44a6:	89 e1       	ldi	r24, 0x19	; 25
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	9c 87       	std	Y+12, r25	; 0x0c
    44ac:	8b 87       	std	Y+11, r24	; 0x0b
    44ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    44b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    44b2:	8c 01       	movw	r16, r24
    44b4:	c8 01       	movw	r24, r16
    44b6:	01 97       	sbiw	r24, 0x01	; 1
    44b8:	f1 f7       	brne	.-4      	; 0x44b6 <HardwareReset+0xde>
    44ba:	8c 01       	movw	r16, r24
    44bc:	1c 87       	std	Y+12, r17	; 0x0c
    44be:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44c0:	89 85       	ldd	r24, Y+9	; 0x09
    44c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44c4:	01 97       	sbiw	r24, 0x01	; 1
    44c6:	9a 87       	std	Y+10, r25	; 0x0a
    44c8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ca:	89 85       	ldd	r24, Y+9	; 0x09
    44cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ce:	00 97       	sbiw	r24, 0x00	; 0
    44d0:	51 f7       	brne	.-44     	; 0x44a6 <HardwareReset+0xce>
    44d2:	17 c0       	rjmp	.+46     	; 0x4502 <HardwareReset+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44d4:	6d 81       	ldd	r22, Y+5	; 0x05
    44d6:	7e 81       	ldd	r23, Y+6	; 0x06
    44d8:	8f 81       	ldd	r24, Y+7	; 0x07
    44da:	98 85       	ldd	r25, Y+8	; 0x08
    44dc:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    44e0:	dc 01       	movw	r26, r24
    44e2:	cb 01       	movw	r24, r22
    44e4:	9a 87       	std	Y+10, r25	; 0x0a
    44e6:	89 87       	std	Y+9, r24	; 0x09
    44e8:	89 85       	ldd	r24, Y+9	; 0x09
    44ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ec:	9e 87       	std	Y+14, r25	; 0x0e
    44ee:	8d 87       	std	Y+13, r24	; 0x0d
    44f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    44f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    44f4:	8c 01       	movw	r16, r24
    44f6:	f8 01       	movw	r30, r16
    44f8:	31 97       	sbiw	r30, 0x01	; 1
    44fa:	f1 f7       	brne	.-4      	; 0x44f8 <HardwareReset+0x120>
    44fc:	8f 01       	movw	r16, r30
    44fe:	1e 87       	std	Y+14, r17	; 0x0e
    4500:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100);
	DESELECT_MP3();
    4502:	85 e2       	ldi	r24, 0x25	; 37
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	25 e2       	ldi	r18, 0x25	; 37
    4508:	30 e0       	ldi	r19, 0x00	; 0
    450a:	f9 01       	movw	r30, r18
    450c:	20 81       	ld	r18, Z
    450e:	24 60       	ori	r18, 0x04	; 4
    4510:	fc 01       	movw	r30, r24
    4512:	20 83       	st	Z, r18
	DESELECT_MP3_DATA();
    4514:	85 e2       	ldi	r24, 0x25	; 37
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	25 e2       	ldi	r18, 0x25	; 37
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	f9 01       	movw	r30, r18
    451e:	20 81       	ld	r18, Z
    4520:	21 60       	ori	r18, 0x01	; 1
    4522:	fc 01       	movw	r30, r24
    4524:	20 83       	st	Z, r18
	PORTC |=  _BV(3); // Pin high
    4526:	88 e2       	ldi	r24, 0x28	; 40
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	28 e2       	ldi	r18, 0x28	; 40
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	f9 01       	movw	r30, r18
    4530:	20 81       	ld	r18, Z
    4532:	28 60       	ori	r18, 0x08	; 8
    4534:	fc 01       	movw	r30, r24
    4536:	20 83       	st	Z, r18
    4538:	80 e0       	ldi	r24, 0x00	; 0
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	a8 ec       	ldi	r26, 0xC8	; 200
    453e:	b2 e4       	ldi	r27, 0x42	; 66
    4540:	8f 87       	std	Y+15, r24	; 0x0f
    4542:	98 8b       	std	Y+16, r25	; 0x10
    4544:	a9 8b       	std	Y+17, r26	; 0x11
    4546:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4548:	6f 85       	ldd	r22, Y+15	; 0x0f
    454a:	78 89       	ldd	r23, Y+16	; 0x10
    454c:	89 89       	ldd	r24, Y+17	; 0x11
    454e:	9a 89       	ldd	r25, Y+18	; 0x12
    4550:	20 e0       	ldi	r18, 0x00	; 0
    4552:	30 e0       	ldi	r19, 0x00	; 0
    4554:	4a e7       	ldi	r20, 0x7A	; 122
    4556:	53 e4       	ldi	r21, 0x43	; 67
    4558:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    455c:	dc 01       	movw	r26, r24
    455e:	cb 01       	movw	r24, r22
    4560:	8b 8b       	std	Y+19, r24	; 0x13
    4562:	9c 8b       	std	Y+20, r25	; 0x14
    4564:	ad 8b       	std	Y+21, r26	; 0x15
    4566:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4568:	11 e0       	ldi	r17, 0x01	; 1
    456a:	6b 89       	ldd	r22, Y+19	; 0x13
    456c:	7c 89       	ldd	r23, Y+20	; 0x14
    456e:	8d 89       	ldd	r24, Y+21	; 0x15
    4570:	9e 89       	ldd	r25, Y+22	; 0x16
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	40 e8       	ldi	r20, 0x80	; 128
    4578:	5f e3       	ldi	r21, 0x3F	; 63
    457a:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    457e:	88 23       	and	r24, r24
    4580:	0c f0       	brlt	.+2      	; 0x4584 <HardwareReset+0x1ac>
    4582:	10 e0       	ldi	r17, 0x00	; 0
    4584:	11 23       	and	r17, r17
    4586:	29 f0       	breq	.+10     	; 0x4592 <HardwareReset+0x1ba>
		__ticks = 1;
    4588:	81 e0       	ldi	r24, 0x01	; 1
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	98 8f       	std	Y+24, r25	; 0x18
    458e:	8f 8b       	std	Y+23, r24	; 0x17
    4590:	46 c0       	rjmp	.+140    	; 0x461e <HardwareReset+0x246>
	else if (__tmp > 65535)
    4592:	11 e0       	ldi	r17, 0x01	; 1
    4594:	6b 89       	ldd	r22, Y+19	; 0x13
    4596:	7c 89       	ldd	r23, Y+20	; 0x14
    4598:	8d 89       	ldd	r24, Y+21	; 0x15
    459a:	9e 89       	ldd	r25, Y+22	; 0x16
    459c:	20 e0       	ldi	r18, 0x00	; 0
    459e:	3f ef       	ldi	r19, 0xFF	; 255
    45a0:	4f e7       	ldi	r20, 0x7F	; 127
    45a2:	57 e4       	ldi	r21, 0x47	; 71
    45a4:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    45a8:	18 16       	cp	r1, r24
    45aa:	0c f0       	brlt	.+2      	; 0x45ae <HardwareReset+0x1d6>
    45ac:	10 e0       	ldi	r17, 0x00	; 0
    45ae:	11 23       	and	r17, r17
    45b0:	61 f1       	breq	.+88     	; 0x460a <HardwareReset+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45b2:	6f 85       	ldd	r22, Y+15	; 0x0f
    45b4:	78 89       	ldd	r23, Y+16	; 0x10
    45b6:	89 89       	ldd	r24, Y+17	; 0x11
    45b8:	9a 89       	ldd	r25, Y+18	; 0x12
    45ba:	20 e0       	ldi	r18, 0x00	; 0
    45bc:	30 e0       	ldi	r19, 0x00	; 0
    45be:	40 e2       	ldi	r20, 0x20	; 32
    45c0:	51 e4       	ldi	r21, 0x41	; 65
    45c2:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    45c6:	dc 01       	movw	r26, r24
    45c8:	cb 01       	movw	r24, r22
    45ca:	bc 01       	movw	r22, r24
    45cc:	cd 01       	movw	r24, r26
    45ce:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    45d2:	dc 01       	movw	r26, r24
    45d4:	cb 01       	movw	r24, r22
    45d6:	98 8f       	std	Y+24, r25	; 0x18
    45d8:	8f 8b       	std	Y+23, r24	; 0x17
    45da:	12 c0       	rjmp	.+36     	; 0x4600 <HardwareReset+0x228>
    45dc:	89 e1       	ldi	r24, 0x19	; 25
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	9a 8f       	std	Y+26, r25	; 0x1a
    45e2:	89 8f       	std	Y+25, r24	; 0x19
    45e4:	89 8d       	ldd	r24, Y+25	; 0x19
    45e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    45e8:	8c 01       	movw	r16, r24
    45ea:	c8 01       	movw	r24, r16
    45ec:	01 97       	sbiw	r24, 0x01	; 1
    45ee:	f1 f7       	brne	.-4      	; 0x45ec <HardwareReset+0x214>
    45f0:	8c 01       	movw	r16, r24
    45f2:	1a 8f       	std	Y+26, r17	; 0x1a
    45f4:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45f6:	8f 89       	ldd	r24, Y+23	; 0x17
    45f8:	98 8d       	ldd	r25, Y+24	; 0x18
    45fa:	01 97       	sbiw	r24, 0x01	; 1
    45fc:	98 8f       	std	Y+24, r25	; 0x18
    45fe:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4600:	8f 89       	ldd	r24, Y+23	; 0x17
    4602:	98 8d       	ldd	r25, Y+24	; 0x18
    4604:	00 97       	sbiw	r24, 0x00	; 0
    4606:	51 f7       	brne	.-44     	; 0x45dc <HardwareReset+0x204>
    4608:	17 c0       	rjmp	.+46     	; 0x4638 <HardwareReset+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    460a:	6b 89       	ldd	r22, Y+19	; 0x13
    460c:	7c 89       	ldd	r23, Y+20	; 0x14
    460e:	8d 89       	ldd	r24, Y+21	; 0x15
    4610:	9e 89       	ldd	r25, Y+22	; 0x16
    4612:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    4616:	dc 01       	movw	r26, r24
    4618:	cb 01       	movw	r24, r22
    461a:	98 8f       	std	Y+24, r25	; 0x18
    461c:	8f 8b       	std	Y+23, r24	; 0x17
    461e:	8f 89       	ldd	r24, Y+23	; 0x17
    4620:	98 8d       	ldd	r25, Y+24	; 0x18
    4622:	9c 8f       	std	Y+28, r25	; 0x1c
    4624:	8b 8f       	std	Y+27, r24	; 0x1b
    4626:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4628:	9c 8d       	ldd	r25, Y+28	; 0x1c
    462a:	8c 01       	movw	r16, r24
    462c:	f8 01       	movw	r30, r16
    462e:	31 97       	sbiw	r30, 0x01	; 1
    4630:	f1 f7       	brne	.-4      	; 0x462e <HardwareReset+0x256>
    4632:	8f 01       	movw	r16, r30
    4634:	1c 8f       	std	Y+28, r17	; 0x1c
    4636:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(100);	// just for security
}
    4638:	6c 96       	adiw	r28, 0x1c	; 28
    463a:	0f b6       	in	r0, 0x3f	; 63
    463c:	f8 94       	cli
    463e:	de bf       	out	0x3e, r29	; 62
    4640:	0f be       	out	0x3f, r0	; 63
    4642:	cd bf       	out	0x3d, r28	; 61
    4644:	df 91       	pop	r29
    4646:	cf 91       	pop	r28
    4648:	1f 91       	pop	r17
    464a:	0f 91       	pop	r16
    464c:	08 95       	ret

0000464e <WriteCommand>:

void WriteCommand(uint8_t address, uint16_t data)
{
    464e:	cf 93       	push	r28
    4650:	df 93       	push	r29
    4652:	00 d0       	rcall	.+0      	; 0x4654 <WriteCommand+0x6>
    4654:	00 d0       	rcall	.+0      	; 0x4656 <WriteCommand+0x8>
    4656:	cd b7       	in	r28, 0x3d	; 61
    4658:	de b7       	in	r29, 0x3e	; 62
    465a:	8a 83       	std	Y+2, r24	; 0x02
    465c:	7c 83       	std	Y+4, r23	; 0x04
    465e:	6b 83       	std	Y+3, r22	; 0x03
	SELECT_MP3();
    4660:	85 e2       	ldi	r24, 0x25	; 37
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	25 e2       	ldi	r18, 0x25	; 37
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	f9 01       	movw	r30, r18
    466a:	20 81       	ld	r18, Z
    466c:	2b 7f       	andi	r18, 0xFB	; 251
    466e:	fc 01       	movw	r30, r24
    4670:	20 83       	st	Z, r18
	
	xmit_spi(WRITE_BYTE);
    4672:	82 e0       	ldi	r24, 0x02	; 2
    4674:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
	xmit_spi(address);
    4678:	8a 81       	ldd	r24, Y+2	; 0x02
    467a:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
	
	uint8_t byte = data >> 8;
    467e:	8b 81       	ldd	r24, Y+3	; 0x03
    4680:	9c 81       	ldd	r25, Y+4	; 0x04
    4682:	89 2f       	mov	r24, r25
    4684:	99 27       	eor	r25, r25
    4686:	89 83       	std	Y+1, r24	; 0x01
	xmit_spi(byte);
    4688:	89 81       	ldd	r24, Y+1	; 0x01
    468a:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
	byte = data & 0xFF;
    468e:	8b 81       	ldd	r24, Y+3	; 0x03
    4690:	89 83       	std	Y+1, r24	; 0x01
	xmit_spi(byte);
    4692:	89 81       	ldd	r24, Y+1	; 0x01
    4694:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
	
	
	DESELECT_MP3();
    4698:	85 e2       	ldi	r24, 0x25	; 37
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	25 e2       	ldi	r18, 0x25	; 37
    469e:	30 e0       	ldi	r19, 0x00	; 0
    46a0:	f9 01       	movw	r30, r18
    46a2:	20 81       	ld	r18, Z
    46a4:	24 60       	ori	r18, 0x04	; 4
    46a6:	fc 01       	movw	r30, r24
    46a8:	20 83       	st	Z, r18
}
    46aa:	0f 90       	pop	r0
    46ac:	0f 90       	pop	r0
    46ae:	0f 90       	pop	r0
    46b0:	0f 90       	pop	r0
    46b2:	df 91       	pop	r29
    46b4:	cf 91       	pop	r28
    46b6:	08 95       	ret

000046b8 <ReadCommand>:

uint16_t ReadCommand(uint8_t address)
{
    46b8:	cf 93       	push	r28
    46ba:	df 93       	push	r29
    46bc:	00 d0       	rcall	.+0      	; 0x46be <ReadCommand+0x6>
    46be:	00 d0       	rcall	.+0      	; 0x46c0 <ReadCommand+0x8>
    46c0:	cd b7       	in	r28, 0x3d	; 61
    46c2:	de b7       	in	r29, 0x3e	; 62
    46c4:	8c 83       	std	Y+4, r24	; 0x04
	SELECT_MP3();
    46c6:	85 e2       	ldi	r24, 0x25	; 37
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	25 e2       	ldi	r18, 0x25	; 37
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	f9 01       	movw	r30, r18
    46d0:	20 81       	ld	r18, Z
    46d2:	2b 7f       	andi	r18, 0xFB	; 251
    46d4:	fc 01       	movw	r30, r24
    46d6:	20 83       	st	Z, r18
	
	xmit_spi(READ_BYTE);
    46d8:	83 e0       	ldi	r24, 0x03	; 3
    46da:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
	xmit_spi(address);
    46de:	8c 81       	ldd	r24, Y+4	; 0x04
    46e0:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
	
	uint16_t data = 0x00;
    46e4:	1a 82       	std	Y+2, r1	; 0x02
    46e6:	19 82       	std	Y+1, r1	; 0x01
	uint8_t byte = 0x00;
    46e8:	1b 82       	std	Y+3, r1	; 0x03
	
	byte = rcv_spi();
    46ea:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>
    46ee:	8b 83       	std	Y+3, r24	; 0x03
	data = byte << 8;
    46f0:	8b 81       	ldd	r24, Y+3	; 0x03
    46f2:	88 2f       	mov	r24, r24
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	98 2f       	mov	r25, r24
    46f8:	88 27       	eor	r24, r24
    46fa:	9a 83       	std	Y+2, r25	; 0x02
    46fc:	89 83       	std	Y+1, r24	; 0x01
	byte = rcv_spi();
    46fe:	0e 94 34 24 	call	0x4868	; 0x4868 <rcv_spi>
    4702:	8b 83       	std	Y+3, r24	; 0x03
	data |= byte;		
    4704:	8b 81       	ldd	r24, Y+3	; 0x03
    4706:	88 2f       	mov	r24, r24
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	29 81       	ldd	r18, Y+1	; 0x01
    470c:	3a 81       	ldd	r19, Y+2	; 0x02
    470e:	82 2b       	or	r24, r18
    4710:	93 2b       	or	r25, r19
    4712:	9a 83       	std	Y+2, r25	; 0x02
    4714:	89 83       	std	Y+1, r24	; 0x01
	
	DESELECT_MP3();
    4716:	85 e2       	ldi	r24, 0x25	; 37
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	25 e2       	ldi	r18, 0x25	; 37
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	f9 01       	movw	r30, r18
    4720:	20 81       	ld	r18, Z
    4722:	24 60       	ori	r18, 0x04	; 4
    4724:	fc 01       	movw	r30, r24
    4726:	20 83       	st	Z, r18

	return data;
    4728:	89 81       	ldd	r24, Y+1	; 0x01
    472a:	9a 81       	ldd	r25, Y+2	; 0x02
	
}
    472c:	0f 90       	pop	r0
    472e:	0f 90       	pop	r0
    4730:	0f 90       	pop	r0
    4732:	0f 90       	pop	r0
    4734:	df 91       	pop	r29
    4736:	cf 91       	pop	r28
    4738:	08 95       	ret

0000473a <WriteMP3DataByte>:

// *****************************************************************************
void WriteMP3DataByte(uint8_t byte)
{
    473a:	cf 93       	push	r28
    473c:	df 93       	push	r29
    473e:	0f 92       	push	r0
    4740:	cd b7       	in	r28, 0x3d	; 61
    4742:	de b7       	in	r29, 0x3e	; 62
    4744:	89 83       	std	Y+1, r24	; 0x01
	SELECT_MP3_DATA();
    4746:	85 e2       	ldi	r24, 0x25	; 37
    4748:	90 e0       	ldi	r25, 0x00	; 0
    474a:	25 e2       	ldi	r18, 0x25	; 37
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	f9 01       	movw	r30, r18
    4750:	20 81       	ld	r18, Z
    4752:	2e 7f       	andi	r18, 0xFE	; 254
    4754:	fc 01       	movw	r30, r24
    4756:	20 83       	st	Z, r18
	
	xmit_spi(byte);
    4758:	89 81       	ldd	r24, Y+1	; 0x01
    475a:	0e 94 1e 24 	call	0x483c	; 0x483c <xmit_spi>
	
	DESELECT_MP3_DATA();
    475e:	85 e2       	ldi	r24, 0x25	; 37
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	25 e2       	ldi	r18, 0x25	; 37
    4764:	30 e0       	ldi	r19, 0x00	; 0
    4766:	f9 01       	movw	r30, r18
    4768:	20 81       	ld	r18, Z
    476a:	21 60       	ori	r18, 0x01	; 1
    476c:	fc 01       	movw	r30, r24
    476e:	20 83       	st	Z, r18
		//}
	//}
	//
//
	//DATAPORT_VS1001 |= (1<<SDATA);				//setzt Output wieder auf High
}
    4770:	0f 90       	pop	r0
    4772:	df 91       	pop	r29
    4774:	cf 91       	pop	r28
    4776:	08 95       	ret

00004778 <StartSineTest>:

void StartSineTest(void)
{
    4778:	cf 93       	push	r28
    477a:	df 93       	push	r29
    477c:	cd b7       	in	r28, 0x3d	; 61
    477e:	de b7       	in	r29, 0x3e	; 62
//	_delay_ms(5);

//	while(1)
	{
//	SELECT_MP3_DATA();	
	WriteMP3DataByte(0x53);
    4780:	83 e5       	ldi	r24, 0x53	; 83
    4782:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	WriteMP3DataByte(0xEF);
    4786:	8f ee       	ldi	r24, 0xEF	; 239
    4788:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	WriteMP3DataByte(0x6E);
    478c:	8e e6       	ldi	r24, 0x6E	; 110
    478e:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	WriteMP3DataByte(0x44);	// 1kHz
    4792:	84 e4       	ldi	r24, 0x44	; 68
    4794:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	WriteMP3DataByte(0x00);
    4798:	80 e0       	ldi	r24, 0x00	; 0
    479a:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	WriteMP3DataByte(0x00);
    479e:	80 e0       	ldi	r24, 0x00	; 0
    47a0:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	WriteMP3DataByte(0x00);
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	WriteMP3DataByte(0x00);
    47aa:	80 e0       	ldi	r24, 0x00	; 0
    47ac:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	
//	DESELECT_MP3_DATA();
	}
}
    47b0:	df 91       	pop	r29
    47b2:	cf 91       	pop	r28
    47b4:	08 95       	ret

000047b6 <StopSineTest>:

void StopSineTest(void)
{
    47b6:	cf 93       	push	r28
    47b8:	df 93       	push	r29
    47ba:	cd b7       	in	r28, 0x3d	; 61
    47bc:	de b7       	in	r29, 0x3e	; 62
//	SELECT_MP3_DATA();
	WriteMP3DataByte(0x45);
    47be:	85 e4       	ldi	r24, 0x45	; 69
    47c0:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	WriteMP3DataByte(0x78);
    47c4:	88 e7       	ldi	r24, 0x78	; 120
    47c6:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	WriteMP3DataByte(0x69);
    47ca:	89 e6       	ldi	r24, 0x69	; 105
    47cc:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	WriteMP3DataByte(0x74);
    47d0:	84 e7       	ldi	r24, 0x74	; 116
    47d2:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	WriteMP3DataByte(0x00);
    47d6:	80 e0       	ldi	r24, 0x00	; 0
    47d8:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	WriteMP3DataByte(0x00);
    47dc:	80 e0       	ldi	r24, 0x00	; 0
    47de:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	WriteMP3DataByte(0x00);
    47e2:	80 e0       	ldi	r24, 0x00	; 0
    47e4:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
	WriteMP3DataByte(0x00);
    47e8:	80 e0       	ldi	r24, 0x00	; 0
    47ea:	0e 94 9d 23 	call	0x473a	; 0x473a <WriteMP3DataByte>
//	DESELECT_MP3_DATA();
    47ee:	df 91       	pop	r29
    47f0:	cf 91       	pop	r28
    47f2:	08 95       	ret

000047f4 <init_spi>:
#include "spi.h"
#include <util/delay.h>
#include <avr/io.h>

void init_spi (void)
{
    47f4:	cf 93       	push	r28
    47f6:	df 93       	push	r29
    47f8:	cd b7       	in	r28, 0x3d	; 61
    47fa:	de b7       	in	r29, 0x3e	; 62

//	DDRB = (1<<PB1) | (1<<PB2) | (1<<PB3) |(1<<PB5);
	DDRB = (1<<PB0) | (1<<PB2) | (1<<PB3) |(1<<PB5);	// this is for the MP3-Chip
    47fc:	84 e2       	ldi	r24, 0x24	; 36
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	2d e2       	ldi	r18, 0x2D	; 45
    4802:	fc 01       	movw	r30, r24
    4804:	20 83       	st	Z, r18
	
	DDRD |= (1<<PD4);	// CS Card
    4806:	8a e2       	ldi	r24, 0x2A	; 42
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	2a e2       	ldi	r18, 0x2A	; 42
    480c:	30 e0       	ldi	r19, 0x00	; 0
    480e:	f9 01       	movw	r30, r18
    4810:	20 81       	ld	r18, Z
    4812:	20 61       	ori	r18, 0x10	; 16
    4814:	fc 01       	movw	r30, r24
    4816:	20 83       	st	Z, r18
	
	PORTB = ~((1<<PB4));
    4818:	85 e2       	ldi	r24, 0x25	; 37
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	2f ee       	ldi	r18, 0xEF	; 239
    481e:	fc 01       	movw	r30, r24
    4820:	20 83       	st	Z, r18
	
//	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Enable SPI, SPI in Master Mode
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Enable SPI, SPI in Master Mode
    4822:	8c e4       	ldi	r24, 0x4C	; 76
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	21 e5       	ldi	r18, 0x51	; 81
    4828:	fc 01       	movw	r30, r24
    482a:	20 83       	st	Z, r18
	
	SPSR = 0x01; // fosz/2
    482c:	8d e4       	ldi	r24, 0x4D	; 77
    482e:	90 e0       	ldi	r25, 0x00	; 0
    4830:	21 e0       	ldi	r18, 0x01	; 1
    4832:	fc 01       	movw	r30, r24
    4834:	20 83       	st	Z, r18
}
    4836:	df 91       	pop	r29
    4838:	cf 91       	pop	r28
    483a:	08 95       	ret

0000483c <xmit_spi>:

void xmit_spi (BYTE byte)
{
    483c:	cf 93       	push	r28
    483e:	df 93       	push	r29
    4840:	0f 92       	push	r0
    4842:	cd b7       	in	r28, 0x3d	; 61
    4844:	de b7       	in	r29, 0x3e	; 62
    4846:	89 83       	std	Y+1, r24	; 0x01
	SPDR = byte;
    4848:	8e e4       	ldi	r24, 0x4E	; 78
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	29 81       	ldd	r18, Y+1	; 0x01
    484e:	fc 01       	movw	r30, r24
    4850:	20 83       	st	Z, r18
	
	while(!(SPSR & (1<<SPIF)))
    4852:	00 00       	nop
    4854:	8d e4       	ldi	r24, 0x4D	; 77
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	fc 01       	movw	r30, r24
    485a:	80 81       	ld	r24, Z
    485c:	88 23       	and	r24, r24
    485e:	d4 f7       	brge	.-12     	; 0x4854 <xmit_spi+0x18>
	{
	}	
}
    4860:	0f 90       	pop	r0
    4862:	df 91       	pop	r29
    4864:	cf 91       	pop	r28
    4866:	08 95       	ret

00004868 <rcv_spi>:

BYTE rcv_spi (void)
{
    4868:	cf 93       	push	r28
    486a:	df 93       	push	r29
    486c:	0f 92       	push	r0
    486e:	cd b7       	in	r28, 0x3d	; 61
    4870:	de b7       	in	r29, 0x3e	; 62
	char Byte = 0;
    4872:	19 82       	std	Y+1, r1	; 0x01
	SPDR = 0xff;
    4874:	8e e4       	ldi	r24, 0x4E	; 78
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	2f ef       	ldi	r18, 0xFF	; 255
    487a:	fc 01       	movw	r30, r24
    487c:	20 83       	st	Z, r18
	
	while(!(SPSR & (1<<SPIF)))
    487e:	00 00       	nop
    4880:	8d e4       	ldi	r24, 0x4D	; 77
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	fc 01       	movw	r30, r24
    4886:	80 81       	ld	r24, Z
    4888:	88 23       	and	r24, r24
    488a:	d4 f7       	brge	.-12     	; 0x4880 <rcv_spi+0x18>
	{
	}
	
	Byte = SPDR;
    488c:	8e e4       	ldi	r24, 0x4E	; 78
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	fc 01       	movw	r30, r24
    4892:	80 81       	ld	r24, Z
    4894:	89 83       	std	Y+1, r24	; 0x01
	
	return Byte;
    4896:	89 81       	ldd	r24, Y+1	; 0x01
}
    4898:	0f 90       	pop	r0
    489a:	df 91       	pop	r29
    489c:	cf 91       	pop	r28
    489e:	08 95       	ret

000048a0 <dly_100us>:

void dly_100us(void)
{
    48a0:	0f 93       	push	r16
    48a2:	1f 93       	push	r17
    48a4:	cf 93       	push	r28
    48a6:	df 93       	push	r29
    48a8:	cd b7       	in	r28, 0x3d	; 61
    48aa:	de b7       	in	r29, 0x3e	; 62
    48ac:	68 97       	sbiw	r28, 0x18	; 24
    48ae:	0f b6       	in	r0, 0x3f	; 63
    48b0:	f8 94       	cli
    48b2:	de bf       	out	0x3e, r29	; 62
    48b4:	0f be       	out	0x3f, r0	; 63
    48b6:	cd bf       	out	0x3d, r28	; 61
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	a0 e8       	ldi	r26, 0x80	; 128
    48be:	bf e3       	ldi	r27, 0x3F	; 63
    48c0:	89 83       	std	Y+1, r24	; 0x01
    48c2:	9a 83       	std	Y+2, r25	; 0x02
    48c4:	ab 83       	std	Y+3, r26	; 0x03
    48c6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
    48c8:	69 81       	ldd	r22, Y+1	; 0x01
    48ca:	7a 81       	ldd	r23, Y+2	; 0x02
    48cc:	8b 81       	ldd	r24, Y+3	; 0x03
    48ce:	9c 81       	ldd	r25, Y+4	; 0x04
    48d0:	2b ea       	ldi	r18, 0xAB	; 171
    48d2:	3a ea       	ldi	r19, 0xAA	; 170
    48d4:	4a ea       	ldi	r20, 0xAA	; 170
    48d6:	5e e3       	ldi	r21, 0x3E	; 62
    48d8:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    48dc:	dc 01       	movw	r26, r24
    48de:	cb 01       	movw	r24, r22
    48e0:	8d 83       	std	Y+5, r24	; 0x05
    48e2:	9e 83       	std	Y+6, r25	; 0x06
    48e4:	af 83       	std	Y+7, r26	; 0x07
    48e6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    48e8:	11 e0       	ldi	r17, 0x01	; 1
    48ea:	6d 81       	ldd	r22, Y+5	; 0x05
    48ec:	7e 81       	ldd	r23, Y+6	; 0x06
    48ee:	8f 81       	ldd	r24, Y+7	; 0x07
    48f0:	98 85       	ldd	r25, Y+8	; 0x08
    48f2:	20 e0       	ldi	r18, 0x00	; 0
    48f4:	30 e0       	ldi	r19, 0x00	; 0
    48f6:	40 e8       	ldi	r20, 0x80	; 128
    48f8:	5f e3       	ldi	r21, 0x3F	; 63
    48fa:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    48fe:	88 23       	and	r24, r24
    4900:	0c f0       	brlt	.+2      	; 0x4904 <dly_100us+0x64>
    4902:	10 e0       	ldi	r17, 0x00	; 0
    4904:	11 23       	and	r17, r17
    4906:	19 f0       	breq	.+6      	; 0x490e <dly_100us+0x6e>
		__ticks = 1;
    4908:	81 e0       	ldi	r24, 0x01	; 1
    490a:	89 87       	std	Y+9, r24	; 0x09
    490c:	a3 c0       	rjmp	.+326    	; 0x4a54 <dly_100us+0x1b4>
	else if (__tmp > 255)
    490e:	11 e0       	ldi	r17, 0x01	; 1
    4910:	6d 81       	ldd	r22, Y+5	; 0x05
    4912:	7e 81       	ldd	r23, Y+6	; 0x06
    4914:	8f 81       	ldd	r24, Y+7	; 0x07
    4916:	98 85       	ldd	r25, Y+8	; 0x08
    4918:	20 e0       	ldi	r18, 0x00	; 0
    491a:	30 e0       	ldi	r19, 0x00	; 0
    491c:	4f e7       	ldi	r20, 0x7F	; 127
    491e:	53 e4       	ldi	r21, 0x43	; 67
    4920:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    4924:	18 16       	cp	r1, r24
    4926:	0c f0       	brlt	.+2      	; 0x492a <dly_100us+0x8a>
    4928:	10 e0       	ldi	r17, 0x00	; 0
    492a:	11 23       	and	r17, r17
    492c:	09 f4       	brne	.+2      	; 0x4930 <dly_100us+0x90>
    492e:	89 c0       	rjmp	.+274    	; 0x4a42 <dly_100us+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    4930:	69 81       	ldd	r22, Y+1	; 0x01
    4932:	7a 81       	ldd	r23, Y+2	; 0x02
    4934:	8b 81       	ldd	r24, Y+3	; 0x03
    4936:	9c 81       	ldd	r25, Y+4	; 0x04
    4938:	20 e0       	ldi	r18, 0x00	; 0
    493a:	30 e0       	ldi	r19, 0x00	; 0
    493c:	4a e7       	ldi	r20, 0x7A	; 122
    493e:	54 e4       	ldi	r21, 0x44	; 68
    4940:	0e 94 40 25 	call	0x4a80	; 0x4a80 <__divsf3>
    4944:	dc 01       	movw	r26, r24
    4946:	cb 01       	movw	r24, r22
    4948:	8a 87       	std	Y+10, r24	; 0x0a
    494a:	9b 87       	std	Y+11, r25	; 0x0b
    494c:	ac 87       	std	Y+12, r26	; 0x0c
    494e:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4950:	6a 85       	ldd	r22, Y+10	; 0x0a
    4952:	7b 85       	ldd	r23, Y+11	; 0x0b
    4954:	8c 85       	ldd	r24, Y+12	; 0x0c
    4956:	9d 85       	ldd	r25, Y+13	; 0x0d
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	30 e0       	ldi	r19, 0x00	; 0
    495c:	4a e7       	ldi	r20, 0x7A	; 122
    495e:	53 e4       	ldi	r21, 0x43	; 67
    4960:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    4964:	dc 01       	movw	r26, r24
    4966:	cb 01       	movw	r24, r22
    4968:	8e 87       	std	Y+14, r24	; 0x0e
    496a:	9f 87       	std	Y+15, r25	; 0x0f
    496c:	a8 8b       	std	Y+16, r26	; 0x10
    496e:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    4970:	11 e0       	ldi	r17, 0x01	; 1
    4972:	6e 85       	ldd	r22, Y+14	; 0x0e
    4974:	7f 85       	ldd	r23, Y+15	; 0x0f
    4976:	88 89       	ldd	r24, Y+16	; 0x10
    4978:	99 89       	ldd	r25, Y+17	; 0x11
    497a:	20 e0       	ldi	r18, 0x00	; 0
    497c:	30 e0       	ldi	r19, 0x00	; 0
    497e:	40 e8       	ldi	r20, 0x80	; 128
    4980:	5f e3       	ldi	r21, 0x3F	; 63
    4982:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <__cmpsf2>
    4986:	88 23       	and	r24, r24
    4988:	0c f0       	brlt	.+2      	; 0x498c <dly_100us+0xec>
    498a:	10 e0       	ldi	r17, 0x00	; 0
    498c:	11 23       	and	r17, r17
    498e:	29 f0       	breq	.+10     	; 0x499a <dly_100us+0xfa>
		__ticks = 1;
    4990:	81 e0       	ldi	r24, 0x01	; 1
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	9b 8b       	std	Y+19, r25	; 0x13
    4996:	8a 8b       	std	Y+18, r24	; 0x12
    4998:	46 c0       	rjmp	.+140    	; 0x4a26 <dly_100us+0x186>
	else if (__tmp > 65535)
    499a:	11 e0       	ldi	r17, 0x01	; 1
    499c:	6e 85       	ldd	r22, Y+14	; 0x0e
    499e:	7f 85       	ldd	r23, Y+15	; 0x0f
    49a0:	88 89       	ldd	r24, Y+16	; 0x10
    49a2:	99 89       	ldd	r25, Y+17	; 0x11
    49a4:	20 e0       	ldi	r18, 0x00	; 0
    49a6:	3f ef       	ldi	r19, 0xFF	; 255
    49a8:	4f e7       	ldi	r20, 0x7F	; 127
    49aa:	57 e4       	ldi	r21, 0x47	; 71
    49ac:	0e 94 49 26 	call	0x4c92	; 0x4c92 <__gesf2>
    49b0:	18 16       	cp	r1, r24
    49b2:	0c f0       	brlt	.+2      	; 0x49b6 <dly_100us+0x116>
    49b4:	10 e0       	ldi	r17, 0x00	; 0
    49b6:	11 23       	and	r17, r17
    49b8:	61 f1       	breq	.+88     	; 0x4a12 <dly_100us+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49ba:	6a 85       	ldd	r22, Y+10	; 0x0a
    49bc:	7b 85       	ldd	r23, Y+11	; 0x0b
    49be:	8c 85       	ldd	r24, Y+12	; 0x0c
    49c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    49c2:	20 e0       	ldi	r18, 0x00	; 0
    49c4:	30 e0       	ldi	r19, 0x00	; 0
    49c6:	40 e2       	ldi	r20, 0x20	; 32
    49c8:	51 e4       	ldi	r21, 0x41	; 65
    49ca:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__mulsf3>
    49ce:	dc 01       	movw	r26, r24
    49d0:	cb 01       	movw	r24, r22
    49d2:	bc 01       	movw	r22, r24
    49d4:	cd 01       	movw	r24, r26
    49d6:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    49da:	dc 01       	movw	r26, r24
    49dc:	cb 01       	movw	r24, r22
    49de:	9b 8b       	std	Y+19, r25	; 0x13
    49e0:	8a 8b       	std	Y+18, r24	; 0x12
    49e2:	12 c0       	rjmp	.+36     	; 0x4a08 <dly_100us+0x168>
    49e4:	89 e1       	ldi	r24, 0x19	; 25
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	9d 8b       	std	Y+21, r25	; 0x15
    49ea:	8c 8b       	std	Y+20, r24	; 0x14
    49ec:	8c 89       	ldd	r24, Y+20	; 0x14
    49ee:	9d 89       	ldd	r25, Y+21	; 0x15
    49f0:	8c 01       	movw	r16, r24
    49f2:	c8 01       	movw	r24, r16
    49f4:	01 97       	sbiw	r24, 0x01	; 1
    49f6:	f1 f7       	brne	.-4      	; 0x49f4 <dly_100us+0x154>
    49f8:	8c 01       	movw	r16, r24
    49fa:	1d 8b       	std	Y+21, r17	; 0x15
    49fc:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49fe:	8a 89       	ldd	r24, Y+18	; 0x12
    4a00:	9b 89       	ldd	r25, Y+19	; 0x13
    4a02:	01 97       	sbiw	r24, 0x01	; 1
    4a04:	9b 8b       	std	Y+19, r25	; 0x13
    4a06:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a08:	8a 89       	ldd	r24, Y+18	; 0x12
    4a0a:	9b 89       	ldd	r25, Y+19	; 0x13
    4a0c:	00 97       	sbiw	r24, 0x00	; 0
    4a0e:	51 f7       	brne	.-44     	; 0x49e4 <dly_100us+0x144>
    4a10:	28 c0       	rjmp	.+80     	; 0x4a62 <dly_100us+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a12:	6e 85       	ldd	r22, Y+14	; 0x0e
    4a14:	7f 85       	ldd	r23, Y+15	; 0x0f
    4a16:	88 89       	ldd	r24, Y+16	; 0x10
    4a18:	99 89       	ldd	r25, Y+17	; 0x11
    4a1a:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    4a1e:	dc 01       	movw	r26, r24
    4a20:	cb 01       	movw	r24, r22
    4a22:	9b 8b       	std	Y+19, r25	; 0x13
    4a24:	8a 8b       	std	Y+18, r24	; 0x12
    4a26:	8a 89       	ldd	r24, Y+18	; 0x12
    4a28:	9b 89       	ldd	r25, Y+19	; 0x13
    4a2a:	9f 8b       	std	Y+23, r25	; 0x17
    4a2c:	8e 8b       	std	Y+22, r24	; 0x16
    4a2e:	8e 89       	ldd	r24, Y+22	; 0x16
    4a30:	9f 89       	ldd	r25, Y+23	; 0x17
    4a32:	8c 01       	movw	r16, r24
    4a34:	c8 01       	movw	r24, r16
    4a36:	01 97       	sbiw	r24, 0x01	; 1
    4a38:	f1 f7       	brne	.-4      	; 0x4a36 <dly_100us+0x196>
    4a3a:	8c 01       	movw	r16, r24
    4a3c:	1f 8b       	std	Y+23, r17	; 0x17
    4a3e:	0e 8b       	std	Y+22, r16	; 0x16
    4a40:	10 c0       	rjmp	.+32     	; 0x4a62 <dly_100us+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4a42:	6d 81       	ldd	r22, Y+5	; 0x05
    4a44:	7e 81       	ldd	r23, Y+6	; 0x06
    4a46:	8f 81       	ldd	r24, Y+7	; 0x07
    4a48:	98 85       	ldd	r25, Y+8	; 0x08
    4a4a:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <__fixunssfsi>
    4a4e:	dc 01       	movw	r26, r24
    4a50:	cb 01       	movw	r24, r22
    4a52:	89 87       	std	Y+9, r24	; 0x09
    4a54:	89 85       	ldd	r24, Y+9	; 0x09
    4a56:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4a58:	88 8d       	ldd	r24, Y+24	; 0x18
    4a5a:	18 2f       	mov	r17, r24
    4a5c:	1a 95       	dec	r17
    4a5e:	f1 f7       	brne	.-4      	; 0x4a5c <dly_100us+0x1bc>
    4a60:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(1);
    4a62:	68 96       	adiw	r28, 0x18	; 24
    4a64:	0f b6       	in	r0, 0x3f	; 63
    4a66:	f8 94       	cli
    4a68:	de bf       	out	0x3e, r29	; 62
    4a6a:	0f be       	out	0x3f, r0	; 63
    4a6c:	cd bf       	out	0x3d, r28	; 61
    4a6e:	df 91       	pop	r29
    4a70:	cf 91       	pop	r28
    4a72:	1f 91       	pop	r17
    4a74:	0f 91       	pop	r16
    4a76:	08 95       	ret

00004a78 <__cmpsf2>:
    4a78:	97 d0       	rcall	.+302    	; 0x4ba8 <__fp_cmp>
    4a7a:	08 f4       	brcc	.+2      	; 0x4a7e <__cmpsf2+0x6>
    4a7c:	81 e0       	ldi	r24, 0x01	; 1
    4a7e:	08 95       	ret

00004a80 <__divsf3>:
    4a80:	0c d0       	rcall	.+24     	; 0x4a9a <__divsf3x>
    4a82:	cd c0       	rjmp	.+410    	; 0x4c1e <__fp_round>
    4a84:	c5 d0       	rcall	.+394    	; 0x4c10 <__fp_pscB>
    4a86:	40 f0       	brcs	.+16     	; 0x4a98 <__divsf3+0x18>
    4a88:	bc d0       	rcall	.+376    	; 0x4c02 <__fp_pscA>
    4a8a:	30 f0       	brcs	.+12     	; 0x4a98 <__divsf3+0x18>
    4a8c:	21 f4       	brne	.+8      	; 0x4a96 <__divsf3+0x16>
    4a8e:	5f 3f       	cpi	r21, 0xFF	; 255
    4a90:	19 f0       	breq	.+6      	; 0x4a98 <__divsf3+0x18>
    4a92:	ae c0       	rjmp	.+348    	; 0x4bf0 <__fp_inf>
    4a94:	51 11       	cpse	r21, r1
    4a96:	f7 c0       	rjmp	.+494    	; 0x4c86 <__fp_szero>
    4a98:	b1 c0       	rjmp	.+354    	; 0x4bfc <__fp_nan>

00004a9a <__divsf3x>:
    4a9a:	d2 d0       	rcall	.+420    	; 0x4c40 <__fp_split3>
    4a9c:	98 f3       	brcs	.-26     	; 0x4a84 <__divsf3+0x4>

00004a9e <__divsf3_pse>:
    4a9e:	99 23       	and	r25, r25
    4aa0:	c9 f3       	breq	.-14     	; 0x4a94 <__divsf3+0x14>
    4aa2:	55 23       	and	r21, r21
    4aa4:	b1 f3       	breq	.-20     	; 0x4a92 <__divsf3+0x12>
    4aa6:	95 1b       	sub	r25, r21
    4aa8:	55 0b       	sbc	r21, r21
    4aaa:	bb 27       	eor	r27, r27
    4aac:	aa 27       	eor	r26, r26
    4aae:	62 17       	cp	r22, r18
    4ab0:	73 07       	cpc	r23, r19
    4ab2:	84 07       	cpc	r24, r20
    4ab4:	38 f0       	brcs	.+14     	; 0x4ac4 <__divsf3_pse+0x26>
    4ab6:	9f 5f       	subi	r25, 0xFF	; 255
    4ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    4aba:	22 0f       	add	r18, r18
    4abc:	33 1f       	adc	r19, r19
    4abe:	44 1f       	adc	r20, r20
    4ac0:	aa 1f       	adc	r26, r26
    4ac2:	a9 f3       	breq	.-22     	; 0x4aae <__divsf3_pse+0x10>
    4ac4:	33 d0       	rcall	.+102    	; 0x4b2c <__divsf3_pse+0x8e>
    4ac6:	0e 2e       	mov	r0, r30
    4ac8:	3a f0       	brmi	.+14     	; 0x4ad8 <__divsf3_pse+0x3a>
    4aca:	e0 e8       	ldi	r30, 0x80	; 128
    4acc:	30 d0       	rcall	.+96     	; 0x4b2e <__divsf3_pse+0x90>
    4ace:	91 50       	subi	r25, 0x01	; 1
    4ad0:	50 40       	sbci	r21, 0x00	; 0
    4ad2:	e6 95       	lsr	r30
    4ad4:	00 1c       	adc	r0, r0
    4ad6:	ca f7       	brpl	.-14     	; 0x4aca <__divsf3_pse+0x2c>
    4ad8:	29 d0       	rcall	.+82     	; 0x4b2c <__divsf3_pse+0x8e>
    4ada:	fe 2f       	mov	r31, r30
    4adc:	27 d0       	rcall	.+78     	; 0x4b2c <__divsf3_pse+0x8e>
    4ade:	66 0f       	add	r22, r22
    4ae0:	77 1f       	adc	r23, r23
    4ae2:	88 1f       	adc	r24, r24
    4ae4:	bb 1f       	adc	r27, r27
    4ae6:	26 17       	cp	r18, r22
    4ae8:	37 07       	cpc	r19, r23
    4aea:	48 07       	cpc	r20, r24
    4aec:	ab 07       	cpc	r26, r27
    4aee:	b0 e8       	ldi	r27, 0x80	; 128
    4af0:	09 f0       	breq	.+2      	; 0x4af4 <__divsf3_pse+0x56>
    4af2:	bb 0b       	sbc	r27, r27
    4af4:	80 2d       	mov	r24, r0
    4af6:	bf 01       	movw	r22, r30
    4af8:	ff 27       	eor	r31, r31
    4afa:	93 58       	subi	r25, 0x83	; 131
    4afc:	5f 4f       	sbci	r21, 0xFF	; 255
    4afe:	2a f0       	brmi	.+10     	; 0x4b0a <__divsf3_pse+0x6c>
    4b00:	9e 3f       	cpi	r25, 0xFE	; 254
    4b02:	51 05       	cpc	r21, r1
    4b04:	68 f0       	brcs	.+26     	; 0x4b20 <__divsf3_pse+0x82>
    4b06:	74 c0       	rjmp	.+232    	; 0x4bf0 <__fp_inf>
    4b08:	be c0       	rjmp	.+380    	; 0x4c86 <__fp_szero>
    4b0a:	5f 3f       	cpi	r21, 0xFF	; 255
    4b0c:	ec f3       	brlt	.-6      	; 0x4b08 <__divsf3_pse+0x6a>
    4b0e:	98 3e       	cpi	r25, 0xE8	; 232
    4b10:	dc f3       	brlt	.-10     	; 0x4b08 <__divsf3_pse+0x6a>
    4b12:	86 95       	lsr	r24
    4b14:	77 95       	ror	r23
    4b16:	67 95       	ror	r22
    4b18:	b7 95       	ror	r27
    4b1a:	f7 95       	ror	r31
    4b1c:	9f 5f       	subi	r25, 0xFF	; 255
    4b1e:	c9 f7       	brne	.-14     	; 0x4b12 <__divsf3_pse+0x74>
    4b20:	88 0f       	add	r24, r24
    4b22:	91 1d       	adc	r25, r1
    4b24:	96 95       	lsr	r25
    4b26:	87 95       	ror	r24
    4b28:	97 f9       	bld	r25, 7
    4b2a:	08 95       	ret
    4b2c:	e1 e0       	ldi	r30, 0x01	; 1
    4b2e:	66 0f       	add	r22, r22
    4b30:	77 1f       	adc	r23, r23
    4b32:	88 1f       	adc	r24, r24
    4b34:	bb 1f       	adc	r27, r27
    4b36:	62 17       	cp	r22, r18
    4b38:	73 07       	cpc	r23, r19
    4b3a:	84 07       	cpc	r24, r20
    4b3c:	ba 07       	cpc	r27, r26
    4b3e:	20 f0       	brcs	.+8      	; 0x4b48 <__divsf3_pse+0xaa>
    4b40:	62 1b       	sub	r22, r18
    4b42:	73 0b       	sbc	r23, r19
    4b44:	84 0b       	sbc	r24, r20
    4b46:	ba 0b       	sbc	r27, r26
    4b48:	ee 1f       	adc	r30, r30
    4b4a:	88 f7       	brcc	.-30     	; 0x4b2e <__divsf3_pse+0x90>
    4b4c:	e0 95       	com	r30
    4b4e:	08 95       	ret

00004b50 <__fixunssfsi>:
    4b50:	7f d0       	rcall	.+254    	; 0x4c50 <__fp_splitA>
    4b52:	88 f0       	brcs	.+34     	; 0x4b76 <__fixunssfsi+0x26>
    4b54:	9f 57       	subi	r25, 0x7F	; 127
    4b56:	90 f0       	brcs	.+36     	; 0x4b7c <__fixunssfsi+0x2c>
    4b58:	b9 2f       	mov	r27, r25
    4b5a:	99 27       	eor	r25, r25
    4b5c:	b7 51       	subi	r27, 0x17	; 23
    4b5e:	a0 f0       	brcs	.+40     	; 0x4b88 <__fixunssfsi+0x38>
    4b60:	d1 f0       	breq	.+52     	; 0x4b96 <__fixunssfsi+0x46>
    4b62:	66 0f       	add	r22, r22
    4b64:	77 1f       	adc	r23, r23
    4b66:	88 1f       	adc	r24, r24
    4b68:	99 1f       	adc	r25, r25
    4b6a:	1a f0       	brmi	.+6      	; 0x4b72 <__fixunssfsi+0x22>
    4b6c:	ba 95       	dec	r27
    4b6e:	c9 f7       	brne	.-14     	; 0x4b62 <__fixunssfsi+0x12>
    4b70:	12 c0       	rjmp	.+36     	; 0x4b96 <__fixunssfsi+0x46>
    4b72:	b1 30       	cpi	r27, 0x01	; 1
    4b74:	81 f0       	breq	.+32     	; 0x4b96 <__fixunssfsi+0x46>
    4b76:	86 d0       	rcall	.+268    	; 0x4c84 <__fp_zero>
    4b78:	b1 e0       	ldi	r27, 0x01	; 1
    4b7a:	08 95       	ret
    4b7c:	83 c0       	rjmp	.+262    	; 0x4c84 <__fp_zero>
    4b7e:	67 2f       	mov	r22, r23
    4b80:	78 2f       	mov	r23, r24
    4b82:	88 27       	eor	r24, r24
    4b84:	b8 5f       	subi	r27, 0xF8	; 248
    4b86:	39 f0       	breq	.+14     	; 0x4b96 <__fixunssfsi+0x46>
    4b88:	b9 3f       	cpi	r27, 0xF9	; 249
    4b8a:	cc f3       	brlt	.-14     	; 0x4b7e <__fixunssfsi+0x2e>
    4b8c:	86 95       	lsr	r24
    4b8e:	77 95       	ror	r23
    4b90:	67 95       	ror	r22
    4b92:	b3 95       	inc	r27
    4b94:	d9 f7       	brne	.-10     	; 0x4b8c <__fixunssfsi+0x3c>
    4b96:	3e f4       	brtc	.+14     	; 0x4ba6 <__fixunssfsi+0x56>
    4b98:	90 95       	com	r25
    4b9a:	80 95       	com	r24
    4b9c:	70 95       	com	r23
    4b9e:	61 95       	neg	r22
    4ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    4ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ba6:	08 95       	ret

00004ba8 <__fp_cmp>:
    4ba8:	99 0f       	add	r25, r25
    4baa:	00 08       	sbc	r0, r0
    4bac:	55 0f       	add	r21, r21
    4bae:	aa 0b       	sbc	r26, r26
    4bb0:	e0 e8       	ldi	r30, 0x80	; 128
    4bb2:	fe ef       	ldi	r31, 0xFE	; 254
    4bb4:	16 16       	cp	r1, r22
    4bb6:	17 06       	cpc	r1, r23
    4bb8:	e8 07       	cpc	r30, r24
    4bba:	f9 07       	cpc	r31, r25
    4bbc:	c0 f0       	brcs	.+48     	; 0x4bee <__fp_cmp+0x46>
    4bbe:	12 16       	cp	r1, r18
    4bc0:	13 06       	cpc	r1, r19
    4bc2:	e4 07       	cpc	r30, r20
    4bc4:	f5 07       	cpc	r31, r21
    4bc6:	98 f0       	brcs	.+38     	; 0x4bee <__fp_cmp+0x46>
    4bc8:	62 1b       	sub	r22, r18
    4bca:	73 0b       	sbc	r23, r19
    4bcc:	84 0b       	sbc	r24, r20
    4bce:	95 0b       	sbc	r25, r21
    4bd0:	39 f4       	brne	.+14     	; 0x4be0 <__fp_cmp+0x38>
    4bd2:	0a 26       	eor	r0, r26
    4bd4:	61 f0       	breq	.+24     	; 0x4bee <__fp_cmp+0x46>
    4bd6:	23 2b       	or	r18, r19
    4bd8:	24 2b       	or	r18, r20
    4bda:	25 2b       	or	r18, r21
    4bdc:	21 f4       	brne	.+8      	; 0x4be6 <__fp_cmp+0x3e>
    4bde:	08 95       	ret
    4be0:	0a 26       	eor	r0, r26
    4be2:	09 f4       	brne	.+2      	; 0x4be6 <__fp_cmp+0x3e>
    4be4:	a1 40       	sbci	r26, 0x01	; 1
    4be6:	a6 95       	lsr	r26
    4be8:	8f ef       	ldi	r24, 0xFF	; 255
    4bea:	81 1d       	adc	r24, r1
    4bec:	81 1d       	adc	r24, r1
    4bee:	08 95       	ret

00004bf0 <__fp_inf>:
    4bf0:	97 f9       	bld	r25, 7
    4bf2:	9f 67       	ori	r25, 0x7F	; 127
    4bf4:	80 e8       	ldi	r24, 0x80	; 128
    4bf6:	70 e0       	ldi	r23, 0x00	; 0
    4bf8:	60 e0       	ldi	r22, 0x00	; 0
    4bfa:	08 95       	ret

00004bfc <__fp_nan>:
    4bfc:	9f ef       	ldi	r25, 0xFF	; 255
    4bfe:	80 ec       	ldi	r24, 0xC0	; 192
    4c00:	08 95       	ret

00004c02 <__fp_pscA>:
    4c02:	00 24       	eor	r0, r0
    4c04:	0a 94       	dec	r0
    4c06:	16 16       	cp	r1, r22
    4c08:	17 06       	cpc	r1, r23
    4c0a:	18 06       	cpc	r1, r24
    4c0c:	09 06       	cpc	r0, r25
    4c0e:	08 95       	ret

00004c10 <__fp_pscB>:
    4c10:	00 24       	eor	r0, r0
    4c12:	0a 94       	dec	r0
    4c14:	12 16       	cp	r1, r18
    4c16:	13 06       	cpc	r1, r19
    4c18:	14 06       	cpc	r1, r20
    4c1a:	05 06       	cpc	r0, r21
    4c1c:	08 95       	ret

00004c1e <__fp_round>:
    4c1e:	09 2e       	mov	r0, r25
    4c20:	03 94       	inc	r0
    4c22:	00 0c       	add	r0, r0
    4c24:	11 f4       	brne	.+4      	; 0x4c2a <__fp_round+0xc>
    4c26:	88 23       	and	r24, r24
    4c28:	52 f0       	brmi	.+20     	; 0x4c3e <__fp_round+0x20>
    4c2a:	bb 0f       	add	r27, r27
    4c2c:	40 f4       	brcc	.+16     	; 0x4c3e <__fp_round+0x20>
    4c2e:	bf 2b       	or	r27, r31
    4c30:	11 f4       	brne	.+4      	; 0x4c36 <__fp_round+0x18>
    4c32:	60 ff       	sbrs	r22, 0
    4c34:	04 c0       	rjmp	.+8      	; 0x4c3e <__fp_round+0x20>
    4c36:	6f 5f       	subi	r22, 0xFF	; 255
    4c38:	7f 4f       	sbci	r23, 0xFF	; 255
    4c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    4c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    4c3e:	08 95       	ret

00004c40 <__fp_split3>:
    4c40:	57 fd       	sbrc	r21, 7
    4c42:	90 58       	subi	r25, 0x80	; 128
    4c44:	44 0f       	add	r20, r20
    4c46:	55 1f       	adc	r21, r21
    4c48:	59 f0       	breq	.+22     	; 0x4c60 <__fp_splitA+0x10>
    4c4a:	5f 3f       	cpi	r21, 0xFF	; 255
    4c4c:	71 f0       	breq	.+28     	; 0x4c6a <__fp_splitA+0x1a>
    4c4e:	47 95       	ror	r20

00004c50 <__fp_splitA>:
    4c50:	88 0f       	add	r24, r24
    4c52:	97 fb       	bst	r25, 7
    4c54:	99 1f       	adc	r25, r25
    4c56:	61 f0       	breq	.+24     	; 0x4c70 <__fp_splitA+0x20>
    4c58:	9f 3f       	cpi	r25, 0xFF	; 255
    4c5a:	79 f0       	breq	.+30     	; 0x4c7a <__fp_splitA+0x2a>
    4c5c:	87 95       	ror	r24
    4c5e:	08 95       	ret
    4c60:	12 16       	cp	r1, r18
    4c62:	13 06       	cpc	r1, r19
    4c64:	14 06       	cpc	r1, r20
    4c66:	55 1f       	adc	r21, r21
    4c68:	f2 cf       	rjmp	.-28     	; 0x4c4e <__fp_split3+0xe>
    4c6a:	46 95       	lsr	r20
    4c6c:	f1 df       	rcall	.-30     	; 0x4c50 <__fp_splitA>
    4c6e:	08 c0       	rjmp	.+16     	; 0x4c80 <__fp_splitA+0x30>
    4c70:	16 16       	cp	r1, r22
    4c72:	17 06       	cpc	r1, r23
    4c74:	18 06       	cpc	r1, r24
    4c76:	99 1f       	adc	r25, r25
    4c78:	f1 cf       	rjmp	.-30     	; 0x4c5c <__fp_splitA+0xc>
    4c7a:	86 95       	lsr	r24
    4c7c:	71 05       	cpc	r23, r1
    4c7e:	61 05       	cpc	r22, r1
    4c80:	08 94       	sec
    4c82:	08 95       	ret

00004c84 <__fp_zero>:
    4c84:	e8 94       	clt

00004c86 <__fp_szero>:
    4c86:	bb 27       	eor	r27, r27
    4c88:	66 27       	eor	r22, r22
    4c8a:	77 27       	eor	r23, r23
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	97 f9       	bld	r25, 7
    4c90:	08 95       	ret

00004c92 <__gesf2>:
    4c92:	8a df       	rcall	.-236    	; 0x4ba8 <__fp_cmp>
    4c94:	08 f4       	brcc	.+2      	; 0x4c98 <__gesf2+0x6>
    4c96:	8f ef       	ldi	r24, 0xFF	; 255
    4c98:	08 95       	ret

00004c9a <__mulsf3>:
    4c9a:	0b d0       	rcall	.+22     	; 0x4cb2 <__mulsf3x>
    4c9c:	c0 cf       	rjmp	.-128    	; 0x4c1e <__fp_round>
    4c9e:	b1 df       	rcall	.-158    	; 0x4c02 <__fp_pscA>
    4ca0:	28 f0       	brcs	.+10     	; 0x4cac <__mulsf3+0x12>
    4ca2:	b6 df       	rcall	.-148    	; 0x4c10 <__fp_pscB>
    4ca4:	18 f0       	brcs	.+6      	; 0x4cac <__mulsf3+0x12>
    4ca6:	95 23       	and	r25, r21
    4ca8:	09 f0       	breq	.+2      	; 0x4cac <__mulsf3+0x12>
    4caa:	a2 cf       	rjmp	.-188    	; 0x4bf0 <__fp_inf>
    4cac:	a7 cf       	rjmp	.-178    	; 0x4bfc <__fp_nan>
    4cae:	11 24       	eor	r1, r1
    4cb0:	ea cf       	rjmp	.-44     	; 0x4c86 <__fp_szero>

00004cb2 <__mulsf3x>:
    4cb2:	c6 df       	rcall	.-116    	; 0x4c40 <__fp_split3>
    4cb4:	a0 f3       	brcs	.-24     	; 0x4c9e <__mulsf3+0x4>

00004cb6 <__mulsf3_pse>:
    4cb6:	95 9f       	mul	r25, r21
    4cb8:	d1 f3       	breq	.-12     	; 0x4cae <__mulsf3+0x14>
    4cba:	95 0f       	add	r25, r21
    4cbc:	50 e0       	ldi	r21, 0x00	; 0
    4cbe:	55 1f       	adc	r21, r21
    4cc0:	62 9f       	mul	r22, r18
    4cc2:	f0 01       	movw	r30, r0
    4cc4:	72 9f       	mul	r23, r18
    4cc6:	bb 27       	eor	r27, r27
    4cc8:	f0 0d       	add	r31, r0
    4cca:	b1 1d       	adc	r27, r1
    4ccc:	63 9f       	mul	r22, r19
    4cce:	aa 27       	eor	r26, r26
    4cd0:	f0 0d       	add	r31, r0
    4cd2:	b1 1d       	adc	r27, r1
    4cd4:	aa 1f       	adc	r26, r26
    4cd6:	64 9f       	mul	r22, r20
    4cd8:	66 27       	eor	r22, r22
    4cda:	b0 0d       	add	r27, r0
    4cdc:	a1 1d       	adc	r26, r1
    4cde:	66 1f       	adc	r22, r22
    4ce0:	82 9f       	mul	r24, r18
    4ce2:	22 27       	eor	r18, r18
    4ce4:	b0 0d       	add	r27, r0
    4ce6:	a1 1d       	adc	r26, r1
    4ce8:	62 1f       	adc	r22, r18
    4cea:	73 9f       	mul	r23, r19
    4cec:	b0 0d       	add	r27, r0
    4cee:	a1 1d       	adc	r26, r1
    4cf0:	62 1f       	adc	r22, r18
    4cf2:	83 9f       	mul	r24, r19
    4cf4:	a0 0d       	add	r26, r0
    4cf6:	61 1d       	adc	r22, r1
    4cf8:	22 1f       	adc	r18, r18
    4cfa:	74 9f       	mul	r23, r20
    4cfc:	33 27       	eor	r19, r19
    4cfe:	a0 0d       	add	r26, r0
    4d00:	61 1d       	adc	r22, r1
    4d02:	23 1f       	adc	r18, r19
    4d04:	84 9f       	mul	r24, r20
    4d06:	60 0d       	add	r22, r0
    4d08:	21 1d       	adc	r18, r1
    4d0a:	82 2f       	mov	r24, r18
    4d0c:	76 2f       	mov	r23, r22
    4d0e:	6a 2f       	mov	r22, r26
    4d10:	11 24       	eor	r1, r1
    4d12:	9f 57       	subi	r25, 0x7F	; 127
    4d14:	50 40       	sbci	r21, 0x00	; 0
    4d16:	8a f0       	brmi	.+34     	; 0x4d3a <__mulsf3_pse+0x84>
    4d18:	e1 f0       	breq	.+56     	; 0x4d52 <__mulsf3_pse+0x9c>
    4d1a:	88 23       	and	r24, r24
    4d1c:	4a f0       	brmi	.+18     	; 0x4d30 <__mulsf3_pse+0x7a>
    4d1e:	ee 0f       	add	r30, r30
    4d20:	ff 1f       	adc	r31, r31
    4d22:	bb 1f       	adc	r27, r27
    4d24:	66 1f       	adc	r22, r22
    4d26:	77 1f       	adc	r23, r23
    4d28:	88 1f       	adc	r24, r24
    4d2a:	91 50       	subi	r25, 0x01	; 1
    4d2c:	50 40       	sbci	r21, 0x00	; 0
    4d2e:	a9 f7       	brne	.-22     	; 0x4d1a <__mulsf3_pse+0x64>
    4d30:	9e 3f       	cpi	r25, 0xFE	; 254
    4d32:	51 05       	cpc	r21, r1
    4d34:	70 f0       	brcs	.+28     	; 0x4d52 <__mulsf3_pse+0x9c>
    4d36:	5c cf       	rjmp	.-328    	; 0x4bf0 <__fp_inf>
    4d38:	a6 cf       	rjmp	.-180    	; 0x4c86 <__fp_szero>
    4d3a:	5f 3f       	cpi	r21, 0xFF	; 255
    4d3c:	ec f3       	brlt	.-6      	; 0x4d38 <__mulsf3_pse+0x82>
    4d3e:	98 3e       	cpi	r25, 0xE8	; 232
    4d40:	dc f3       	brlt	.-10     	; 0x4d38 <__mulsf3_pse+0x82>
    4d42:	86 95       	lsr	r24
    4d44:	77 95       	ror	r23
    4d46:	67 95       	ror	r22
    4d48:	b7 95       	ror	r27
    4d4a:	f7 95       	ror	r31
    4d4c:	e7 95       	ror	r30
    4d4e:	9f 5f       	subi	r25, 0xFF	; 255
    4d50:	c1 f7       	brne	.-16     	; 0x4d42 <__mulsf3_pse+0x8c>
    4d52:	fe 2b       	or	r31, r30
    4d54:	88 0f       	add	r24, r24
    4d56:	91 1d       	adc	r25, r1
    4d58:	96 95       	lsr	r25
    4d5a:	87 95       	ror	r24
    4d5c:	97 f9       	bld	r25, 7
    4d5e:	08 95       	ret

00004d60 <__mulsi3>:
    4d60:	62 9f       	mul	r22, r18
    4d62:	d0 01       	movw	r26, r0
    4d64:	73 9f       	mul	r23, r19
    4d66:	f0 01       	movw	r30, r0
    4d68:	82 9f       	mul	r24, r18
    4d6a:	e0 0d       	add	r30, r0
    4d6c:	f1 1d       	adc	r31, r1
    4d6e:	64 9f       	mul	r22, r20
    4d70:	e0 0d       	add	r30, r0
    4d72:	f1 1d       	adc	r31, r1
    4d74:	92 9f       	mul	r25, r18
    4d76:	f0 0d       	add	r31, r0
    4d78:	83 9f       	mul	r24, r19
    4d7a:	f0 0d       	add	r31, r0
    4d7c:	74 9f       	mul	r23, r20
    4d7e:	f0 0d       	add	r31, r0
    4d80:	65 9f       	mul	r22, r21
    4d82:	f0 0d       	add	r31, r0
    4d84:	99 27       	eor	r25, r25
    4d86:	72 9f       	mul	r23, r18
    4d88:	b0 0d       	add	r27, r0
    4d8a:	e1 1d       	adc	r30, r1
    4d8c:	f9 1f       	adc	r31, r25
    4d8e:	63 9f       	mul	r22, r19
    4d90:	b0 0d       	add	r27, r0
    4d92:	e1 1d       	adc	r30, r1
    4d94:	f9 1f       	adc	r31, r25
    4d96:	bd 01       	movw	r22, r26
    4d98:	cf 01       	movw	r24, r30
    4d9a:	11 24       	eor	r1, r1
    4d9c:	08 95       	ret

00004d9e <__udivmodsi4>:
    4d9e:	a1 e2       	ldi	r26, 0x21	; 33
    4da0:	1a 2e       	mov	r1, r26
    4da2:	aa 1b       	sub	r26, r26
    4da4:	bb 1b       	sub	r27, r27
    4da6:	fd 01       	movw	r30, r26
    4da8:	0d c0       	rjmp	.+26     	; 0x4dc4 <__udivmodsi4_ep>

00004daa <__udivmodsi4_loop>:
    4daa:	aa 1f       	adc	r26, r26
    4dac:	bb 1f       	adc	r27, r27
    4dae:	ee 1f       	adc	r30, r30
    4db0:	ff 1f       	adc	r31, r31
    4db2:	a2 17       	cp	r26, r18
    4db4:	b3 07       	cpc	r27, r19
    4db6:	e4 07       	cpc	r30, r20
    4db8:	f5 07       	cpc	r31, r21
    4dba:	20 f0       	brcs	.+8      	; 0x4dc4 <__udivmodsi4_ep>
    4dbc:	a2 1b       	sub	r26, r18
    4dbe:	b3 0b       	sbc	r27, r19
    4dc0:	e4 0b       	sbc	r30, r20
    4dc2:	f5 0b       	sbc	r31, r21

00004dc4 <__udivmodsi4_ep>:
    4dc4:	66 1f       	adc	r22, r22
    4dc6:	77 1f       	adc	r23, r23
    4dc8:	88 1f       	adc	r24, r24
    4dca:	99 1f       	adc	r25, r25
    4dcc:	1a 94       	dec	r1
    4dce:	69 f7       	brne	.-38     	; 0x4daa <__udivmodsi4_loop>
    4dd0:	60 95       	com	r22
    4dd2:	70 95       	com	r23
    4dd4:	80 95       	com	r24
    4dd6:	90 95       	com	r25
    4dd8:	9b 01       	movw	r18, r22
    4dda:	ac 01       	movw	r20, r24
    4ddc:	bd 01       	movw	r22, r26
    4dde:	cf 01       	movw	r24, r30
    4de0:	08 95       	ret

00004de2 <sprintf>:
    4de2:	ae e0       	ldi	r26, 0x0E	; 14
    4de4:	b0 e0       	ldi	r27, 0x00	; 0
    4de6:	e7 ef       	ldi	r30, 0xF7	; 247
    4de8:	f6 e2       	ldi	r31, 0x26	; 38
    4dea:	0c 94 9f 29 	jmp	0x533e	; 0x533e <__prologue_saves__+0x1c>
    4dee:	0d 89       	ldd	r16, Y+21	; 0x15
    4df0:	1e 89       	ldd	r17, Y+22	; 0x16
    4df2:	86 e0       	ldi	r24, 0x06	; 6
    4df4:	8c 83       	std	Y+4, r24	; 0x04
    4df6:	1a 83       	std	Y+2, r17	; 0x02
    4df8:	09 83       	std	Y+1, r16	; 0x01
    4dfa:	8f ef       	ldi	r24, 0xFF	; 255
    4dfc:	9f e7       	ldi	r25, 0x7F	; 127
    4dfe:	9e 83       	std	Y+6, r25	; 0x06
    4e00:	8d 83       	std	Y+5, r24	; 0x05
    4e02:	ae 01       	movw	r20, r28
    4e04:	47 5e       	subi	r20, 0xE7	; 231
    4e06:	5f 4f       	sbci	r21, 0xFF	; 255
    4e08:	ce 01       	movw	r24, r28
    4e0a:	01 96       	adiw	r24, 0x01	; 1
    4e0c:	6f 89       	ldd	r22, Y+23	; 0x17
    4e0e:	78 8d       	ldd	r23, Y+24	; 0x18
    4e10:	0e 94 13 27 	call	0x4e26	; 0x4e26 <vfprintf>
    4e14:	ef 81       	ldd	r30, Y+7	; 0x07
    4e16:	f8 85       	ldd	r31, Y+8	; 0x08
    4e18:	e0 0f       	add	r30, r16
    4e1a:	f1 1f       	adc	r31, r17
    4e1c:	10 82       	st	Z, r1
    4e1e:	2e 96       	adiw	r28, 0x0e	; 14
    4e20:	e4 e0       	ldi	r30, 0x04	; 4
    4e22:	0c 94 bb 29 	jmp	0x5376	; 0x5376 <__epilogue_restores__+0x1c>

00004e26 <vfprintf>:
    4e26:	ad e0       	ldi	r26, 0x0D	; 13
    4e28:	b0 e0       	ldi	r27, 0x00	; 0
    4e2a:	e9 e1       	ldi	r30, 0x19	; 25
    4e2c:	f7 e2       	ldi	r31, 0x27	; 39
    4e2e:	0c 94 91 29 	jmp	0x5322	; 0x5322 <__prologue_saves__>
    4e32:	3c 01       	movw	r6, r24
    4e34:	7d 87       	std	Y+13, r23	; 0x0d
    4e36:	6c 87       	std	Y+12, r22	; 0x0c
    4e38:	5a 01       	movw	r10, r20
    4e3a:	fc 01       	movw	r30, r24
    4e3c:	17 82       	std	Z+7, r1	; 0x07
    4e3e:	16 82       	std	Z+6, r1	; 0x06
    4e40:	83 81       	ldd	r24, Z+3	; 0x03
    4e42:	81 ff       	sbrs	r24, 1
    4e44:	c8 c1       	rjmp	.+912    	; 0x51d6 <vfprintf+0x3b0>
    4e46:	2e 01       	movw	r4, r28
    4e48:	08 94       	sec
    4e4a:	41 1c       	adc	r4, r1
    4e4c:	51 1c       	adc	r5, r1
    4e4e:	f3 01       	movw	r30, r6
    4e50:	93 81       	ldd	r25, Z+3	; 0x03
    4e52:	ec 85       	ldd	r30, Y+12	; 0x0c
    4e54:	fd 85       	ldd	r31, Y+13	; 0x0d
    4e56:	93 fd       	sbrc	r25, 3
    4e58:	85 91       	lpm	r24, Z+
    4e5a:	93 ff       	sbrs	r25, 3
    4e5c:	81 91       	ld	r24, Z+
    4e5e:	fd 87       	std	Y+13, r31	; 0x0d
    4e60:	ec 87       	std	Y+12, r30	; 0x0c
    4e62:	88 23       	and	r24, r24
    4e64:	09 f4       	brne	.+2      	; 0x4e68 <vfprintf+0x42>
    4e66:	b3 c1       	rjmp	.+870    	; 0x51ce <vfprintf+0x3a8>
    4e68:	85 32       	cpi	r24, 0x25	; 37
    4e6a:	41 f4       	brne	.+16     	; 0x4e7c <vfprintf+0x56>
    4e6c:	93 fd       	sbrc	r25, 3
    4e6e:	85 91       	lpm	r24, Z+
    4e70:	93 ff       	sbrs	r25, 3
    4e72:	81 91       	ld	r24, Z+
    4e74:	fd 87       	std	Y+13, r31	; 0x0d
    4e76:	ec 87       	std	Y+12, r30	; 0x0c
    4e78:	85 32       	cpi	r24, 0x25	; 37
    4e7a:	29 f4       	brne	.+10     	; 0x4e86 <vfprintf+0x60>
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	b3 01       	movw	r22, r6
    4e80:	0e 94 07 29 	call	0x520e	; 0x520e <fputc>
    4e84:	e4 cf       	rjmp	.-56     	; 0x4e4e <vfprintf+0x28>
    4e86:	ff 24       	eor	r15, r15
    4e88:	ee 24       	eor	r14, r14
    4e8a:	10 e0       	ldi	r17, 0x00	; 0
    4e8c:	10 32       	cpi	r17, 0x20	; 32
    4e8e:	b0 f4       	brcc	.+44     	; 0x4ebc <vfprintf+0x96>
    4e90:	8b 32       	cpi	r24, 0x2B	; 43
    4e92:	69 f0       	breq	.+26     	; 0x4eae <vfprintf+0x88>
    4e94:	8c 32       	cpi	r24, 0x2C	; 44
    4e96:	28 f4       	brcc	.+10     	; 0x4ea2 <vfprintf+0x7c>
    4e98:	80 32       	cpi	r24, 0x20	; 32
    4e9a:	51 f0       	breq	.+20     	; 0x4eb0 <vfprintf+0x8a>
    4e9c:	83 32       	cpi	r24, 0x23	; 35
    4e9e:	71 f4       	brne	.+28     	; 0x4ebc <vfprintf+0x96>
    4ea0:	0b c0       	rjmp	.+22     	; 0x4eb8 <vfprintf+0x92>
    4ea2:	8d 32       	cpi	r24, 0x2D	; 45
    4ea4:	39 f0       	breq	.+14     	; 0x4eb4 <vfprintf+0x8e>
    4ea6:	80 33       	cpi	r24, 0x30	; 48
    4ea8:	49 f4       	brne	.+18     	; 0x4ebc <vfprintf+0x96>
    4eaa:	11 60       	ori	r17, 0x01	; 1
    4eac:	2c c0       	rjmp	.+88     	; 0x4f06 <vfprintf+0xe0>
    4eae:	12 60       	ori	r17, 0x02	; 2
    4eb0:	14 60       	ori	r17, 0x04	; 4
    4eb2:	29 c0       	rjmp	.+82     	; 0x4f06 <vfprintf+0xe0>
    4eb4:	18 60       	ori	r17, 0x08	; 8
    4eb6:	27 c0       	rjmp	.+78     	; 0x4f06 <vfprintf+0xe0>
    4eb8:	10 61       	ori	r17, 0x10	; 16
    4eba:	25 c0       	rjmp	.+74     	; 0x4f06 <vfprintf+0xe0>
    4ebc:	17 fd       	sbrc	r17, 7
    4ebe:	2e c0       	rjmp	.+92     	; 0x4f1c <vfprintf+0xf6>
    4ec0:	28 2f       	mov	r18, r24
    4ec2:	20 53       	subi	r18, 0x30	; 48
    4ec4:	2a 30       	cpi	r18, 0x0A	; 10
    4ec6:	98 f4       	brcc	.+38     	; 0x4eee <vfprintf+0xc8>
    4ec8:	16 ff       	sbrs	r17, 6
    4eca:	08 c0       	rjmp	.+16     	; 0x4edc <vfprintf+0xb6>
    4ecc:	8f 2d       	mov	r24, r15
    4ece:	88 0f       	add	r24, r24
    4ed0:	f8 2e       	mov	r15, r24
    4ed2:	ff 0c       	add	r15, r15
    4ed4:	ff 0c       	add	r15, r15
    4ed6:	f8 0e       	add	r15, r24
    4ed8:	f2 0e       	add	r15, r18
    4eda:	15 c0       	rjmp	.+42     	; 0x4f06 <vfprintf+0xe0>
    4edc:	8e 2d       	mov	r24, r14
    4ede:	88 0f       	add	r24, r24
    4ee0:	e8 2e       	mov	r14, r24
    4ee2:	ee 0c       	add	r14, r14
    4ee4:	ee 0c       	add	r14, r14
    4ee6:	e8 0e       	add	r14, r24
    4ee8:	e2 0e       	add	r14, r18
    4eea:	10 62       	ori	r17, 0x20	; 32
    4eec:	0c c0       	rjmp	.+24     	; 0x4f06 <vfprintf+0xe0>
    4eee:	8e 32       	cpi	r24, 0x2E	; 46
    4ef0:	21 f4       	brne	.+8      	; 0x4efa <vfprintf+0xd4>
    4ef2:	16 fd       	sbrc	r17, 6
    4ef4:	6c c1       	rjmp	.+728    	; 0x51ce <vfprintf+0x3a8>
    4ef6:	10 64       	ori	r17, 0x40	; 64
    4ef8:	06 c0       	rjmp	.+12     	; 0x4f06 <vfprintf+0xe0>
    4efa:	8c 36       	cpi	r24, 0x6C	; 108
    4efc:	11 f4       	brne	.+4      	; 0x4f02 <vfprintf+0xdc>
    4efe:	10 68       	ori	r17, 0x80	; 128
    4f00:	02 c0       	rjmp	.+4      	; 0x4f06 <vfprintf+0xe0>
    4f02:	88 36       	cpi	r24, 0x68	; 104
    4f04:	59 f4       	brne	.+22     	; 0x4f1c <vfprintf+0xf6>
    4f06:	ec 85       	ldd	r30, Y+12	; 0x0c
    4f08:	fd 85       	ldd	r31, Y+13	; 0x0d
    4f0a:	93 fd       	sbrc	r25, 3
    4f0c:	85 91       	lpm	r24, Z+
    4f0e:	93 ff       	sbrs	r25, 3
    4f10:	81 91       	ld	r24, Z+
    4f12:	fd 87       	std	Y+13, r31	; 0x0d
    4f14:	ec 87       	std	Y+12, r30	; 0x0c
    4f16:	88 23       	and	r24, r24
    4f18:	09 f0       	breq	.+2      	; 0x4f1c <vfprintf+0xf6>
    4f1a:	b8 cf       	rjmp	.-144    	; 0x4e8c <vfprintf+0x66>
    4f1c:	98 2f       	mov	r25, r24
    4f1e:	95 54       	subi	r25, 0x45	; 69
    4f20:	93 30       	cpi	r25, 0x03	; 3
    4f22:	18 f0       	brcs	.+6      	; 0x4f2a <vfprintf+0x104>
    4f24:	90 52       	subi	r25, 0x20	; 32
    4f26:	93 30       	cpi	r25, 0x03	; 3
    4f28:	38 f4       	brcc	.+14     	; 0x4f38 <vfprintf+0x112>
    4f2a:	24 e0       	ldi	r18, 0x04	; 4
    4f2c:	30 e0       	ldi	r19, 0x00	; 0
    4f2e:	a2 0e       	add	r10, r18
    4f30:	b3 1e       	adc	r11, r19
    4f32:	3f e3       	ldi	r19, 0x3F	; 63
    4f34:	39 83       	std	Y+1, r19	; 0x01
    4f36:	0f c0       	rjmp	.+30     	; 0x4f56 <vfprintf+0x130>
    4f38:	83 36       	cpi	r24, 0x63	; 99
    4f3a:	31 f0       	breq	.+12     	; 0x4f48 <vfprintf+0x122>
    4f3c:	83 37       	cpi	r24, 0x73	; 115
    4f3e:	81 f0       	breq	.+32     	; 0x4f60 <vfprintf+0x13a>
    4f40:	83 35       	cpi	r24, 0x53	; 83
    4f42:	09 f0       	breq	.+2      	; 0x4f46 <vfprintf+0x120>
    4f44:	5a c0       	rjmp	.+180    	; 0x4ffa <vfprintf+0x1d4>
    4f46:	22 c0       	rjmp	.+68     	; 0x4f8c <vfprintf+0x166>
    4f48:	f5 01       	movw	r30, r10
    4f4a:	80 81       	ld	r24, Z
    4f4c:	89 83       	std	Y+1, r24	; 0x01
    4f4e:	22 e0       	ldi	r18, 0x02	; 2
    4f50:	30 e0       	ldi	r19, 0x00	; 0
    4f52:	a2 0e       	add	r10, r18
    4f54:	b3 1e       	adc	r11, r19
    4f56:	21 e0       	ldi	r18, 0x01	; 1
    4f58:	c2 2e       	mov	r12, r18
    4f5a:	d1 2c       	mov	r13, r1
    4f5c:	42 01       	movw	r8, r4
    4f5e:	14 c0       	rjmp	.+40     	; 0x4f88 <vfprintf+0x162>
    4f60:	92 e0       	ldi	r25, 0x02	; 2
    4f62:	29 2e       	mov	r2, r25
    4f64:	31 2c       	mov	r3, r1
    4f66:	2a 0c       	add	r2, r10
    4f68:	3b 1c       	adc	r3, r11
    4f6a:	f5 01       	movw	r30, r10
    4f6c:	80 80       	ld	r8, Z
    4f6e:	91 80       	ldd	r9, Z+1	; 0x01
    4f70:	16 ff       	sbrs	r17, 6
    4f72:	03 c0       	rjmp	.+6      	; 0x4f7a <vfprintf+0x154>
    4f74:	6f 2d       	mov	r22, r15
    4f76:	70 e0       	ldi	r23, 0x00	; 0
    4f78:	02 c0       	rjmp	.+4      	; 0x4f7e <vfprintf+0x158>
    4f7a:	6f ef       	ldi	r22, 0xFF	; 255
    4f7c:	7f ef       	ldi	r23, 0xFF	; 255
    4f7e:	c4 01       	movw	r24, r8
    4f80:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <strnlen>
    4f84:	6c 01       	movw	r12, r24
    4f86:	51 01       	movw	r10, r2
    4f88:	1f 77       	andi	r17, 0x7F	; 127
    4f8a:	15 c0       	rjmp	.+42     	; 0x4fb6 <vfprintf+0x190>
    4f8c:	82 e0       	ldi	r24, 0x02	; 2
    4f8e:	28 2e       	mov	r2, r24
    4f90:	31 2c       	mov	r3, r1
    4f92:	2a 0c       	add	r2, r10
    4f94:	3b 1c       	adc	r3, r11
    4f96:	f5 01       	movw	r30, r10
    4f98:	80 80       	ld	r8, Z
    4f9a:	91 80       	ldd	r9, Z+1	; 0x01
    4f9c:	16 ff       	sbrs	r17, 6
    4f9e:	03 c0       	rjmp	.+6      	; 0x4fa6 <vfprintf+0x180>
    4fa0:	6f 2d       	mov	r22, r15
    4fa2:	70 e0       	ldi	r23, 0x00	; 0
    4fa4:	02 c0       	rjmp	.+4      	; 0x4faa <vfprintf+0x184>
    4fa6:	6f ef       	ldi	r22, 0xFF	; 255
    4fa8:	7f ef       	ldi	r23, 0xFF	; 255
    4faa:	c4 01       	movw	r24, r8
    4fac:	0e 94 f1 28 	call	0x51e2	; 0x51e2 <strnlen_P>
    4fb0:	6c 01       	movw	r12, r24
    4fb2:	10 68       	ori	r17, 0x80	; 128
    4fb4:	51 01       	movw	r10, r2
    4fb6:	13 fd       	sbrc	r17, 3
    4fb8:	1c c0       	rjmp	.+56     	; 0x4ff2 <vfprintf+0x1cc>
    4fba:	06 c0       	rjmp	.+12     	; 0x4fc8 <vfprintf+0x1a2>
    4fbc:	80 e2       	ldi	r24, 0x20	; 32
    4fbe:	90 e0       	ldi	r25, 0x00	; 0
    4fc0:	b3 01       	movw	r22, r6
    4fc2:	0e 94 07 29 	call	0x520e	; 0x520e <fputc>
    4fc6:	ea 94       	dec	r14
    4fc8:	8e 2d       	mov	r24, r14
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	c8 16       	cp	r12, r24
    4fce:	d9 06       	cpc	r13, r25
    4fd0:	a8 f3       	brcs	.-22     	; 0x4fbc <vfprintf+0x196>
    4fd2:	0f c0       	rjmp	.+30     	; 0x4ff2 <vfprintf+0x1cc>
    4fd4:	f4 01       	movw	r30, r8
    4fd6:	17 fd       	sbrc	r17, 7
    4fd8:	85 91       	lpm	r24, Z+
    4fda:	17 ff       	sbrs	r17, 7
    4fdc:	81 91       	ld	r24, Z+
    4fde:	4f 01       	movw	r8, r30
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	b3 01       	movw	r22, r6
    4fe4:	0e 94 07 29 	call	0x520e	; 0x520e <fputc>
    4fe8:	e1 10       	cpse	r14, r1
    4fea:	ea 94       	dec	r14
    4fec:	08 94       	sec
    4fee:	c1 08       	sbc	r12, r1
    4ff0:	d1 08       	sbc	r13, r1
    4ff2:	c1 14       	cp	r12, r1
    4ff4:	d1 04       	cpc	r13, r1
    4ff6:	71 f7       	brne	.-36     	; 0x4fd4 <vfprintf+0x1ae>
    4ff8:	e7 c0       	rjmp	.+462    	; 0x51c8 <vfprintf+0x3a2>
    4ffa:	84 36       	cpi	r24, 0x64	; 100
    4ffc:	11 f0       	breq	.+4      	; 0x5002 <vfprintf+0x1dc>
    4ffe:	89 36       	cpi	r24, 0x69	; 105
    5000:	51 f5       	brne	.+84     	; 0x5056 <vfprintf+0x230>
    5002:	f5 01       	movw	r30, r10
    5004:	17 ff       	sbrs	r17, 7
    5006:	07 c0       	rjmp	.+14     	; 0x5016 <vfprintf+0x1f0>
    5008:	80 81       	ld	r24, Z
    500a:	91 81       	ldd	r25, Z+1	; 0x01
    500c:	a2 81       	ldd	r26, Z+2	; 0x02
    500e:	b3 81       	ldd	r27, Z+3	; 0x03
    5010:	24 e0       	ldi	r18, 0x04	; 4
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	08 c0       	rjmp	.+16     	; 0x5026 <vfprintf+0x200>
    5016:	80 81       	ld	r24, Z
    5018:	91 81       	ldd	r25, Z+1	; 0x01
    501a:	aa 27       	eor	r26, r26
    501c:	97 fd       	sbrc	r25, 7
    501e:	a0 95       	com	r26
    5020:	ba 2f       	mov	r27, r26
    5022:	22 e0       	ldi	r18, 0x02	; 2
    5024:	30 e0       	ldi	r19, 0x00	; 0
    5026:	a2 0e       	add	r10, r18
    5028:	b3 1e       	adc	r11, r19
    502a:	01 2f       	mov	r16, r17
    502c:	0f 76       	andi	r16, 0x6F	; 111
    502e:	b7 ff       	sbrs	r27, 7
    5030:	08 c0       	rjmp	.+16     	; 0x5042 <vfprintf+0x21c>
    5032:	b0 95       	com	r27
    5034:	a0 95       	com	r26
    5036:	90 95       	com	r25
    5038:	81 95       	neg	r24
    503a:	9f 4f       	sbci	r25, 0xFF	; 255
    503c:	af 4f       	sbci	r26, 0xFF	; 255
    503e:	bf 4f       	sbci	r27, 0xFF	; 255
    5040:	00 68       	ori	r16, 0x80	; 128
    5042:	bc 01       	movw	r22, r24
    5044:	cd 01       	movw	r24, r26
    5046:	a2 01       	movw	r20, r4
    5048:	2a e0       	ldi	r18, 0x0A	; 10
    504a:	30 e0       	ldi	r19, 0x00	; 0
    504c:	0e 94 33 29 	call	0x5266	; 0x5266 <__ultoa_invert>
    5050:	d8 2e       	mov	r13, r24
    5052:	d4 18       	sub	r13, r4
    5054:	3f c0       	rjmp	.+126    	; 0x50d4 <vfprintf+0x2ae>
    5056:	85 37       	cpi	r24, 0x75	; 117
    5058:	21 f4       	brne	.+8      	; 0x5062 <vfprintf+0x23c>
    505a:	1f 7e       	andi	r17, 0xEF	; 239
    505c:	2a e0       	ldi	r18, 0x0A	; 10
    505e:	30 e0       	ldi	r19, 0x00	; 0
    5060:	20 c0       	rjmp	.+64     	; 0x50a2 <vfprintf+0x27c>
    5062:	19 7f       	andi	r17, 0xF9	; 249
    5064:	8f 36       	cpi	r24, 0x6F	; 111
    5066:	a9 f0       	breq	.+42     	; 0x5092 <vfprintf+0x26c>
    5068:	80 37       	cpi	r24, 0x70	; 112
    506a:	20 f4       	brcc	.+8      	; 0x5074 <vfprintf+0x24e>
    506c:	88 35       	cpi	r24, 0x58	; 88
    506e:	09 f0       	breq	.+2      	; 0x5072 <vfprintf+0x24c>
    5070:	ae c0       	rjmp	.+348    	; 0x51ce <vfprintf+0x3a8>
    5072:	0b c0       	rjmp	.+22     	; 0x508a <vfprintf+0x264>
    5074:	80 37       	cpi	r24, 0x70	; 112
    5076:	21 f0       	breq	.+8      	; 0x5080 <vfprintf+0x25a>
    5078:	88 37       	cpi	r24, 0x78	; 120
    507a:	09 f0       	breq	.+2      	; 0x507e <vfprintf+0x258>
    507c:	a8 c0       	rjmp	.+336    	; 0x51ce <vfprintf+0x3a8>
    507e:	01 c0       	rjmp	.+2      	; 0x5082 <vfprintf+0x25c>
    5080:	10 61       	ori	r17, 0x10	; 16
    5082:	14 ff       	sbrs	r17, 4
    5084:	09 c0       	rjmp	.+18     	; 0x5098 <vfprintf+0x272>
    5086:	14 60       	ori	r17, 0x04	; 4
    5088:	07 c0       	rjmp	.+14     	; 0x5098 <vfprintf+0x272>
    508a:	14 ff       	sbrs	r17, 4
    508c:	08 c0       	rjmp	.+16     	; 0x509e <vfprintf+0x278>
    508e:	16 60       	ori	r17, 0x06	; 6
    5090:	06 c0       	rjmp	.+12     	; 0x509e <vfprintf+0x278>
    5092:	28 e0       	ldi	r18, 0x08	; 8
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	05 c0       	rjmp	.+10     	; 0x50a2 <vfprintf+0x27c>
    5098:	20 e1       	ldi	r18, 0x10	; 16
    509a:	30 e0       	ldi	r19, 0x00	; 0
    509c:	02 c0       	rjmp	.+4      	; 0x50a2 <vfprintf+0x27c>
    509e:	20 e1       	ldi	r18, 0x10	; 16
    50a0:	32 e0       	ldi	r19, 0x02	; 2
    50a2:	f5 01       	movw	r30, r10
    50a4:	17 ff       	sbrs	r17, 7
    50a6:	07 c0       	rjmp	.+14     	; 0x50b6 <vfprintf+0x290>
    50a8:	60 81       	ld	r22, Z
    50aa:	71 81       	ldd	r23, Z+1	; 0x01
    50ac:	82 81       	ldd	r24, Z+2	; 0x02
    50ae:	93 81       	ldd	r25, Z+3	; 0x03
    50b0:	44 e0       	ldi	r20, 0x04	; 4
    50b2:	50 e0       	ldi	r21, 0x00	; 0
    50b4:	06 c0       	rjmp	.+12     	; 0x50c2 <vfprintf+0x29c>
    50b6:	60 81       	ld	r22, Z
    50b8:	71 81       	ldd	r23, Z+1	; 0x01
    50ba:	80 e0       	ldi	r24, 0x00	; 0
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	42 e0       	ldi	r20, 0x02	; 2
    50c0:	50 e0       	ldi	r21, 0x00	; 0
    50c2:	a4 0e       	add	r10, r20
    50c4:	b5 1e       	adc	r11, r21
    50c6:	a2 01       	movw	r20, r4
    50c8:	0e 94 33 29 	call	0x5266	; 0x5266 <__ultoa_invert>
    50cc:	d8 2e       	mov	r13, r24
    50ce:	d4 18       	sub	r13, r4
    50d0:	01 2f       	mov	r16, r17
    50d2:	0f 77       	andi	r16, 0x7F	; 127
    50d4:	06 ff       	sbrs	r16, 6
    50d6:	09 c0       	rjmp	.+18     	; 0x50ea <vfprintf+0x2c4>
    50d8:	0e 7f       	andi	r16, 0xFE	; 254
    50da:	df 14       	cp	r13, r15
    50dc:	30 f4       	brcc	.+12     	; 0x50ea <vfprintf+0x2c4>
    50de:	04 ff       	sbrs	r16, 4
    50e0:	06 c0       	rjmp	.+12     	; 0x50ee <vfprintf+0x2c8>
    50e2:	02 fd       	sbrc	r16, 2
    50e4:	04 c0       	rjmp	.+8      	; 0x50ee <vfprintf+0x2c8>
    50e6:	0f 7e       	andi	r16, 0xEF	; 239
    50e8:	02 c0       	rjmp	.+4      	; 0x50ee <vfprintf+0x2c8>
    50ea:	1d 2d       	mov	r17, r13
    50ec:	01 c0       	rjmp	.+2      	; 0x50f0 <vfprintf+0x2ca>
    50ee:	1f 2d       	mov	r17, r15
    50f0:	80 2f       	mov	r24, r16
    50f2:	90 e0       	ldi	r25, 0x00	; 0
    50f4:	04 ff       	sbrs	r16, 4
    50f6:	0c c0       	rjmp	.+24     	; 0x5110 <vfprintf+0x2ea>
    50f8:	fe 01       	movw	r30, r28
    50fa:	ed 0d       	add	r30, r13
    50fc:	f1 1d       	adc	r31, r1
    50fe:	20 81       	ld	r18, Z
    5100:	20 33       	cpi	r18, 0x30	; 48
    5102:	11 f4       	brne	.+4      	; 0x5108 <vfprintf+0x2e2>
    5104:	09 7e       	andi	r16, 0xE9	; 233
    5106:	09 c0       	rjmp	.+18     	; 0x511a <vfprintf+0x2f4>
    5108:	02 ff       	sbrs	r16, 2
    510a:	06 c0       	rjmp	.+12     	; 0x5118 <vfprintf+0x2f2>
    510c:	1e 5f       	subi	r17, 0xFE	; 254
    510e:	05 c0       	rjmp	.+10     	; 0x511a <vfprintf+0x2f4>
    5110:	86 78       	andi	r24, 0x86	; 134
    5112:	90 70       	andi	r25, 0x00	; 0
    5114:	00 97       	sbiw	r24, 0x00	; 0
    5116:	09 f0       	breq	.+2      	; 0x511a <vfprintf+0x2f4>
    5118:	1f 5f       	subi	r17, 0xFF	; 255
    511a:	80 2e       	mov	r8, r16
    511c:	99 24       	eor	r9, r9
    511e:	03 fd       	sbrc	r16, 3
    5120:	12 c0       	rjmp	.+36     	; 0x5146 <vfprintf+0x320>
    5122:	00 ff       	sbrs	r16, 0
    5124:	0d c0       	rjmp	.+26     	; 0x5140 <vfprintf+0x31a>
    5126:	fd 2c       	mov	r15, r13
    5128:	1e 15       	cp	r17, r14
    512a:	50 f4       	brcc	.+20     	; 0x5140 <vfprintf+0x31a>
    512c:	fe 0c       	add	r15, r14
    512e:	f1 1a       	sub	r15, r17
    5130:	1e 2d       	mov	r17, r14
    5132:	06 c0       	rjmp	.+12     	; 0x5140 <vfprintf+0x31a>
    5134:	80 e2       	ldi	r24, 0x20	; 32
    5136:	90 e0       	ldi	r25, 0x00	; 0
    5138:	b3 01       	movw	r22, r6
    513a:	0e 94 07 29 	call	0x520e	; 0x520e <fputc>
    513e:	1f 5f       	subi	r17, 0xFF	; 255
    5140:	1e 15       	cp	r17, r14
    5142:	c0 f3       	brcs	.-16     	; 0x5134 <vfprintf+0x30e>
    5144:	04 c0       	rjmp	.+8      	; 0x514e <vfprintf+0x328>
    5146:	1e 15       	cp	r17, r14
    5148:	10 f4       	brcc	.+4      	; 0x514e <vfprintf+0x328>
    514a:	e1 1a       	sub	r14, r17
    514c:	01 c0       	rjmp	.+2      	; 0x5150 <vfprintf+0x32a>
    514e:	ee 24       	eor	r14, r14
    5150:	84 fe       	sbrs	r8, 4
    5152:	0f c0       	rjmp	.+30     	; 0x5172 <vfprintf+0x34c>
    5154:	80 e3       	ldi	r24, 0x30	; 48
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	b3 01       	movw	r22, r6
    515a:	0e 94 07 29 	call	0x520e	; 0x520e <fputc>
    515e:	82 fe       	sbrs	r8, 2
    5160:	1f c0       	rjmp	.+62     	; 0x51a0 <vfprintf+0x37a>
    5162:	81 fe       	sbrs	r8, 1
    5164:	03 c0       	rjmp	.+6      	; 0x516c <vfprintf+0x346>
    5166:	88 e5       	ldi	r24, 0x58	; 88
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	10 c0       	rjmp	.+32     	; 0x518c <vfprintf+0x366>
    516c:	88 e7       	ldi	r24, 0x78	; 120
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	0d c0       	rjmp	.+26     	; 0x518c <vfprintf+0x366>
    5172:	c4 01       	movw	r24, r8
    5174:	86 78       	andi	r24, 0x86	; 134
    5176:	90 70       	andi	r25, 0x00	; 0
    5178:	00 97       	sbiw	r24, 0x00	; 0
    517a:	91 f0       	breq	.+36     	; 0x51a0 <vfprintf+0x37a>
    517c:	81 fc       	sbrc	r8, 1
    517e:	02 c0       	rjmp	.+4      	; 0x5184 <vfprintf+0x35e>
    5180:	80 e2       	ldi	r24, 0x20	; 32
    5182:	01 c0       	rjmp	.+2      	; 0x5186 <vfprintf+0x360>
    5184:	8b e2       	ldi	r24, 0x2B	; 43
    5186:	07 fd       	sbrc	r16, 7
    5188:	8d e2       	ldi	r24, 0x2D	; 45
    518a:	90 e0       	ldi	r25, 0x00	; 0
    518c:	b3 01       	movw	r22, r6
    518e:	0e 94 07 29 	call	0x520e	; 0x520e <fputc>
    5192:	06 c0       	rjmp	.+12     	; 0x51a0 <vfprintf+0x37a>
    5194:	80 e3       	ldi	r24, 0x30	; 48
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	b3 01       	movw	r22, r6
    519a:	0e 94 07 29 	call	0x520e	; 0x520e <fputc>
    519e:	fa 94       	dec	r15
    51a0:	df 14       	cp	r13, r15
    51a2:	c0 f3       	brcs	.-16     	; 0x5194 <vfprintf+0x36e>
    51a4:	da 94       	dec	r13
    51a6:	f2 01       	movw	r30, r4
    51a8:	ed 0d       	add	r30, r13
    51aa:	f1 1d       	adc	r31, r1
    51ac:	80 81       	ld	r24, Z
    51ae:	90 e0       	ldi	r25, 0x00	; 0
    51b0:	b3 01       	movw	r22, r6
    51b2:	0e 94 07 29 	call	0x520e	; 0x520e <fputc>
    51b6:	dd 20       	and	r13, r13
    51b8:	a9 f7       	brne	.-22     	; 0x51a4 <vfprintf+0x37e>
    51ba:	06 c0       	rjmp	.+12     	; 0x51c8 <vfprintf+0x3a2>
    51bc:	80 e2       	ldi	r24, 0x20	; 32
    51be:	90 e0       	ldi	r25, 0x00	; 0
    51c0:	b3 01       	movw	r22, r6
    51c2:	0e 94 07 29 	call	0x520e	; 0x520e <fputc>
    51c6:	ea 94       	dec	r14
    51c8:	ee 20       	and	r14, r14
    51ca:	c1 f7       	brne	.-16     	; 0x51bc <vfprintf+0x396>
    51cc:	40 ce       	rjmp	.-896    	; 0x4e4e <vfprintf+0x28>
    51ce:	f3 01       	movw	r30, r6
    51d0:	86 81       	ldd	r24, Z+6	; 0x06
    51d2:	97 81       	ldd	r25, Z+7	; 0x07
    51d4:	02 c0       	rjmp	.+4      	; 0x51da <vfprintf+0x3b4>
    51d6:	8f ef       	ldi	r24, 0xFF	; 255
    51d8:	9f ef       	ldi	r25, 0xFF	; 255
    51da:	2d 96       	adiw	r28, 0x0d	; 13
    51dc:	e2 e1       	ldi	r30, 0x12	; 18
    51de:	0c 94 ad 29 	jmp	0x535a	; 0x535a <__epilogue_restores__>

000051e2 <strnlen_P>:
    51e2:	fc 01       	movw	r30, r24
    51e4:	05 90       	lpm	r0, Z+
    51e6:	61 50       	subi	r22, 0x01	; 1
    51e8:	70 40       	sbci	r23, 0x00	; 0
    51ea:	01 10       	cpse	r0, r1
    51ec:	d8 f7       	brcc	.-10     	; 0x51e4 <strnlen_P+0x2>
    51ee:	80 95       	com	r24
    51f0:	90 95       	com	r25
    51f2:	8e 0f       	add	r24, r30
    51f4:	9f 1f       	adc	r25, r31
    51f6:	08 95       	ret

000051f8 <strnlen>:
    51f8:	fc 01       	movw	r30, r24
    51fa:	61 50       	subi	r22, 0x01	; 1
    51fc:	70 40       	sbci	r23, 0x00	; 0
    51fe:	01 90       	ld	r0, Z+
    5200:	01 10       	cpse	r0, r1
    5202:	d8 f7       	brcc	.-10     	; 0x51fa <strnlen+0x2>
    5204:	80 95       	com	r24
    5206:	90 95       	com	r25
    5208:	8e 0f       	add	r24, r30
    520a:	9f 1f       	adc	r25, r31
    520c:	08 95       	ret

0000520e <fputc>:
    520e:	0f 93       	push	r16
    5210:	1f 93       	push	r17
    5212:	cf 93       	push	r28
    5214:	df 93       	push	r29
    5216:	8c 01       	movw	r16, r24
    5218:	eb 01       	movw	r28, r22
    521a:	8b 81       	ldd	r24, Y+3	; 0x03
    521c:	81 ff       	sbrs	r24, 1
    521e:	1b c0       	rjmp	.+54     	; 0x5256 <fputc+0x48>
    5220:	82 ff       	sbrs	r24, 2
    5222:	0d c0       	rjmp	.+26     	; 0x523e <fputc+0x30>
    5224:	2e 81       	ldd	r18, Y+6	; 0x06
    5226:	3f 81       	ldd	r19, Y+7	; 0x07
    5228:	8c 81       	ldd	r24, Y+4	; 0x04
    522a:	9d 81       	ldd	r25, Y+5	; 0x05
    522c:	28 17       	cp	r18, r24
    522e:	39 07       	cpc	r19, r25
    5230:	64 f4       	brge	.+24     	; 0x524a <fputc+0x3c>
    5232:	e8 81       	ld	r30, Y
    5234:	f9 81       	ldd	r31, Y+1	; 0x01
    5236:	01 93       	st	Z+, r16
    5238:	f9 83       	std	Y+1, r31	; 0x01
    523a:	e8 83       	st	Y, r30
    523c:	06 c0       	rjmp	.+12     	; 0x524a <fputc+0x3c>
    523e:	e8 85       	ldd	r30, Y+8	; 0x08
    5240:	f9 85       	ldd	r31, Y+9	; 0x09
    5242:	80 2f       	mov	r24, r16
    5244:	09 95       	icall
    5246:	00 97       	sbiw	r24, 0x00	; 0
    5248:	31 f4       	brne	.+12     	; 0x5256 <fputc+0x48>
    524a:	8e 81       	ldd	r24, Y+6	; 0x06
    524c:	9f 81       	ldd	r25, Y+7	; 0x07
    524e:	01 96       	adiw	r24, 0x01	; 1
    5250:	9f 83       	std	Y+7, r25	; 0x07
    5252:	8e 83       	std	Y+6, r24	; 0x06
    5254:	02 c0       	rjmp	.+4      	; 0x525a <fputc+0x4c>
    5256:	0f ef       	ldi	r16, 0xFF	; 255
    5258:	1f ef       	ldi	r17, 0xFF	; 255
    525a:	c8 01       	movw	r24, r16
    525c:	df 91       	pop	r29
    525e:	cf 91       	pop	r28
    5260:	1f 91       	pop	r17
    5262:	0f 91       	pop	r16
    5264:	08 95       	ret

00005266 <__ultoa_invert>:
    5266:	fa 01       	movw	r30, r20
    5268:	aa 27       	eor	r26, r26
    526a:	28 30       	cpi	r18, 0x08	; 8
    526c:	51 f1       	breq	.+84     	; 0x52c2 <__ultoa_invert+0x5c>
    526e:	20 31       	cpi	r18, 0x10	; 16
    5270:	81 f1       	breq	.+96     	; 0x52d2 <__ultoa_invert+0x6c>
    5272:	e8 94       	clt
    5274:	6f 93       	push	r22
    5276:	6e 7f       	andi	r22, 0xFE	; 254
    5278:	6e 5f       	subi	r22, 0xFE	; 254
    527a:	7f 4f       	sbci	r23, 0xFF	; 255
    527c:	8f 4f       	sbci	r24, 0xFF	; 255
    527e:	9f 4f       	sbci	r25, 0xFF	; 255
    5280:	af 4f       	sbci	r26, 0xFF	; 255
    5282:	b1 e0       	ldi	r27, 0x01	; 1
    5284:	3e d0       	rcall	.+124    	; 0x5302 <__ultoa_invert+0x9c>
    5286:	b4 e0       	ldi	r27, 0x04	; 4
    5288:	3c d0       	rcall	.+120    	; 0x5302 <__ultoa_invert+0x9c>
    528a:	67 0f       	add	r22, r23
    528c:	78 1f       	adc	r23, r24
    528e:	89 1f       	adc	r24, r25
    5290:	9a 1f       	adc	r25, r26
    5292:	a1 1d       	adc	r26, r1
    5294:	68 0f       	add	r22, r24
    5296:	79 1f       	adc	r23, r25
    5298:	8a 1f       	adc	r24, r26
    529a:	91 1d       	adc	r25, r1
    529c:	a1 1d       	adc	r26, r1
    529e:	6a 0f       	add	r22, r26
    52a0:	71 1d       	adc	r23, r1
    52a2:	81 1d       	adc	r24, r1
    52a4:	91 1d       	adc	r25, r1
    52a6:	a1 1d       	adc	r26, r1
    52a8:	20 d0       	rcall	.+64     	; 0x52ea <__ultoa_invert+0x84>
    52aa:	09 f4       	brne	.+2      	; 0x52ae <__ultoa_invert+0x48>
    52ac:	68 94       	set
    52ae:	3f 91       	pop	r19
    52b0:	2a e0       	ldi	r18, 0x0A	; 10
    52b2:	26 9f       	mul	r18, r22
    52b4:	11 24       	eor	r1, r1
    52b6:	30 19       	sub	r19, r0
    52b8:	30 5d       	subi	r19, 0xD0	; 208
    52ba:	31 93       	st	Z+, r19
    52bc:	de f6       	brtc	.-74     	; 0x5274 <__ultoa_invert+0xe>
    52be:	cf 01       	movw	r24, r30
    52c0:	08 95       	ret
    52c2:	46 2f       	mov	r20, r22
    52c4:	47 70       	andi	r20, 0x07	; 7
    52c6:	40 5d       	subi	r20, 0xD0	; 208
    52c8:	41 93       	st	Z+, r20
    52ca:	b3 e0       	ldi	r27, 0x03	; 3
    52cc:	0f d0       	rcall	.+30     	; 0x52ec <__ultoa_invert+0x86>
    52ce:	c9 f7       	brne	.-14     	; 0x52c2 <__ultoa_invert+0x5c>
    52d0:	f6 cf       	rjmp	.-20     	; 0x52be <__ultoa_invert+0x58>
    52d2:	46 2f       	mov	r20, r22
    52d4:	4f 70       	andi	r20, 0x0F	; 15
    52d6:	40 5d       	subi	r20, 0xD0	; 208
    52d8:	4a 33       	cpi	r20, 0x3A	; 58
    52da:	18 f0       	brcs	.+6      	; 0x52e2 <__ultoa_invert+0x7c>
    52dc:	49 5d       	subi	r20, 0xD9	; 217
    52de:	31 fd       	sbrc	r19, 1
    52e0:	40 52       	subi	r20, 0x20	; 32
    52e2:	41 93       	st	Z+, r20
    52e4:	02 d0       	rcall	.+4      	; 0x52ea <__ultoa_invert+0x84>
    52e6:	a9 f7       	brne	.-22     	; 0x52d2 <__ultoa_invert+0x6c>
    52e8:	ea cf       	rjmp	.-44     	; 0x52be <__ultoa_invert+0x58>
    52ea:	b4 e0       	ldi	r27, 0x04	; 4
    52ec:	a6 95       	lsr	r26
    52ee:	97 95       	ror	r25
    52f0:	87 95       	ror	r24
    52f2:	77 95       	ror	r23
    52f4:	67 95       	ror	r22
    52f6:	ba 95       	dec	r27
    52f8:	c9 f7       	brne	.-14     	; 0x52ec <__ultoa_invert+0x86>
    52fa:	00 97       	sbiw	r24, 0x00	; 0
    52fc:	61 05       	cpc	r22, r1
    52fe:	71 05       	cpc	r23, r1
    5300:	08 95       	ret
    5302:	9b 01       	movw	r18, r22
    5304:	ac 01       	movw	r20, r24
    5306:	0a 2e       	mov	r0, r26
    5308:	06 94       	lsr	r0
    530a:	57 95       	ror	r21
    530c:	47 95       	ror	r20
    530e:	37 95       	ror	r19
    5310:	27 95       	ror	r18
    5312:	ba 95       	dec	r27
    5314:	c9 f7       	brne	.-14     	; 0x5308 <__ultoa_invert+0xa2>
    5316:	62 0f       	add	r22, r18
    5318:	73 1f       	adc	r23, r19
    531a:	84 1f       	adc	r24, r20
    531c:	95 1f       	adc	r25, r21
    531e:	a0 1d       	adc	r26, r0
    5320:	08 95       	ret

00005322 <__prologue_saves__>:
    5322:	2f 92       	push	r2
    5324:	3f 92       	push	r3
    5326:	4f 92       	push	r4
    5328:	5f 92       	push	r5
    532a:	6f 92       	push	r6
    532c:	7f 92       	push	r7
    532e:	8f 92       	push	r8
    5330:	9f 92       	push	r9
    5332:	af 92       	push	r10
    5334:	bf 92       	push	r11
    5336:	cf 92       	push	r12
    5338:	df 92       	push	r13
    533a:	ef 92       	push	r14
    533c:	ff 92       	push	r15
    533e:	0f 93       	push	r16
    5340:	1f 93       	push	r17
    5342:	cf 93       	push	r28
    5344:	df 93       	push	r29
    5346:	cd b7       	in	r28, 0x3d	; 61
    5348:	de b7       	in	r29, 0x3e	; 62
    534a:	ca 1b       	sub	r28, r26
    534c:	db 0b       	sbc	r29, r27
    534e:	0f b6       	in	r0, 0x3f	; 63
    5350:	f8 94       	cli
    5352:	de bf       	out	0x3e, r29	; 62
    5354:	0f be       	out	0x3f, r0	; 63
    5356:	cd bf       	out	0x3d, r28	; 61
    5358:	09 94       	ijmp

0000535a <__epilogue_restores__>:
    535a:	2a 88       	ldd	r2, Y+18	; 0x12
    535c:	39 88       	ldd	r3, Y+17	; 0x11
    535e:	48 88       	ldd	r4, Y+16	; 0x10
    5360:	5f 84       	ldd	r5, Y+15	; 0x0f
    5362:	6e 84       	ldd	r6, Y+14	; 0x0e
    5364:	7d 84       	ldd	r7, Y+13	; 0x0d
    5366:	8c 84       	ldd	r8, Y+12	; 0x0c
    5368:	9b 84       	ldd	r9, Y+11	; 0x0b
    536a:	aa 84       	ldd	r10, Y+10	; 0x0a
    536c:	b9 84       	ldd	r11, Y+9	; 0x09
    536e:	c8 84       	ldd	r12, Y+8	; 0x08
    5370:	df 80       	ldd	r13, Y+7	; 0x07
    5372:	ee 80       	ldd	r14, Y+6	; 0x06
    5374:	fd 80       	ldd	r15, Y+5	; 0x05
    5376:	0c 81       	ldd	r16, Y+4	; 0x04
    5378:	1b 81       	ldd	r17, Y+3	; 0x03
    537a:	aa 81       	ldd	r26, Y+2	; 0x02
    537c:	b9 81       	ldd	r27, Y+1	; 0x01
    537e:	ce 0f       	add	r28, r30
    5380:	d1 1d       	adc	r29, r1
    5382:	0f b6       	in	r0, 0x3f	; 63
    5384:	f8 94       	cli
    5386:	de bf       	out	0x3e, r29	; 62
    5388:	0f be       	out	0x3f, r0	; 63
    538a:	cd bf       	out	0x3d, r28	; 61
    538c:	ed 01       	movw	r28, r26
    538e:	08 95       	ret

00005390 <_exit>:
    5390:	f8 94       	cli

00005392 <__stop_program>:
    5392:	ff cf       	rjmp	.-2      	; 0x5392 <__stop_program>
